[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/dictionary/american.js",
    "content": "export var dictionary = {\n    id: 'american',\n\n    letter: {\n        'A': '. -',\n        'B': '- . . .',\n        'C': '. .s.',\n        'D': '- . .',\n        'E': '.',\n        'F': '. - .',\n        'G': '- - .',\n        'H': '. . . .',\n        'I': '. .',\n        'J': '- . - .',\n        'K': '- . -',\n        'L': 'd',\n        'M': '- -',\n        'N': '- .',\n        'O': '.s.',\n        'P': '. . . . .',\n        'Q': '. . - .',\n        'R': '.s. .',\n        'S': '. . .',\n        'T': '-',\n        'U': '. . -',\n        'V': '. . . -',\n        'W': '. - -',\n        'X': '. - . .',\n        'Y': '. .s. .',\n        'Z': '. . .s.',\n        '1': '. - - .',\n        '2': '. . - . .',\n        '3': '. . . - .',\n        '4': '. . . . -',\n        '5': '- - -',\n        '6': '. . . . . .',\n        '7': '- - . .',\n        '8': '- . . . .',\n        '9': '- . . -',\n        '0': 'D',\n        '.': '. . - - . .',\n        ',': '. - . -',\n        ':': '- . -s.s.',\n        '?': '- . . - .',\n        '\\'': '. . - .s. - . .',\n        '-': '. . .s. - . .',\n        '/': '. . -s-',\n        '(': '. . . . .s- .',\n        ')': '. . . . .s. .s. .',\n        '\"': '. . - .s- .', // fall back to using open quotes for straight\n        '\\u201c': '. . - .s- .', // open quotes\n        '\\u201d': '. . - .s- . - .', // close quotes\n        '&': '.s. . .',\n        '!': '- - - .',\n        ';': '. . .s. .',\n    },\n\n    letterMatch: /^./,\n\n    ratio: {\n        '.': 1,\n        '-': 2,\n        'd': 4,\n        'D': 5,\n        ' ': -1,\n        's': -1.5,\n        'charSpace': -2,\n        'wordSpace': -3\n    },\n\n    baseElement: '.',\n\n    frequency: {\n        '.': 550,\n        '-': 550,\n        'd': 550,\n        'D': 550,\n        ' ': 0,\n        's': 0,\n        'charSpace': 0,\n        'wordSpace': 0\n    },\n\n    display: {\n        morse: {\n            '\\\\.': '.',\n            '\\\\-': '-', // just a normal hyphen\n            'd': '\\u2e3a', // two-em dash\n            'D': '\\u2e3b', // three-em dash\n            ' ': '',\n            's': ' '\n        },\n        join: {\n            charSpace: '   ',\n            wordSpace: ' / '\n        }\n    },\n\n    tokeniseMorse: function(morse) {\n        morse = morse.trim();\n        morse = morse.replace(/_/g, '-')\n        morse = morse.replace(/\\|/g, '/');\n        morse = morse.replace(/\\u2e3a/g, 'd');\n        morse = morse.replace(/\\u2e3b/g, 'D');\n        morse = morse.replace(/[\\r\\n\\t]+/g, '/');\n        morse = morse.replace(/   +/g, '   ');\n        morse = morse.replace(/([\\.\\-dD]  )([^ ])/g, '$1 $2');\n        morse = morse.replace(/ *\\/[ \\/]*/g, '/');\n        morse = morse.replace(/([\\.\\-dD]) (?=[\\.\\-dD])/g, '$1s');\n\n        let words = morse.split('/');\n        let tokens = words.map(word => word.split('   '));\n        tokens = tokens.map(letters => letters.map(letter => letter.replace(/([\\.\\-])(?=[\\.\\-])/g, '$1 ')));\n        return tokens;\n    },\n\n    morseMatch: new RegExp('^\\\\s*[\\\\.\\\\-_\\u2e3a\\u2e3b]+[\\\\.\\\\-_\\u2e3a\\u2e3b\\\\s\\\\/\\\\|]*$'),\n\n    displayName: {\n        keys: ['.', '-', 'd', 'D', ' ', 's', 'charSpace', 'wordSpace'],\n        values: ['dit','dah','long dash','very long dash','short space','long space','inter-character space','word space']\n    },\n\n    options: {\n    }\n}\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/dictionary/american.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "dictionary",
    "memberof": "src/dictionary/american.js",
    "static": true,
    "longname": "src/dictionary/american.js~dictionary",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/dictionary/american.js",
    "importStyle": "{dictionary}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "{\"id\": string, \"letter\": *, \"letterMatch\": *, \"ratio\": *, \"baseElement\": string, \"frequency\": *, \"display\": *, \"tokeniseMorse\": *, \"morseMatch\": *, \"displayName\": *, \"options\": *}"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/dictionary/arabic.js",
    "content": "export var dictionary = {\r\n    id: 'arabic',\r\n\r\n    letter: {\r\n        'ا': '. -',\r\n        'ب': '- . . .',\r\n        'ت': '-',\r\n        'ث': '- . - .',\r\n        'ج': '. - - -',\r\n        'ح': '. . . .',\r\n        'خ': '- - -',\r\n        'د': '- . .',\r\n        'ذ': '- - . .',\r\n        'ر': '. - .',\r\n        'ز': '- - - .',\r\n        'س': '. . .',\r\n        'ش': '- - - -',\r\n        'ص': '- . . -',\r\n        'ض': '. . . -',\r\n        'ط': '. . -',\r\n        'ظ': '- . - -',\r\n        'ع': '. - . -',\r\n        'غ': '- - .',\r\n        'ف': '. . - .',\r\n        'ق': '- - . -',\r\n        'ك': '- . -',\r\n        'ل': '. - . .',\r\n        'م': '- -',\r\n        'ن': '- .',\r\n        'ه': '. . - - . .',\r\n        'و': '. - -',\r\n        'ي': '. .',\r\n        'ﺀ': '.',\r\n\r\n        '1': '. - - - -',\r\n        '2': '. . - - -',\r\n        '3': '. . . - -',\r\n        '4': '. . . . -',\r\n        '5': '. . . . .',\r\n        '6': '- . . . .',\r\n        '7': '- - . . .',\r\n        '8': '- - - . .',\r\n        '9': '- - - - .',\r\n        '0': '- - - - -',\r\n\r\n        // '.': '. - . - . -',\r\n        // ',': '- - . . - -',\r\n        // ':': '- - - . . .',\r\n        // '?': '. . - - . .',\r\n        // '\\'': '. - - - - .',\r\n        // '-': '- . . . . -',\r\n        // '/': '- . . - .',\r\n        // '(': '- . - - .',\r\n        // ')': '- . - - . -',\r\n        // '“': '. - . . - .',  // U+201C\r\n        // '”': '. - . . - .',  // U+201D\r\n        // '‘': '. - . . - .',  // U+2018\r\n        // '’': '. - . . - .',  // U+2019\r\n        // '\"': '. - . . - .',\r\n        // '@': '. - - . - .',\r\n        // '=': '- . . . -',\r\n        // '&': '. - . . .',\r\n        // '+': '. - . - .',\r\n        // '!': '- . - . - -',\r\n    },\r\n\r\n    letterMatch: /^./,\r\n\r\n    /* 'charSpace' and 'wordSpace' are mandatory. The other symbols are dictionary dependent. */\r\n    ratio: {\r\n        '.': 1,\r\n        '-': 3,\r\n        ' ': -1,\r\n        'charSpace': -3,\r\n        'wordSpace': -7\r\n    },\r\n\r\n    baseElement: '.',\r\n\r\n    frequency: {\r\n        '.': 550,\r\n        '-': 550,\r\n        ' ': 0,\r\n        'charSpace': 0,\r\n        'wordSpace': 0\r\n    },\r\n\r\n    display: {\r\n        morse: {\r\n            '\\\\.': '.',\r\n            '\\\\-': '-',\r\n            ' ': ''\r\n        },\r\n        join: {\r\n            charSpace: ' ',\r\n            wordSpace: ' / '\r\n        }\r\n    },\r\n\r\n    tokeniseMorse: function(morse) {\r\n        morse = morse.trim();\r\n        morse = morse.replace(/_/g, '-')\r\n        morse = morse.replace(/\\|/g, '/');\r\n        morse = morse.replace(/\\s+/g, ' ');\r\n        morse = morse.replace(/\\s*\\/[\\s\\/]*/g, '/');\r\n        let words = morse.split('/');\r\n        let tokens = words.map(word => word.split(' '));\r\n        tokens = tokens.map(letters => letters.map(letter => letter.replace(/(.)(?=.)/g, '$1 ')));\r\n        return tokens;\r\n    },\r\n\r\n    morseMatch: new RegExp('^\\\\s*[\\\\.\\\\-_]+[\\\\.\\\\-_\\\\s\\\\/\\\\|]*$'),\r\n\r\n    displayName: {\r\n        keys: ['.', '-', ' ', 'charSpace', 'wordSpace'],\r\n        values: ['Dit length', 'Dah length', 'Intra-character space', 'Inter-character space', 'Inter-word space']\r\n    },\r\n\r\n    options: {\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/dictionary/arabic.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "dictionary",
    "memberof": "src/dictionary/arabic.js",
    "static": true,
    "longname": "src/dictionary/arabic.js~dictionary",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/dictionary/arabic.js",
    "importStyle": "{dictionary}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "{\"id\": string, \"letter\": *, \"letterMatch\": *, \"ratio\": *, \"baseElement\": string, \"frequency\": *, \"display\": *, \"tokeniseMorse\": *, \"morseMatch\": *, \"displayName\": *, \"options\": *}"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "src/dictionary/cyrillic-ukraine.js",
    "content": "export var dictionary = {\r\n    id: 'cyrillic-ukraine',\r\n\r\n    letter: {\r\n        'А': '. -',\r\n        'Б': '- . . .',\r\n        'В': '. - -',\r\n        'Г': '- - .',\r\n        'Д': '- . .',\r\n        'Е': '.',\r\n        'Ж': '. . . -',\r\n        'З': '- - . .',\r\n        'І': '. .',\r\n        'Й': '. - - -',\r\n        'К': '- . -',\r\n        'Л': '. - . .',\r\n        'М': '- -',\r\n        'Н': '- .',\r\n        'О': '- - -',\r\n        'П': '. - - .',\r\n        'Р': '. - .',\r\n        'С': '. . .',\r\n        'Т': '-',\r\n        'У': '. . -',\r\n        'Ф': '. . - .',\r\n        'Х': '. . . .',\r\n        'Ц': '- . - .',\r\n        'Ч': '- - - .',\r\n        'Ш': '- - - -',\r\n        'Щ': '- - . -',\r\n        'Ъ': '- - . - -',\r\n        'Ы': '- . - -',\r\n        'И': '- . - -',\r\n        'Ь': '- . . -',\r\n        'Є': '. . - . .',\r\n        'Ю': '. . - -',\r\n        'Я': '. - . -',\r\n        'Ї': '. - - - .',\r\n        '1': '. - - - -',\r\n        '2': '. . - - -',\r\n        '3': '. . . - -',\r\n        '4': '. . . . -',\r\n        '5': '. . . . .',\r\n        '6': '- . . . .',\r\n        '7': '- - . . .',\r\n        '8': '- - - . .',\r\n        '9': '- - - - .',\r\n        '0': '- - - - -',\r\n        '.': '. . . . . .',\r\n        ',': '. - . - . -',\r\n        ':': '- - - . . .',\r\n        ';': '- . - . -',\r\n        '?': '. . - - . .',\r\n        '/': '- . . - .',\r\n        '(': '- . - - . -',\r\n        ')': '- . - - . -',\r\n        \"'\": '. - - - - .',\r\n        '\"': '. - . . - .',\r\n        '—': '- . . . . -',\r\n        '!': '- - . . - -',\r\n        '-': '- . . . -',\r\n        '@': '. - - . - .'\r\n    },\r\n\r\n    letterMatch: /^./,\r\n\r\n    /* 'charSpace' and 'wordSpace' are mandatory. The other symbols are dictionary dependent. */\r\n    ratio: {\r\n        '.': 1,\r\n        '-': 3,\r\n        ' ': -1,\r\n        'charSpace': -3,\r\n        'wordSpace': -7\r\n    },\r\n\r\n    baseElement: '.',\r\n\r\n    frequency: {\r\n        '.': 550,\r\n        '-': 550,\r\n        ' ': 0,\r\n        'charSpace': 0,\r\n        'wordSpace': 0\r\n    },\r\n\r\n    display: {\r\n        morse: {\r\n            '\\\\.': '.',\r\n            '\\\\-': '-',\r\n            ' ': ''\r\n        },\r\n        join: {\r\n            charSpace: ' ',\r\n            wordSpace: ' / '\r\n        }\r\n    },\r\n\r\n    tokeniseMorse: function(morse) {\r\n        morse = morse.trim();\r\n        morse = morse.replace(/_/g, '-')\r\n        morse = morse.replace(/\\|/g, '/');\r\n        morse = morse.replace(/\\s+/g, ' ');\r\n        morse = morse.replace(/\\s*\\/[\\s\\/]*/g, '/');\r\n        let words = morse.split('/');\r\n        let tokens = words.map(word => word.split(' '));\r\n        tokens = tokens.map(letters => letters.map(letter => letter.replace(/(.)(?=.)/g, '$1 ')));\r\n        return tokens;\r\n    },\r\n\r\n    morseMatch: new RegExp('^\\\\s*[\\\\.\\\\-_]+[\\\\.\\\\-_\\\\s\\\\/\\\\|]*$'),\r\n\r\n    displayName: {\r\n        keys: ['.', '-', ' ', 'charSpace', 'wordSpace'],\r\n        values: ['Dit length', 'Dah length', 'Intra-character space', 'Inter-character space', 'Inter-word space']\r\n    },\r\n\r\n    options: {\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/dictionary/cyrillic-ukraine.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "dictionary",
    "memberof": "src/dictionary/cyrillic-ukraine.js",
    "static": true,
    "longname": "src/dictionary/cyrillic-ukraine.js~dictionary",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/dictionary/cyrillic-ukraine.js",
    "importStyle": "{dictionary}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "{\"id\": string, \"letter\": *, \"letterMatch\": *, \"ratio\": *, \"baseElement\": string, \"frequency\": *, \"display\": *, \"tokeniseMorse\": *, \"morseMatch\": *, \"displayName\": *, \"options\": *}"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "src/dictionary/cyrillic.js",
    "content": "export var dictionary = {\r\n    id: 'cyrillic',\r\n\r\n    letter: {\r\n        'А': '. -',\r\n        'Б': '- . . .',\r\n        'В': '. - -',\r\n        'Г': '- - .',\r\n        'Д': '- . .',\r\n        'Е': '.',\r\n        'Ж': '. . . -',\r\n        'З': '- - . .',\r\n        'И': '. .',\r\n        'Й': '. - - -',\r\n        'К': '- . -',\r\n        'Л': '. - . .',\r\n        'М': '- -',\r\n        'Н': '- .',\r\n        'О': '- - -',\r\n        'П': '. - - .',\r\n        'Р': '. - .',\r\n        'С': '. . .',\r\n        'Т': '-',\r\n        'У': '. . -',\r\n        'Ф': '. . - .',\r\n        'Х': '. . . .',\r\n        'Ц': '- . - .',\r\n        'Ч': '- - - .',\r\n        'Ш': '- - - -',\r\n        'Щ': '- - . -',\r\n        'Ъ': '- - . - -',\r\n        'Ы': '- . - -',\r\n        'Ь': '- . . -',\r\n        'Э': '. . - . .',\r\n        'Ю': '. . - -',\r\n        'Я': '. - . -',\r\n        '1': '. - - - -',\r\n        '2': '. . - - -',\r\n        '3': '. . . - -',\r\n        '4': '. . . . -',\r\n        '5': '. . . . .',\r\n        '6': '- . . . .',\r\n        '7': '- - . . .',\r\n        '8': '- - - . .',\r\n        '9': '- - - - .',\r\n        '0': '- - - - -',\r\n        '.': '. . . . . .',\r\n        ',': '. - . - . -',\r\n        ':': '- - - . . .',\r\n        ';': '- . - . -',\r\n        '?': '. . - - . .',\r\n        '/': '- . . - .',\r\n        '(': '- . - - . -',\r\n        ')': '- . - - . -',\r\n        \"'\": '. - - - - .',\r\n        '\"': '. - . . - .',\r\n        '—': '- . . . . -',\r\n        '!': '- - . . - -',\r\n        '-': '- . . . -',\r\n        '@': '. - - . - .'\r\n    },\r\n\r\n    letterMatch: /^./,\r\n\r\n    /* 'charSpace' and 'wordSpace' are mandatory. The other symbols are dictionary dependent. */\r\n    ratio: {\r\n        '.': 1,\r\n        '-': 3,\r\n        ' ': -1,\r\n        'charSpace': -3,\r\n        'wordSpace': -7\r\n    },\r\n\r\n    baseElement: '.',\r\n\r\n    frequency: {\r\n        '.': 550,\r\n        '-': 550,\r\n        ' ': 0,\r\n        'charSpace': 0,\r\n        'wordSpace': 0\r\n    },\r\n\r\n    display: {\r\n        morse: {\r\n            '\\\\.': '.',\r\n            '\\\\-': '-',\r\n            ' ': ''\r\n        },\r\n        join: {\r\n            charSpace: ' ',\r\n            wordSpace: ' / '\r\n        }\r\n    },\r\n\r\n    tokeniseMorse: function(morse) {\r\n        morse = morse.trim();\r\n        morse = morse.replace(/_/g, '-')\r\n        morse = morse.replace(/\\|/g, '/');\r\n        morse = morse.replace(/\\s+/g, ' ');\r\n        morse = morse.replace(/\\s*\\/[\\s\\/]*/g, '/');\r\n        let words = morse.split('/');\r\n        let tokens = words.map(word => word.split(' '));\r\n        tokens = tokens.map(letters => letters.map(letter => letter.replace(/(.)(?=.)/g, '$1 ')));\r\n        return tokens;\r\n    },\r\n\r\n    morseMatch: new RegExp('^\\\\s*[\\\\.\\\\-_]+[\\\\.\\\\-_\\\\s\\\\/\\\\|]*$'),\r\n\r\n    displayName: {\r\n        keys: ['.', '-', ' ', 'charSpace', 'wordSpace'],\r\n        values: ['Dit length', 'Dah length', 'Intra-character space', 'Inter-character space', 'Inter-word space']\r\n    },\r\n\r\n    options: {\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/dictionary/cyrillic.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "dictionary",
    "memberof": "src/dictionary/cyrillic.js",
    "static": true,
    "longname": "src/dictionary/cyrillic.js~dictionary",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/dictionary/cyrillic.js",
    "importStyle": "{dictionary}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "{\"id\": string, \"letter\": *, \"letterMatch\": *, \"ratio\": *, \"baseElement\": string, \"frequency\": *, \"display\": *, \"tokeniseMorse\": *, \"morseMatch\": *, \"displayName\": *, \"options\": *}"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/dictionary/hebrew.js",
    "content": "export var dictionary = {\r\n    id: 'hebrew',\r\n\r\n    letter: {\r\n        'א': '. -',\r\n        'ב': '- . . .',\r\n        'ג': '- - .',\r\n        'ד': '- . .',\r\n        'ה': '- - -',\r\n        'ו': '.',\r\n        'ז': '- - . .',\r\n        'ח': '. . . .',\r\n        'ט': '. . -',\r\n        'י': '. .',\r\n        'כ': '- . -',\r\n        'ל': '. - . .',\r\n        'מ': '- -',\r\n        'נ': '- .',\r\n        'ס': '- . - .',\r\n        'ע': '. - - -',\r\n        'פ': '. - - .',\r\n        'צ': '. - -',\r\n        'ק': '- - . -',\r\n        'ר': '. - .',\r\n        'ש': '. . .',\r\n        'ת': '-',\r\n\r\n        '1': '. - - - -',\r\n        '2': '. . - - -',\r\n        '3': '. . . - -',\r\n        '4': '. . . . -',\r\n        '5': '. . . . .',\r\n        '6': '- . . . .',\r\n        '7': '- - . . .',\r\n        '8': '- - - . .',\r\n        '9': '- - - - .',\r\n        '0': '- - - - -',\r\n\r\n        // '.': '. - . - . -',\r\n        // ',': '- - . . - -',\r\n        // ':': '- - - . . .',\r\n        // '?': '. . - - . .',\r\n        // '\\'': '. - - - - .',\r\n        // '-': '- . . . . -',\r\n        // '/': '- . . - .',\r\n        // '(': '- . - - .',\r\n        // ')': '- . - - . -',\r\n        // '“': '. - . . - .',  // U+201C\r\n        // '”': '. - . . - .',  // U+201D\r\n        // '‘': '. - . . - .',  // U+2018\r\n        // '’': '. - . . - .',  // U+2019\r\n        // '\"': '. - . . - .',\r\n        // '@': '. - - . - .',\r\n        // '=': '- . . . -',\r\n        // '&': '. - . . .',\r\n        // '+': '. - . - .',\r\n        // '!': '- . - . - -',\r\n    },\r\n\r\n    letterMatch: /^./,\r\n\r\n    /* 'charSpace' and 'wordSpace' are mandatory. The other symbols are dictionary dependent. */\r\n    ratio: {\r\n        '.': 1,\r\n        '-': 3,\r\n        ' ': -1,\r\n        'charSpace': -3,\r\n        'wordSpace': -7\r\n    },\r\n\r\n    baseElement: '.',\r\n\r\n    frequency: {\r\n        '.': 550,\r\n        '-': 550,\r\n        ' ': 0,\r\n        'charSpace': 0,\r\n        'wordSpace': 0\r\n    },\r\n\r\n    display: {\r\n        morse: {\r\n            '\\\\.': '.',\r\n            '\\\\-': '-',\r\n            ' ': ''\r\n        },\r\n        join: {\r\n            charSpace: ' ',\r\n            wordSpace: ' / '\r\n        }\r\n    },\r\n\r\n    tokeniseMorse: function(morse) {\r\n        morse = morse.trim();\r\n        morse = morse.replace(/_/g, '-')\r\n        morse = morse.replace(/\\|/g, '/');\r\n        morse = morse.replace(/\\s+/g, ' ');\r\n        morse = morse.replace(/\\s*\\/[\\s\\/]*/g, '/');\r\n        let words = morse.split('/');\r\n        let tokens = words.map(word => word.split(' '));\r\n        tokens = tokens.map(letters => letters.map(letter => letter.replace(/(.)(?=.)/g, '$1 ')));\r\n        return tokens;\r\n    },\r\n\r\n    morseMatch: new RegExp('^\\\\s*[\\\\.\\\\-_]+[\\\\.\\\\-_\\\\s\\\\/\\\\|]*$'),\r\n\r\n    displayName: {\r\n        keys: ['.', '-', ' ', 'charSpace', 'wordSpace'],\r\n        values: ['Dit length', 'Dah length', 'Intra-character space', 'Inter-character space', 'Inter-word space']\r\n    },\r\n\r\n    options: {\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/dictionary/hebrew.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "dictionary",
    "memberof": "src/dictionary/hebrew.js",
    "static": true,
    "longname": "src/dictionary/hebrew.js~dictionary",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/dictionary/hebrew.js",
    "importStyle": "{dictionary}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "{\"id\": string, \"letter\": *, \"letterMatch\": *, \"ratio\": *, \"baseElement\": string, \"frequency\": *, \"display\": *, \"tokeniseMorse\": *, \"morseMatch\": *, \"displayName\": *, \"options\": *}"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/dictionary/index.js",
    "content": "import * as international from \"./international.js\";\nimport * as american from \"./american.js\";\nimport * as cyrillic from \"./cyrillic.js\";\nimport * as cyrillicUkraine from \"./cyrillic-ukraine.js\";\nimport * as hebrew from \"./hebrew.js\";\nimport * as arabic from \"./arabic.js\";\n\nexport var dictionaries = {};\n\ndictionaries.international = international.dictionary;\ndictionaries.american = american.dictionary;\ndictionaries.cyrillic = cyrillic.dictionary;\ndictionaries.cyrillicUkraine = cyrillicUkraine.dictionary;\ndictionaries.hebrew = hebrew.dictionary;\ndictionaries.arabic = arabic.dictionary;\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/dictionary/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "dictionaries",
    "memberof": "src/dictionary/index.js",
    "static": true,
    "longname": "src/dictionary/index.js~dictionaries",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/dictionary/index.js",
    "importStyle": "{dictionaries}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/dictionary/international.js",
    "content": "export var dictionary = {\r\n    id: 'international',\r\n\r\n    letter: {\r\n        '×': '- . . -',  // as this is the same as \"X\" it needs to go before \"X\" to get the expected translation from -..-\r\n\r\n        'A': '. -',\r\n        'B': '- . . .',\r\n        'C': '- . - .',\r\n        'D': '- . .',\r\n        'E': '.',\r\n        'F': '. . - .',\r\n        'G': '- - .',\r\n        'H': '. . . .',\r\n        'I': '. .',\r\n        'J': '. - - -',\r\n        'K': '- . -',\r\n        'L': '. - . .',\r\n        'M': '- -',\r\n        'N': '- .',\r\n        'O': '- - -',\r\n        'P': '. - - .',\r\n        'Q': '- - . -',\r\n        'R': '. - .',\r\n        'S': '. . .',\r\n        'T': '-',\r\n        'U': '. . -',\r\n        'V': '. . . -',\r\n        'W': '. - -',\r\n        'X': '- . . -',\r\n        'Y': '- . - -',\r\n        'Z': '- - . .',\r\n\r\n        '1': '. - - - -',\r\n        '2': '. . - - -',\r\n        '3': '. . . - -',\r\n        '4': '. . . . -',\r\n        '5': '. . . . .',\r\n        '6': '- . . . .',\r\n        '7': '- - . . .',\r\n        '8': '- - - . .',\r\n        '9': '- - - - .',\r\n        '0': '- - - - -',\r\n\r\n        '.': '. - . - . -',\r\n        ',': '- - . . - -',\r\n        ':': '- - - . . .',\r\n        '?': '. . - - . .',\r\n        '\\'': '. - - - - .',\r\n        '-': '- . . . . -',\r\n        '/': '- . . - .',\r\n        '(': '- . - - .',\r\n        ')': '- . - - . -',\r\n        '“': '. - . . - .',  // U+201C\r\n        '”': '. - . . - .',  // U+201D\r\n        '‘': '. - . . - .',  // U+2018\r\n        '’': '. - . . - .',  // U+2019\r\n        '\"': '. - . . - .',\r\n        '@': '. - - . - .',\r\n        '=': '- . . . -',\r\n        '&': '. - . . .',\r\n        '+': '. - . - .',\r\n        '!': '- . - . - -',\r\n    },\r\n\r\n    letterMatch: /^./,\r\n\r\n    /* 'charSpace' and 'wordSpace' are mandatory. The other symbols are dictionary dependent. */\r\n    ratio: {\r\n        '.': 1,\r\n        '-': 3,\r\n        ' ': -1,\r\n        'charSpace': -3,\r\n        'wordSpace': -7\r\n    },\r\n\r\n    baseElement: '.',\r\n\r\n    frequency: {\r\n        '.': 550,\r\n        '-': 550,\r\n        ' ': 0,\r\n        'charSpace': 0,\r\n        'wordSpace': 0\r\n    },\r\n\r\n    display: {\r\n        morse: {\r\n            '\\\\.': '.',\r\n            '\\\\-': '-',\r\n            ' ': ''\r\n        },\r\n        join: {\r\n            charSpace: ' ',\r\n            wordSpace: ' / '\r\n        }\r\n    },\r\n\r\n    tokeniseMorse: function(morse) {\r\n        morse = morse.trim();\r\n        morse = morse.replace(/_/g, '-')\r\n        morse = morse.replace(/\\|/g, '/');\r\n        morse = morse.replace(/\\s+/g, ' ');\r\n        morse = morse.replace(/\\s*\\/[\\s\\/]*/g, '/');\r\n        let words = morse.split('/');\r\n        let tokens = words.map(word => word.split(' '));\r\n        tokens = tokens.map(letters => letters.map(letter => letter.replace(/(.)(?=.)/g, '$1 ')));\r\n        return tokens;\r\n    },\r\n\r\n    morseMatch: new RegExp('^\\\\s*[\\\\.\\\\-_]+[\\\\.\\\\-_\\\\s\\\\/\\\\|]*$'),\r\n\r\n    displayName: {\r\n        keys: ['.', '-', ' ', 'charSpace', 'wordSpace'],\r\n        values: ['Dit length', 'Dah length', 'Intra-character space', 'Inter-character space', 'Inter-word space']\r\n    },\r\n\r\n    options: {\r\n        prosigns: {\r\n            letter: {\r\n                '<AA>': '. - . -',\r\n                '<AR>': '. - . - .',\r\n                '<AS>': '. - . . .',\r\n                '<BK>': '- . . . - . -',\r\n                '<BT>': '- . . . -', // also <TV>\r\n                '<CL>': '- . - . . - . .',\r\n                '<CT>': '- . - . -',\r\n                '<DO>': '- . . - - -',\r\n                '<KA>': '- . - . -',\r\n                '<KN>': '- . - - .',\r\n                '<SK>': '. . . - . -', // also <VA>\r\n                '<SN>': '. . . - .', // also <VE>\r\n                '<VA>': '. . . - . -',\r\n                '<VE>': '. . . - .',\r\n                '<SOS>': '. . . - - - . . .'\r\n            },\r\n            letterMatch: /^<...?>|./\r\n        },\r\n        accents: {\r\n            letter: {\r\n                'À': '. - - . -',\r\n                'Å': '. - - . -',\r\n                'Ä': '. - . -',\r\n                'Ą': '. - . -',\r\n                'Æ': '. - . -',\r\n                'Ć': '- . - . .',\r\n                'Ĉ': '- . - . .',\r\n                'Ç': '- . - . .',\r\n                'Đ': '. . - . .',\r\n                'Ð': '. . - - .',\r\n                'É': '. . - . .',\r\n                'È': '. - . . -',\r\n                'Ę': '. . - . .',\r\n                'Ĝ': '- - . - .',\r\n                'Ĥ': '- - - -',\r\n                'Ĵ': '. - - - .',\r\n                'Ł': '. - . . -',\r\n                'Ń': '- - . - -',\r\n                'Ñ': '- - . - -',\r\n                'Ó': '- - - .',\r\n                'Ö': '- - - .',\r\n                'Ø': '- - - .',\r\n                'Ś': '. . . - . . .',\r\n                'Ŝ': '. . . - .',\r\n                'Š': '- - - -',\r\n                'Þ': '. - - . .',\r\n                'Ü': '. . - -',\r\n                'Ŭ': '. . - -',\r\n                'Ź': '- - . . - .',\r\n                'Ż': '- - . . -'\r\n            }\r\n        }\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/dictionary/international.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "dictionary",
    "memberof": "src/dictionary/international.js",
    "static": true,
    "longname": "src/dictionary/international.js~dictionary",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/dictionary/international.js",
    "importStyle": "{dictionary}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "{\"id\": string, \"letter\": *, \"letterMatch\": *, \"ratio\": *, \"baseElement\": string, \"frequency\": *, \"display\": *, \"tokeniseMorse\": *, \"morseMatch\": *, \"displayName\": *, \"options\": *}"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/morse-pro-audiocontext.js",
    "content": "class MorseAudioContext {\n    constructor() {\n        this.AudioContext = window.AudioContext || window.webkitAudioContext;\n        if (this.AudioContext === undefined) {\n            this.hasAudioContext = false;\n            console.log(\"Web Audio API unavailable\");\n            return;\n            // throw (new Error(\"No AudioContext class defined\"));\n        }\n        this.hasAudioContext = true;\n        this.sounds = {};\n        this._unlocked = false;\n        let ua = navigator.userAgent.toLowerCase();\n        this.isIOS = (ua.indexOf(\"iphone\") >= 0 && ua.indexOf(\"like iphone\") < 0 || ua.indexOf(\"ipad\") >= 0 && ua.indexOf(\"like ipad\") < 0 || ua.indexOf(\"ipod\") >= 0 && ua.indexOf(\"like ipod\") < 0);\n        // if (this.isIOS) this.playHTMLaudio();\n    }\n\n    /**\n     * Get an AudioContext. The state of the AudioContext may be \"suspended\".\n     * In Chrome (v83 Windows), Safari (v13.1 Mac Catalina), iOS (v11) you get a running context (and runUnlockedActions executes) upon user interaction.\n     * In Edge (v44.18362.449.0 Windows) you get a running AudioContext straight away but the runUnlockedActions executes.\n     * In Firefox (v75 Windows) you get a suspended AudioContext but it resumes (and runUnlockedActions executes) after a short while without interaction.\n     */\n    getAudioContext() {\n        // console.log(\"Getting AC\");\n        if (this.audioContext !== undefined) {\n            if (this.audioContext.state === \"running\") {\n                // console.log(\"AC is running\");\n            } else {\n                // console.log(\"AudioContext is suspended\");\n                this.audioContext.resume().then(() => {this.runUnlockedActions(1)});\n            }\n        } else {\n            console.log(\"Creating AudioContext\");\n            this.audioContext = new this.AudioContext();\n            this.audioContext.createGain();  // Can help on Safari. Probably not needed but can't hurt\n            console.log(`AudioContext state: ${this.audioContext.state}`);\n            // Will only work if using Firefox (and will take a short while) or where this method is called the first time with a user interaction, otherwise will be ignored\n            this.audioContext.resume().then(() => {this.runUnlockedActions(2)});  \n        }\n        return this.audioContext;\n    }\n\n    /**\n     * Called when we get a running AudioContext\n     */\n    runUnlockedActions(code) {\n        if (this._unlocked) return;\n        this._unlocked = true;\n        console.log(`AudioContext unlocked (${code})`);\n    }\n\n    playHTMLaudio() {\n        // https://github.com/swevans/unmute/blob/master/dev/src/unmute.ts\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio\n        console.log(\"Playing HTML audio\");\n        let tmp = document.createElement(\"div\");\n        tmp.innerHTML = \"<audio x-webkit-airplay='deny'></audio>\";  // Need this tag for Safari as disableRemotePlayback doesn't work\n        let tag = tmp.children.item(0);\n        tag.controls = false;  // don't show playback controls\n        tag.disableRemotePlayback = true; // disables casting of audio to another device (and associated control appearing)\n        tag.preload = \"auto\";\n        // Set the src to a short bit of url encoded as a silent mp3\n        // NOTE The silence MP3 must be high quality, when web audio sounds are played in parallel the web audio sound is mixed to match the bitrate of the html sound\n        // 0.01 seconds of silence VBR220-260 Joint Stereo 859B\n        tag.src = \"data:audio/mpeg;base64,//uQxAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAACcQCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA//////////////////////////////////////////////////////////////////8AAABhTEFNRTMuMTAwA8MAAAAAAAAAABQgJAUHQQAB9AAAAnGMHkkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//sQxAADgnABGiAAQBCqgCRMAAgEAH///////////////7+n/9FTuQsQH//////2NG0jWUGlio5gLQTOtIoeR2WX////X4s9Atb/JRVCbBUpeRUq//////////////////9RUi0f2jn/+xDECgPCjAEQAABN4AAANIAAAAQVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\";\n        // The str below is a \"compressed\" version using poor mans huffman encoding, saves about 0.5kb\n        // tag.src = \"data:audio/mpeg;base64,//uQx\" + poorManHuffman(23, \"A\") + \"WGluZwAAAA8AAAACAAACcQCA\" + poorManHuffman(16, \"gICA\") + poorManHuffman(66, \"/\") + \"8AAABhTEFNRTMuMTAwA8MAAAAAAAAAABQgJAUHQQAB9AAAAnGMHkkI\" + poorManHuffman(320, \"A\") + \"//sQxAADgnABGiAAQBCqgCRMAAgEAH\" + poorManHuffman(15, \"/\") + \"7+n/9FTuQsQH//////2NG0jWUGlio5gLQTOtIoeR2WX////X4s9Atb/JRVCbBUpeRUq\" + poorManHuffman(18, \"/\") + \"9RUi0f2jn/+xDECgPCjAEQAABN4AAANIAAAAQVTEFNRTMuMTAw\" + poorManHuffman(97, \"V\") + \"Q==\";\n        tag.loop = true;\n        tag.load();\n        tag.play();\n    }\n\n    closeAudioContext() {\n        if (this.audioContext !== undefined) {\n            this.audioContext.close();\n            this.audioContext = undefined;\n        }\n    }\n\n    isUnlocked() {\n        return this.audioContext && this.audioContext.state === \"running\";\n    }\n\n    loadSample(url, key) {\n        console.log(`Loading audio file (${key})`);\n        let request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n        request.onload = () => {\n            // Load the data and keep a reference to it\n            // console.log(\"File loaded\");\n            this.sounds[key] = request.response;\n            this.decodeSample(key);\n        };\n        request.send();\n    }\n\n    decodeSample(key) {\n        // Decoding seems to work even when AudioContext is suspended\n        let ac = this.getAudioContext();\n        console.log(`Decoding audio file (${key})`);\n        // Promise-based syntax does not work for Safari desktop, need to use callback variant\n        // https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/decodeAudioData\n        ac.decodeAudioData(this.sounds[key], (buffer) => {\n            this.sounds[key] = buffer;\n        }, (e) => {\n            console.log(\"Error decoding audio data: \" + e);\n        });\n    }\n\n    getSounds() {\n        return this.sounds;\n    }\n\n    init() {\n        if (!this.hasAudioContext) return;\n        function startAudio() {\n            console.log(\"Starting audio via user interaction\");\n            document.removeEventListener(\"mousedown\", startAudio);\n            document.removeEventListener(\"touchend\", startAudio);\n            morseAudioContext.getAudioContext();\n        }\n        document.addEventListener(\"mousedown\", startAudio);\n        document.addEventListener(\"touchend\", startAudio);\n    }\n}\n\nconst morseAudioContext = new MorseAudioContext();\n\nexport default morseAudioContext;\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-audiocontext.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "class",
    "name": "MorseAudioContext",
    "memberof": "src/morse-pro-audiocontext.js",
    "static": true,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-audiocontext.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "pseudoExport": true,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 64,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "AudioContext",
    "memberof": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "static": false,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext#AudioContext",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "hasAudioContext",
    "memberof": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "static": false,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext#hasAudioContext",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "sounds",
    "memberof": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "static": false,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext#sounds",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "_unlocked",
    "memberof": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "static": false,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext#_unlocked",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "isIOS",
    "memberof": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "static": false,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext#isIOS",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "getAudioContext",
    "memberof": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext#getAudioContext",
    "access": "public",
    "description": "Get an AudioContext. The state of the AudioContext may be \"suspended\".\nIn Chrome (v83 Windows), Safari (v13.1 Mac Catalina), iOS (v11) you get a running context (and runUnlockedActions executes) upon user interaction.\nIn Edge (v44.18362.449.0 Windows) you get a running AudioContext straight away but the runUnlockedActions executes.\nIn Firefox (v75 Windows) you get a suspended AudioContext but it resumes (and runUnlockedActions executes) after a short while without interaction.",
    "lineNumber": 24,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "audioContext",
    "memberof": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "static": false,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext#audioContext",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "runUnlockedActions",
    "memberof": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext#runUnlockedActions",
    "access": "public",
    "description": "Called when we get a running AudioContext",
    "lineNumber": 47,
    "params": [
      {
        "name": "code",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "playHTMLaudio",
    "memberof": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext#playHTMLaudio",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "closeAudioContext",
    "memberof": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext#closeAudioContext",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "isUnlocked",
    "memberof": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext#isUnlocked",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "loadSample",
    "memberof": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext#loadSample",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "decodeSample",
    "memberof": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext#decodeSample",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "getSounds",
    "memberof": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext#getSounds",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "init",
    "memberof": "src/morse-pro-audiocontext.js~MorseAudioContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-audiocontext.js~MorseAudioContext#init",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "morseAudioContext",
    "memberof": "src/morse-pro-audiocontext.js",
    "static": true,
    "longname": "src/morse-pro-audiocontext.js~morseAudioContext",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-audiocontext.js",
    "importStyle": "morseAudioContext",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "type": {
      "types": [
        "src/morse-pro-audiocontext.js~MorseAudioContext"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/morse-pro-compat.js",
    "content": "/*!\nThis code is © Copyright Stephen C. Phillips, 2018.\nEmail: steve@scphillips.com\n*/\n/*\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\nYou may not use this work except in compliance with the Licence.\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the Licence for the specific language governing permissions and limitations under the Licence.\n*/\n\n/**\n * Basic methods to translate Morse code.\n */\n\nimport Morse from \"./morse-pro.js\";\n\n/**\n * Translate text to morse in '..- .. / --' form.\n * If something in the text is untranslatable then it is surrounded by hash-signs ('#') and a hash is placed in the morse.\n * @param {string} text - alphanumeric message\n * @param {boolean} useProsigns - true if prosigns are to be used (default is true)\n * @return {{message: string, morse: string, hasError: boolean}}\n * @deprecated\n */\nexport function text2morse(text, useProsigns = true) {\n    let ret = {\n        morse: \"\",\n        message: \"\",\n        hasError: false\n    };\n    if (text === \"\") {\n        return ret;\n    }\n\n    let morse = new Morse({dictionary: 'international', useProsigns});\n    let textTokens = morse.tokeniseText(text);\n    let tme = morse.textTokens2morse(textTokens);\n\n    for (let w = 0; w < tme.text.length; w++) {\n        for (let c = 0; c < tme.text[w].length; c++) {\n            let t = tme.text[w][c];\n            let m = tme.morse[w][c];\n            if (tme.error[w][c]) {\n                ret.message += \"#\" + t + \"#\";\n                ret.morse += \"# \";\n            } else {\n                ret.message += t;\n                ret.morse += m.replace(/ /g, '') + \" \";\n            }\n        }\n        ret.message += ' ';\n        ret.morse += '/ ';\n    }\n    ret.message = ret.message.slice(0, ret.message.length - 1);\n    ret.morse = ret.morse.slice(0, ret.morse.length - 3);\n    ret.hasError = tme.hasError;\n    return ret;\n}\n\n/**\n * Translate text to morse in 'Di-di-dah dah' form.\n * @param {string} text - alphanumeric message\n * @param {boolean} useProsigns - true if prosigns are to be used (default is true)\n * @return {string}\n * @deprecated\n */\nexport function text2ditdah(text, useProsigns) {\n    // TODO: deal with errors in the translation\n    var ditdah = text2morse(text, useProsigns).morse + ' '; // get the dots and dashes\n    ditdah = ditdah.replace(/\\./g, 'di~').replace(/\\-/g, 'dah~'); // do the basic job\n    ditdah = ditdah.replace(/~/g, '-'); // replace placeholder with dash\n    ditdah = ditdah.replace(/\\- /g, ' '); // remove trailing dashes\n    ditdah = ditdah.replace(/di /g, 'dit '); // use 'dit' at end of letter\n    ditdah = ditdah.replace(/ \\/ /g, ', '); // do punctuation\n    ditdah = ditdah.replace(/^d/, 'D'); // do capitalisation\n    ditdah = ditdah.replace(/ $/, ''); // remove the space we added\n    ditdah = ditdah.replace(/([th])$/, '$1.'); // add full-stop if there is anything there\n    return ditdah;\n}\n\n/**\n * Canonicalise morse text.\n * Canonical form matches [.-/ ]*, has single spaces between characters, has words separated by ' / ', and has no spaces at the start or end.\n * A single '/' may be returned by this function.\n * @param {string} morse - Morse code matching [.-_/| ]*\n * @return {string} Morse code in canonical form matching [.-/ ]*\n * @deprecated\n */\nexport function tidyMorse(morse) {\n    let morseInstance = new Morse();\n    return morseInstance.displayMorse(morseInstance.tokeniseMorse(morse));\n}\n\n/**\n * Translate morse to text. Canonicalise the morse first.\n * If something in the morse is untranslatable then it is surrounded by hash-signs ('#') and a hash is placed in the text.\n * @param {string} morse - morse message using [.-_/| ] characters\n * @param {boolean} useProsigns - true if prosigns are to be used (default is true)\n * @return {{message: string, morse: string, hasError: boolean}}\n * @deprecated\n */\nexport function morse2text(morse, useProsigns = true) {\n    let ret = {\n        morse: \"\",\n        message: \"\",\n        hasError: false\n    };\n    if (morse === \"\") {\n        return ret;\n    }\n\n    let morseInstance = new Morse({dictionary: 'international', useProsigns});\n    let morseTokens = morseInstance.tokeniseMorse(morse);\n    let tme = morseInstance.morseTokens2text(morseTokens);\n    // console.log(tme);\n\n    for (let w = 0; w < tme.morse.length; w++) {\n        for (let c = 0; c < tme.morse[w].length; c++) {\n            let t = tme.text[w][c];\n            let m = tme.morse[w][c].replace(/ /g, '');\n            if (tme.error[w][c]) {\n                ret.message += \"#\";\n                ret.morse += \"#\" + m + \"# \";\n            } else {\n                ret.message += t;\n                ret.morse += m + \" \";\n            }\n        }\n        ret.message += ' ';\n        ret.morse += '/ ';\n    }\n    ret.message = ret.message.slice(0, ret.message.length - 1);\n    ret.morse = ret.morse.slice(0, ret.morse.length - 2).trim();\n    ret.hasError = tme.hasError;\n    return ret;\n}\n\n/**\n * Determine whether a string is most likely morse code.\n * @param {string} input - the text\n * @return {boolean} - true if the string only has Morse characters in after executing tidyMorse\n * @deprecated\n */\nexport function looksLikeMorse(input) {\n    let morse = new Morse({dictionary: 'international'});\n    return morse.looksLikeMorse(input);\n}\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-compat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "text2morse",
    "memberof": "src/morse-pro-compat.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-compat.js~text2morse",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-compat.js",
    "importStyle": "{text2morse}",
    "description": "Translate text to morse in '..- .. / --' form.\nIf something in the text is untranslatable then it is surrounded by hash-signs ('#') and a hash is placed in the morse.",
    "lineNumber": 27,
    "deprecated": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "alphanumeric message"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "useProsigns",
        "description": "true if prosigns are to be used (default is true)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{message: string, morse: string, hasError: boolean}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "text2ditdah",
    "memberof": "src/morse-pro-compat.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-compat.js~text2ditdah",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-compat.js",
    "importStyle": "{text2ditdah}",
    "description": "Translate text to morse in 'Di-di-dah dah' form.",
    "lineNumber": 69,
    "deprecated": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "alphanumeric message"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "useProsigns",
        "description": "true if prosigns are to be used (default is true)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "tidyMorse",
    "memberof": "src/morse-pro-compat.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-compat.js~tidyMorse",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-compat.js",
    "importStyle": "{tidyMorse}",
    "description": "Canonicalise morse text.\nCanonical form matches [.-/ ]*, has single spaces between characters, has words separated by ' / ', and has no spaces at the start or end.\nA single '/' may be returned by this function.",
    "lineNumber": 91,
    "deprecated": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "morse",
        "description": "Morse code matching [.-_/| ]*"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Morse code in canonical form matching [.-/ ]*"
    }
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "morse2text",
    "memberof": "src/morse-pro-compat.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-compat.js~morse2text",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-compat.js",
    "importStyle": "{morse2text}",
    "description": "Translate morse to text. Canonicalise the morse first.\nIf something in the morse is untranslatable then it is surrounded by hash-signs ('#') and a hash is placed in the text.",
    "lineNumber": 104,
    "deprecated": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "morse",
        "description": "morse message using [.-_/| ] characters"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "useProsigns",
        "description": "true if prosigns are to be used (default is true)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{message: string, morse: string, hasError: boolean}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "looksLikeMorse",
    "memberof": "src/morse-pro-compat.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-compat.js~looksLikeMorse",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-compat.js",
    "importStyle": "{looksLikeMorse}",
    "description": "Determine whether a string is most likely morse code.",
    "lineNumber": 146,
    "deprecated": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "the text"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the string only has Morse characters in after executing tidyMorse"
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/morse-pro-cw-compat.js",
    "content": "/*!\nThis code is © Copyright Stephen C. Phillips, 2018.\nEmail: steve@scphillips.com\n*/\n/*\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\nYou may not use this work except in compliance with the Licence.\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the Licence for the specific language governing permissions and limitations under the Licence.\n*/\n\nimport * as WPM from './morse-pro-wpm';\nimport MorseMessage from './morse-pro-message';\n\n/**\n * Class to create the on/off timings needed by e.g. sound generators. Timings are in milliseconds; \"off\" timings are negative.\n *\n * @example\n * import MorseCW from 'morse-pro-cw';\n * var morseCW = new MorseCW();\n * morseCW.translate(\"abc\");\n * var timings = morseCW.getTimings();\n */\nexport default class MorseCW extends MorseMessage {\n    /**\n     * @param {boolean} [prosigns=true] - whether or not to include prosigns in the translations\n     * @param {number} [wpm=20] - the speed in words per minute using PARIS as the standard word\n     * @param {number} [fwpm=wpm] - the Farnsworth speed in words per minute (defaults to wpm)\n     * @deprecated\n     */\n    constructor(useProsigns = true, wpm = 20, fwpm = wpm) {\n        super(useProsigns);\n        /** @type {number} */\n        this.wpm = wpm;\n        /** @type {number} */\n        this.fwpm = fwpm;\n    }\n\n    /** \n     * Set the WPM speed. Ensures that Farnsworth WPM is no faster than WPM.\n     * @type {number} */\n    set wpm(wpm) {\n        this._wpm = wpm;\n        if (wpm < this._fwpm) {\n            this._fwpm = wpm;\n        }\n    }\n\n    /** @type {number} */\n    get wpm() {\n        return this._wpm;\n    }\n\n    /**\n     * Set the Farnsworth WPM speed. Ensures that WPM is no slower than Farnsworth WPM.\n     *  @type {number} */\n    set fwpm(fwpm) {\n        this._fwpm = fwpm;\n        if (fwpm > this._wpm) {\n            this._wpm = fwpm;\n        }\n    }\n\n    /** @type {number} */\n    get fwpm() {\n        return this._fwpm;\n    }\n\n    /** \n     * Get the length of the space between words in ms.\n     * @type {number} */\n    get wordSpace() {\n        return WPM.wordSpace(this._wpm, this._fwpm);\n    }\n\n    /**\n     * Return an array of millisecond timings.\n     * With the Farnsworth method, the morse characters are played at one\n     * speed and the spaces between characters at a slower speed.\n     * @return {number[]}\n     */\n    getTimings() {\n        return MorseCW.getTimingsGeneral(\n            WPM.ditLength(this._wpm),\n            WPM.dahLength(this._wpm),\n            WPM.ditSpace(this._wpm),\n            WPM.charSpace(this._wpm, this._fwpm),\n            WPM.wordSpace(this._wpm, this._fwpm),\n            this.morse\n        );\n    }\n\n    /**\n     * Return an array of millisecond timings.\n     * Each sound and space has a duration. The durations of the spaces are distinguished by being negative.\n     * @param {number} dit - the length of a dit in milliseconds\n     * @param {number} dah - the length of a dah in milliseconds (normally 3 * dit)\n     * @param {number} ditSpace - the length of an intra-character space in milliseconds (1 * dit)\n     * @param {number} charSpace - the length of an inter-character space in milliseconds (normally 3 * dit)\n     * @param {number} wordSpace - the length of an inter-word space in milliseconds (normally 7 * dit)\n     * @param {string} morse - the (canonical) morse code string (matching [.-/ ]*)\n     * @return {number[]}\n     */\n    static getTimingsGeneral(dit, dah, ditSpace, charSpace, wordSpace, morse) {\n        //console.log(\"Morse: \" + morse);\n        morse = morse.replace(/ \\/ /g, '/');  // this means that a space is only used for inter-character\n        morse = morse.replace(/([\\.\\-])(?=[\\.\\-])/g, \"$1+\");  // put a + in between all dits and dahs\n        var times = [];\n        for (var i = 0; i < morse.length; i++) {\n            switch (morse[i]) {\n                case '.':\n                    times.push(dit);\n                    break;\n                case '-':\n                    times.push(dah);\n                    break;\n                case '+':\n                    times.push(-ditSpace);\n                    break;\n                case \" \":\n                    times.push(-charSpace);\n                    break;\n                case \"/\":\n                    times.push(-wordSpace);\n                    break;\n            }\n        }\n        //console.log(\"Timings: \" + times);\n        return times;\n    }\n\n    /**\n     * Get the total duration of the message in ms\n     8 @return {number}\n     */\n    getDuration() {\n        var times = this.getTimings();\n        var t = 0;\n        for (var i = 0; i < times.length; i++) {\n            t += Math.abs(times[i]);\n        }\n        return t;\n    }\n}\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-cw-compat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "MorseCW",
    "memberof": "src/morse-pro-cw-compat.js",
    "static": true,
    "longname": "src/morse-pro-cw-compat.js~MorseCW",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-cw-compat.js",
    "importStyle": "MorseCW",
    "description": "Class to create the on/off timings needed by e.g. sound generators. Timings are in milliseconds; \"off\" timings are negative.",
    "examples": [
      "import MorseCW from 'morse-pro-cw';\nvar morseCW = new MorseCW();\nmorseCW.translate(\"abc\");\nvar timings = morseCW.getTimings();"
    ],
    "lineNumber": 25,
    "interface": false,
    "extends": [
      "src/morse-pro-message.js~MorseMessage"
    ]
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/morse-pro-cw-compat.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw-compat.js~MorseCW#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "deprecated": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "prosigns",
        "description": "whether or not to include prosigns in the translations"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "20",
        "defaultRaw": 20,
        "name": "wpm",
        "description": "the speed in words per minute using PARIS as the standard word"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "wpm",
        "defaultRaw": "wpm",
        "name": "fwpm",
        "description": "the Farnsworth speed in words per minute (defaults to wpm)"
      }
    ]
  },
  {
    "__docId__": 95,
    "kind": "set",
    "name": "wpm",
    "memberof": "src/morse-pro-cw-compat.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw-compat.js~MorseCW#wpm",
    "access": "public",
    "description": "Set the WPM speed. Ensures that Farnsworth WPM is no faster than WPM.",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "_wpm",
    "memberof": "src/morse-pro-cw-compat.js~MorseCW",
    "static": false,
    "longname": "src/morse-pro-cw-compat.js~MorseCW#_wpm",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "_fwpm",
    "memberof": "src/morse-pro-cw-compat.js~MorseCW",
    "static": false,
    "longname": "src/morse-pro-cw-compat.js~MorseCW#_fwpm",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "get",
    "name": "wpm",
    "memberof": "src/morse-pro-cw-compat.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw-compat.js~MorseCW#wpm",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "set",
    "name": "fwpm",
    "memberof": "src/morse-pro-cw-compat.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw-compat.js~MorseCW#fwpm",
    "access": "public",
    "description": "Set the Farnsworth WPM speed. Ensures that WPM is no slower than Farnsworth WPM.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "get",
    "name": "fwpm",
    "memberof": "src/morse-pro-cw-compat.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw-compat.js~MorseCW#fwpm",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "get",
    "name": "wordSpace",
    "memberof": "src/morse-pro-cw-compat.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw-compat.js~MorseCW#wordSpace",
    "access": "public",
    "description": "Get the length of the space between words in ms.",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "getTimings",
    "memberof": "src/morse-pro-cw-compat.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw-compat.js~MorseCW#getTimings",
    "access": "public",
    "description": "Return an array of millisecond timings.\nWith the Farnsworth method, the morse characters are played at one\nspeed and the spaces between characters at a slower speed.",
    "lineNumber": 83,
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "getTimingsGeneral",
    "memberof": "src/morse-pro-cw-compat.js~MorseCW",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-cw-compat.js~MorseCW.getTimingsGeneral",
    "access": "public",
    "description": "Return an array of millisecond timings.\nEach sound and space has a duration. The durations of the spaces are distinguished by being negative.",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dit",
        "description": "the length of a dit in milliseconds"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dah",
        "description": "the length of a dah in milliseconds (normally 3 * dit)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ditSpace",
        "description": "the length of an intra-character space in milliseconds (1 * dit)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "charSpace",
        "description": "the length of an inter-character space in milliseconds (normally 3 * dit)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "wordSpace",
        "description": "the length of an inter-word space in milliseconds (normally 7 * dit)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "morse",
        "description": "the (canonical) morse code string (matching [.-/ ]*)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "getDuration",
    "memberof": "src/morse-pro-cw-compat.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw-compat.js~MorseCW#getDuration",
    "access": "public",
    "description": "Get the total duration of the message in ms\n8 @return {number}",
    "lineNumber": 137,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/morse-pro-cw-wave.js",
    "content": "/*!\r\nThis code is © Copyright Stephen C. Phillips, 2018.\r\nEmail: steve@scphillips.com\r\n*/\r\n/*\r\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\r\nYou may not use this work except in compliance with the Licence.\r\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\r\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the Licence for the specific language governing permissions and limitations under the Licence.\r\n*/\r\n\r\nimport MorseCW from './morse-pro-cw';\r\n\r\n/**\r\n * Class to create sine-wave samples of standard CW Morse.\r\n *\r\n * @example\r\n * import MorseCWWave from 'morse-pro-cw-wave';\r\n * var morseCW = new MorseCW();\r\n * var tokens = morseCW.text2morse(\"abc\");\r\n * var timings = morseCW.morseTokens2timing(tokens);\r\n * var sample = morseCWWave.getSample(timings);\r\n */\r\nexport default class MorseCWWave extends MorseCW {\r\n    /**\r\n     * @param {Object} params - dictionary of optional parameters.\r\n     * @param {string} params.dictionary - which dictionary to use, e.g. 'international' or 'american'.\r\n     * @param {string[]} params.dictionaryOptions - optional additional dictionaries such as 'prosigns'.\r\n     * @param {number} params.wpm - speed in words per minute using \"PARIS \" as the standard word.\r\n     * @param {number} params.fwpm - farnsworth speed.\r\n     * @param {number} [params.frequency=550] - frequency of wave in Hz\r\n     * @param {number} [params.sampleRate=8000] - sample rate for the waveform in Hz\r\n     */\r\n    constructor({dictionary, dictionaryOptions, wpm, fwpm, frequency=550, sampleRate=8000} = {}) {\r\n        super({dictionary, dictionaryOptions, wpm, fwpm});\r\n        // TODO: make this.frequency a fallback and replace with arrays of freq and volume to go with timings array when making a sample\r\n        /** @type {number} */\r\n        this.frequency = frequency;  // frequency of wave in Hz\r\n        /** @type {number} */\r\n        this.sampleRate = sampleRate;  // sample rate for the waveform in Hz\r\n    }\r\n\r\n    /**\r\n     * Get a sample waveform, not using Web Audio API (synchronous).\r\n     * @param {number[]} timings - millisecond timings, +ve numbers representing sound, -ve for no sound (+ve/-ve can be in any order)\r\n    // TODO * @param {number[]} frequencies - frequencies of elements in Hz.\r\n    // TODO * @param {number[]} volumes - volumes of elements in Hz.\r\n    // TODO: remove endpadding?\r\n     * @param {number} [endPadding=0] - how much silence in ms to add to the end of the waveform.\r\n     * @return {number[]} an array of floats in range [-1, 1] representing the wave-form.\r\n     */\r\n    getSample(timings, endPadding = 0) {\r\n        var sample = [];\r\n        if (timings.length === 0) {\r\n            return [];\r\n        }\r\n        // add minimum of 5ms silence to the end to ensure the filtered signal can finish cleanly\r\n        if (timings[timings.length - 1] > 0) {\r\n            timings.push(-Math.max(5, endPadding));\r\n        } else {\r\n            timings[timings.length - 1] = -Math.max(5, endPadding, -timings[timings.length - 1]);\r\n        }\r\n\r\n        /*\r\n            Compute lowpass biquad filter coefficients using method from Chromium\r\n        */\r\n\r\n        // set lowpass frequency cutoff to 1.5 x wave frequency\r\n        var lowpassFreq = (this.frequency * 1.5) / this.sampleRate;\r\n        var q = Math.SQRT1_2;\r\n      \r\n        var sin = Math.sin(2 * Math.PI * lowpassFreq);\r\n        var cos = Math.cos(2 * Math.PI * lowpassFreq);\r\n        var alpha = sin / (2 * Math.pow(10, q / 20));\r\n      \r\n        var a0 =  1 + alpha;\r\n\r\n        var b0 = ((1 - cos) * 0.5) / a0;\r\n        var b1 = (1 - cos) / a0;\r\n        var b2 = ((1 - cos) * 0.5) / a0;\r\n        var a1 = (-2 * cos) / a0;\r\n        var a2 = (1 - alpha) / a0;\r\n\r\n        /*\r\n            Compute filtered signal\r\n        */\r\n\r\n        var step = Math.PI * 2 * this.frequency / this.sampleRate;\r\n        var on, duration;\r\n        var x0, x1 = 0, x2 = 0;\r\n        var y0, y1 = 0, y2 = 0;\r\n        var gain = 0.813;  // empirically, the lowpass filter outputs waveform of magnitude 1.23, so need to scale it down to avoid clipping\r\n        for (var t = 0; t < timings.length; t += 1) {\r\n            duration = this.sampleRate * Math.abs(timings[t]) / 1000;\r\n            on = timings[t] > 0 ? 1 : 0;\r\n            for (var i = 0; i < duration; i += 1) {\r\n                x0 = on * Math.sin(i * step);  // the input signal\r\n                y0 = b0 * x0 + b1 * x1 + b2 * x2 - a1 * y1 - a2 * y2;\r\n                sample.push(y0 * gain);\r\n                x2 = x1;\r\n                x1 = x0;\r\n                y2 = y1;\r\n                y1 = y0;\r\n            }\r\n        }\r\n        return sample;\r\n    }\r\n\r\n    /**\r\n     * Get a sample waveform using Web Audio API (asynchronous).\r\n     * @param {number[]} timings - millisecond timings, +ve numbers representing sound, -ve for no sound (+ve/-ve can be in any order)\r\n    // TODO * @param {number[]} frequencies - frequencies of elements in Hz.\r\n    // TODO * @param {number[]} volumes - volumes of elements in Hz.\r\n    // TODO: remove endpadding?\r\n     * @param {number} [endPadding=0] - how much silence in ms to add to the end of the waveform.\r\n     * @return {Promise(number[])} a Promise resolving to an array of floats in range [-1, 1] representing the wave-form.\r\n     */\r\n    getWAASample(timings, endPadding = 0) {\r\n        // add minimum of 5ms silence to the end to ensure the filtered signal can finish cleanly\r\n        if (timings[timings.length - 1] > 0) {\r\n            timings.push(-Math.max(5, endPadding));\r\n        } else {\r\n            timings[timings.length - 1] = -Math.max(5, endPadding, -timings[timings.length - 1]);\r\n        }\r\n        var offlineAudioContextClass = window.OfflineAudioContext || window.webkitOfflineAudioContext;\r\n        if (offlineAudioContextClass === undefined) {\r\n            throw new Error(\"No OfflineAudioContext class defined\");\r\n        }\r\n        // buffer length is the Morse duration + 5ms to let the lowpass filter end cleanly\r\n        var offlineCtx = new offlineAudioContextClass(1, this.sampleRate * (this.getDuration() + endPadding) / 1000, this.sampleRate);\r\n        var gainNode = offlineCtx.createGain();\r\n        // empirically, the lowpass filter outputs waveform of magnitude 1.23, so need to scale it down to avoid clipping\r\n        gainNode.gain.setValueAtTime(0.813, 0);\r\n        var lowPassNode = offlineCtx.createBiquadFilter();\r\n        lowPassNode.type = \"lowpass\";\r\n        lowPassNode.frequency.setValueAtTime(this.frequency * 1.1, 0);  // TODO: remove this magic number and make the filter configurable?\r\n        gainNode.connect(lowPassNode);\r\n        lowPassNode.connect(offlineCtx.destination);\r\n        var t = 0;\r\n        var oscillator;\r\n        var duration;\r\n        for (var i = 0; i < timings.length; i++) {\r\n            duration = Math.abs(timings[i]) / 1000;\r\n            if (timings[i] > 0) {  // -ve timings are silence\r\n                oscillator = offlineCtx.createOscillator();\r\n                oscillator.type = 'sine';\r\n                oscillator.frequency.setValueAtTime(this.frequency, t);\r\n                oscillator.start(t);\r\n                oscillator.stop(t + duration);\r\n                oscillator.connect(gainNode);\r\n            }\r\n            t += duration;\r\n        }\r\n        return offlineCtx.startRendering().then(function(renderedBuffer) {\r\n            return renderedBuffer.getChannelData(0);\r\n        });\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-cw-wave.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "class",
    "name": "MorseCWWave",
    "memberof": "src/morse-pro-cw-wave.js",
    "static": true,
    "longname": "src/morse-pro-cw-wave.js~MorseCWWave",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-cw-wave.js",
    "importStyle": "MorseCWWave",
    "description": "Class to create sine-wave samples of standard CW Morse.",
    "examples": [
      "import MorseCWWave from 'morse-pro-cw-wave';\nvar morseCW = new MorseCW();\nvar tokens = morseCW.text2morse(\"abc\");\nvar timings = morseCW.morseTokens2timing(tokens);\nvar sample = morseCWWave.getSample(timings);"
    ],
    "lineNumber": 25,
    "interface": false,
    "extends": [
      "src/morse-pro-cw.js~MorseCW"
    ]
  },
  {
    "__docId__": 109,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/morse-pro-cw-wave.js~MorseCWWave",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw-wave.js~MorseCWWave#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "dictionary of optional parameters."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.dictionary",
        "description": "which dictionary to use, e.g. 'international' or 'american'."
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "params.dictionaryOptions",
        "description": "optional additional dictionaries such as 'prosigns'."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.wpm",
        "description": "speed in words per minute using \"PARIS \" as the standard word."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.fwpm",
        "description": "farnsworth speed."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "550",
        "defaultRaw": 550,
        "name": "params.frequency",
        "description": "frequency of wave in Hz"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "8000",
        "defaultRaw": 8000,
        "name": "params.sampleRate",
        "description": "sample rate for the waveform in Hz"
      }
    ]
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "frequency",
    "memberof": "src/morse-pro-cw-wave.js~MorseCWWave",
    "static": false,
    "longname": "src/morse-pro-cw-wave.js~MorseCWWave#frequency",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "sampleRate",
    "memberof": "src/morse-pro-cw-wave.js~MorseCWWave",
    "static": false,
    "longname": "src/morse-pro-cw-wave.js~MorseCWWave#sampleRate",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "getSample",
    "memberof": "src/morse-pro-cw-wave.js~MorseCWWave",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw-wave.js~MorseCWWave#getSample",
    "access": "public",
    "description": "Get a sample waveform, not using Web Audio API (synchronous).",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "timings",
        "description": "millisecond timings, +ve numbers representing sound, -ve for no sound (+ve/-ve can be in any order)\n// TODO * @param {number[]} frequencies - frequencies of elements in Hz.\n// TODO * @param {number[]} volumes - volumes of elements in Hz.\n// TODO: remove endpadding?"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "endPadding",
        "description": "how much silence in ms to add to the end of the waveform."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": "an array of floats in range [-1, 1] representing the wave-form."
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "getWAASample",
    "memberof": "src/morse-pro-cw-wave.js~MorseCWWave",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw-wave.js~MorseCWWave#getWAASample",
    "access": "public",
    "description": "Get a sample waveform using Web Audio API (asynchronous).",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "timings",
        "description": "millisecond timings, +ve numbers representing sound, -ve for no sound (+ve/-ve can be in any order)\n// TODO * @param {number[]} frequencies - frequencies of elements in Hz.\n// TODO * @param {number[]} volumes - volumes of elements in Hz.\n// TODO: remove endpadding?"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "endPadding",
        "description": "how much silence in ms to add to the end of the waveform."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise(number[])"
      ],
      "spread": false,
      "description": "a Promise resolving to an array of floats in range [-1, 1] representing the wave-form."
    }
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/morse-pro-cw.js",
    "content": "/*!\r\nThis code is © Copyright Stephen C. Phillips, 2018.\r\nEmail: steve@scphillips.com\r\n*/\r\n/*\r\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\r\nYou may not use this work except in compliance with the Licence.\r\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\r\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the Licence for the specific language governing permissions and limitations under the Licence.\r\n*/\r\n\r\nimport Morse from './morse-pro';\r\n\r\nconst MS_IN_MINUTE = 60000;  /** number of milliseconds in 1 minute */\r\n\r\n/**\r\n * Class to create the on/off timings needed by e.g. sound generators. Timings are in milliseconds; \"off\" timings are negative.\r\n *\r\n * @example\r\n * import MorseCW from 'morse-pro-cw';\r\n * var morseCW = new MorseCW();\r\n * var tokens = morseCW.text2morse(\"abc\");\r\n * var timings = morseCW.morseTokens2timing(tokens);\r\n */\r\nexport default class MorseCW extends Morse {\r\n    /**\r\n     * @param {Object} params - dictionary of optional parameters.\r\n     * @param {string} [params.dictionary='international'] - which dictionary to use, e.g. 'international' or 'american'.\r\n     * @param {string[]} [params.dictionaryOptions=[]] - optional additional dictionaries such as 'prosigns'.\r\n     * @param {number} [params.wpm=20] - speed in words per minute using \"PARIS \" as the standard word.\r\n     * @param {number} [params.fwpm=wpm] - farnsworth speed.\r\n     */\r\n    constructor({dictionary, dictionaryOptions, wpm=20, fwpm=wpm} = {}) {\r\n        super({dictionary, dictionaryOptions});\r\n        /** The element of the dictionary that the ratios are based off */\r\n        this._baseElement = this.dictionary.baseElement;\r\n        /** In initialise the ratios based on the dictionary but enable them to be changed thereafter */\r\n        this.ratios = this.dictionary.ratio;  // actually does a copy from the dict so we can reset if needed\r\n        /** Compute ditsInParis and spacesInParis while we have original ratio */\r\n        let parisMorseTokens = this.textTokens2morse(this.tokeniseRawText('PARIS')).morse;\r\n        this._ditsInParis = this.getDuration(this.morseTokens2timing(parisMorseTokens, this.ratios)) + Math.abs(this.ratios.wordSpace);\r\n        this._spacesInParis = Math.abs((4 * this.ratios.charSpace) + this.ratios.wordSpace);\r\n        /** Initialise wpm and fwpm (this potentially changes the ratios) */\r\n        this.setWPM(wpm);\r\n        this.setFWPM(fwpm);\r\n    }\r\n\r\n    /** \r\n     * Set the WPM speed. Ensures that Farnsworth WPM is no faster than WPM.\r\n     * @param {number} wpm\r\n     */\r\n    setWPM(wpm) {\r\n        this._baseLength = undefined;\r\n        this._ratios = undefined;\r\n        this._lengths = undefined;\r\n\r\n        wpm = Math.max(1, wpm || 1);\r\n        this._wpm = wpm;\r\n        this._fwpm = Math.min(this._wpm, this._fwpm);\r\n\r\n        let tmp = this.ratios;\r\n        tmp = this.baseLength;\r\n        return wpm;\r\n    }\r\n\r\n    /** @type {number} */\r\n    get wpm() {\r\n        return this._wpm;\r\n    }\r\n\r\n    testWPMmatchesRatio() {\r\n        return this.ratios['-'] == this.dictionary.ratio['-'] && this.ratios[' '] == this.dictionary.ratio[' '];\r\n    }\r\n\r\n    /**\r\n     * Set the Farnsworth WPM speed. Ensures that WPM is no slower than Farnsworth WPM.\r\n     * @param {number} fwpm\r\n     */\r\n    setFWPM(fwpm) {\r\n        fwpm = Math.max(1, fwpm || 1);\r\n        this._fwpm = fwpm;\r\n        this.setWPM(Math.max(this._wpm, this._fwpm))\r\n        \r\n        return fwpm;\r\n    }\r\n\r\n    /** @type {number} */\r\n    get fwpm() {\r\n        return this._fwpm;\r\n    }\r\n\r\n    testFWPMmatchesRatio() {\r\n        // need to test approximately here otherwise with the rounding errors introduced in the web page input it would never return true\r\n        return Math.abs((this.ratios['wordSpace'] / this.dictionary.ratio['wordSpace']) / (this.ratios['charSpace'] / this.dictionary.ratio['charSpace']) - 1) < 0.001;\r\n    }\r\n\r\n    /** @type {number[]} */\r\n    get ratios() {\r\n        if (this._ratios === undefined) {\r\n            this._ratios = {};\r\n            Object.assign(this._ratios, this.dictionary.ratio);\r\n            let farnsworthRatio = this.farnsworthRatio;\r\n            this._ratios['charSpace'] *= farnsworthRatio;\r\n            this._ratios['wordSpace'] *= farnsworthRatio;\r\n        }\r\n        return this._ratios;\r\n    }\r\n\r\n    /**\r\n     * Set the ratio of each element and normalise to the base element/\r\n     * For the space elements, the ratio is negative.\r\n     * @param {Map} r - a Map from element to ratio (as defined in the 'ratio' element of a dictionary)\r\n     */\r\n    set ratios(r) {\r\n        this._wpm = undefined;\r\n        this._fwpm = undefined;\r\n        this._lengths = undefined;\r\n\r\n        this._ratios = {};\r\n        Object.assign(this._ratios, r);\r\n        for (let element in this._ratios) {\r\n            this._ratios[element] /= this._ratios[this._baseElement];\r\n        }\r\n    }\r\n\r\n    setRatio(element, ratio) {\r\n        let tmp = this.ratios;\r\n        this._ratios[element] = ratio;\r\n        this._lengths = undefined;\r\n\r\n        if (this.testWPMmatchesRatio()) {\r\n            this._setWPMfromBaseLength();\r\n            if (this.testFWPMmatchesRatio()) {\r\n                this._setFWPMfromRatio();\r\n            } else {\r\n                this._fwpm = undefined;\r\n            }    \r\n        } else {\r\n            this._wpm = undefined;\r\n            this._fwpm = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return an array of millisecond timings.\r\n     * With the Farnsworth method, the morse characters are played at one\r\n     * speed and the spaces between characters at a slower speed.\r\n     * @param {Array} morseTokens - array of morse tokens corresponding to the ratio element of the dictionary used, e.g. [['..', '.-'], ['--', '...']]\r\n     * @param {Object} [lengths=this.lengths] - dictionary mapping element to duration with negative duration for spaces\r\n     * @return {number[]}\r\n     */\r\n    morseTokens2timing(morseTokens, lengths=this.lengths) {\r\n        let timings = [];\r\n        for (let word of morseTokens) {\r\n            for (let char of word) {\r\n                timings = timings.concat(char.split('').map(symbol => lengths[symbol]));\r\n                timings = timings.concat(lengths.charSpace);\r\n            }\r\n            timings.pop()\r\n            timings = timings.concat(lengths.wordSpace);\r\n        }\r\n        timings.pop();\r\n        return timings;\r\n    }\r\n\r\n    /**\r\n     * Add up all the millisecond timings in a list\r\n     * @param {Array} timings - list of millisecond timings (-ve for spaces)\r\n     */\r\n    getDuration(timings) {\r\n        return timings.reduce(\r\n            (accumulator, currentValue) => accumulator + Math.abs(currentValue),\r\n            0\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get the Farnsworth dit length to dit length ratio\r\n     * @return {number}\r\n     */\r\n    get farnsworthRatio() {\r\n        // Compute fditlen / ditlen\r\n        // This should be >1 and it is what you need to multiply the standard charSpace and wordSpace ratios by to get the adjusted farnsworth ratios\r\n        // \"PARIS \" is 31 units for the characters and 19 units for the inter-character spaces and inter-word space\r\n        // One unit takes 1 * 60 / (50 * wpm)\r\n        // The 31 units should take 31 * 60 / (50 * wpm) seconds at wpm\r\n        // \"PARIS \" should take 50 * 60 / (50 * fwpm) to transmit at fwpm, or 60 / fwpm  seconds at fwpm\r\n        // Keeping the time for the characters constant,\r\n        // The spaces need to take: (60 / fwpm) - [31 * 60 / (50 * wpm)] seconds in total\r\n        // The spaces are 4 inter-character spaces of 3 units and 1 inter-word space of 7 units. Their ratio must be maintained.\r\n        // A space unit is: [(60 / fwpm) - [31 * 60 / (50 * wpm)]] / 19 seconds\r\n        // Comparing that to 60 / (50 * wpm) gives a ratio of (50.wpm - 31.fwpm) / 19.fwpm\r\n        return (this._ditsInParis * this._wpm - (this._ditsInParis - this._spacesInParis) * this._fwpm) / (this._spacesInParis * this._fwpm);\r\n    }\r\n\r\n    /**\r\n     * Force the WPM to match the base length without changing anything else\r\n     */\r\n    _setWPMfromBaseLength() {\r\n        this._wpm = (MS_IN_MINUTE / this._ditsInParis) / this._baseLength;\r\n    }\r\n\r\n    /**\r\n     * Set the WPM given dit length in ms\r\n     * @param {number} ditLen\r\n     */\r\n    setWPMfromDitLen(ditLen) {\r\n        this.setWPM((MS_IN_MINUTE / this._ditsInParis) / ditLen);\r\n    }\r\n\r\n    /** \r\n     * Force the FWPM to match the fditlen/ditlen ratio without changing anything else\r\n     */\r\n    _setFWPMfromRatio() {\r\n        let ratio = Math.abs((this.lengths['charSpace'] / 3) / this.lengths['.']);\r\n        this._fwpm = this._ditsInParis * this._wpm / (this._spacesInParis * ratio + (this._ditsInParis - this._spacesInParis));\r\n    }\r\n\r\n    /** \r\n     * Set the Farnsworth WPM given ratio of fditlength / ditlength\r\n     * @param {number} ratio\r\n     */\r\n     setFWPMfromRatio(ratio) {\r\n        ratio = Math.max(Math.abs(ratio), 1);  // take abs just in case someone passes in something -ve\r\n        this.setFWPM(this._ditsInParis * this._wpm / (this._spacesInParis * ratio + (this._ditsInParis - this._spacesInParis)));\r\n    }\r\n\r\n    /**\r\n     * Get the length of the base element (i.e. a dit) in milliseconds\r\n     * @return {number}\r\n     */\r\n    get baseLength() {\r\n        this._baseLength = this._baseLength || (MS_IN_MINUTE / this._ditsInParis) / this._wpm;\r\n        return this._baseLength;\r\n    }\r\n\r\n    /**\r\n     * Calculate and return the millisecond duration of each element, using negative durations for spaces.\r\n     * @returns Map\r\n     */\r\n    get lengths() {\r\n        if (this._lengths === undefined) {\r\n            this._lengths = {};\r\n            this._maxLength = 0;\r\n            Object.assign(this._lengths, this.ratios);\r\n            for (let element in this._lengths) {\r\n                this._lengths[element] *= this._baseLength;\r\n                this._maxLength = Math.max(this._maxLength, this._lengths[element]);\r\n            }\r\n        }\r\n        return this._lengths;  // this is just a cache for speed, the ratios define the lengths\r\n    }\r\n\r\n    /**\r\n     * Return the length of the longest beep in milliseconds.\r\n     * @returns {number}\r\n     */\r\n    get maxLength() {\r\n        if (this._lengths === undefined) {\r\n            let tmp = this.lengths;\r\n        }\r\n        return this._maxLength;\r\n    }\r\n\r\n    setLength(element, length) {\r\n        if (element == this._baseElement) {\r\n            this._lengths = undefined;\r\n            this._wpm = undefined;\r\n            this._fwpm = undefined;\r\n\r\n            this._baseLength = length;\r\n        }\r\n        this.setRatio(element, length / this._baseLength);\r\n    }\r\n\r\n    /** \r\n     * Get the absolute duration of the space between words in ms.\r\n     * @type {number}\r\n     */\r\n    get wordSpace() {\r\n        return Math.abs(this.lengths.wordSpace);\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-cw.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "MS_IN_MINUTE",
    "memberof": "src/morse-pro-cw.js",
    "static": true,
    "longname": "src/morse-pro-cw.js~MS_IN_MINUTE",
    "access": "public",
    "export": false,
    "importPath": "morse-pro/src/morse-pro-cw.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "class",
    "name": "MorseCW",
    "memberof": "src/morse-pro-cw.js",
    "static": true,
    "longname": "src/morse-pro-cw.js~MorseCW",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-cw.js",
    "importStyle": "MorseCW",
    "description": "Class to create the on/off timings needed by e.g. sound generators. Timings are in milliseconds; \"off\" timings are negative.",
    "examples": [
      "import MorseCW from 'morse-pro-cw';\nvar morseCW = new MorseCW();\nvar tokens = morseCW.text2morse(\"abc\");\nvar timings = morseCW.morseTokens2timing(tokens);"
    ],
    "lineNumber": 26,
    "interface": false,
    "extends": [
      "src/morse-pro.js~Morse"
    ]
  },
  {
    "__docId__": 117,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "dictionary of optional parameters."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'international'",
        "defaultRaw": "'international'",
        "name": "params.dictionary",
        "description": "which dictionary to use, e.g. 'international' or 'american'."
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "params.dictionaryOptions",
        "description": "optional additional dictionaries such as 'prosigns'."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "20",
        "defaultRaw": 20,
        "name": "params.wpm",
        "description": "speed in words per minute using \"PARIS \" as the standard word."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "wpm",
        "defaultRaw": "wpm",
        "name": "params.fwpm",
        "description": "farnsworth speed."
      }
    ]
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "_baseElement",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#_baseElement",
    "access": "private",
    "description": "The element of the dictionary that the ratios are based off",
    "lineNumber": 37,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "_ditsInParis",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#_ditsInParis",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "_spacesInParis",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#_spacesInParis",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "setWPM",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#setWPM",
    "access": "public",
    "description": "Set the WPM speed. Ensures that Farnsworth WPM is no faster than WPM.",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "wpm",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "_baseLength",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#_baseLength",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "_ratios",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#_ratios",
    "access": "private",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "_lengths",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#_lengths",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "_wpm",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#_wpm",
    "access": "private",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "_fwpm",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#_fwpm",
    "access": "private",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "get",
    "name": "wpm",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#wpm",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "testWPMmatchesRatio",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#testWPMmatchesRatio",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "setFWPM",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#setFWPM",
    "access": "public",
    "description": "Set the Farnsworth WPM speed. Ensures that WPM is no slower than Farnsworth WPM.",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fwpm",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "get",
    "name": "fwpm",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#fwpm",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "testFWPMmatchesRatio",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#testFWPMmatchesRatio",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "get",
    "name": "ratios",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#ratios",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "type": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "set",
    "name": "ratios",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#ratios",
    "access": "public",
    "description": "Set the ratio of each element and normalise to the base element/\nFor the space elements, the ratio is negative.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "a Map from element to ratio (as defined in the 'ratio' element of a dictionary)"
      }
    ]
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "setRatio",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#setRatio",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      },
      {
        "name": "ratio",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "morseTokens2timing",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#morseTokens2timing",
    "access": "public",
    "description": "Return an array of millisecond timings.\nWith the Farnsworth method, the morse characters are played at one\nspeed and the spaces between characters at a slower speed.",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "morseTokens",
        "description": "array of morse tokens corresponding to the ratio element of the dictionary used, e.g. [['..', '.-'], ['--', '...']]"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this.lengths",
        "defaultRaw": "this.lengths",
        "name": "lengths",
        "description": "dictionary mapping element to duration with negative duration for spaces"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "getDuration",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#getDuration",
    "access": "public",
    "description": "Add up all the millisecond timings in a list",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "timings",
        "description": "list of millisecond timings (-ve for spaces)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "get",
    "name": "farnsworthRatio",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#farnsworthRatio",
    "access": "public",
    "description": "Get the Farnsworth dit length to dit length ratio",
    "lineNumber": 182,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "_setWPMfromBaseLength",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#_setWPMfromBaseLength",
    "access": "private",
    "description": "Force the WPM to match the base length without changing anything else",
    "lineNumber": 200,
    "params": [],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "setWPMfromDitLen",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#setWPMfromDitLen",
    "access": "public",
    "description": "Set the WPM given dit length in ms",
    "lineNumber": 208,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ditLen",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "_setFWPMfromRatio",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#_setFWPMfromRatio",
    "access": "private",
    "description": "Force the FWPM to match the fditlen/ditlen ratio without changing anything else",
    "lineNumber": 215,
    "params": [],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "setFWPMfromRatio",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#setFWPMfromRatio",
    "access": "public",
    "description": "Set the Farnsworth WPM given ratio of fditlength / ditlength",
    "lineNumber": 224,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ratio",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 155,
    "kind": "get",
    "name": "baseLength",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#baseLength",
    "access": "public",
    "description": "Get the length of the base element (i.e. a dit) in milliseconds",
    "lineNumber": 233,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "get",
    "name": "lengths",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#lengths",
    "access": "public",
    "description": "Calculate and return the millisecond duration of each element, using negative durations for spaces.",
    "lineNumber": 242,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Map"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Map"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "_maxLength",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#_maxLength",
    "access": "private",
    "description": null,
    "lineNumber": 245,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "get",
    "name": "maxLength",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#maxLength",
    "access": "public",
    "description": "Return the length of the longest beep in milliseconds.",
    "lineNumber": 259,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "setLength",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#setLength",
    "access": "public",
    "description": null,
    "lineNumber": 266,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      },
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 167,
    "kind": "get",
    "name": "wordSpace",
    "memberof": "src/morse-pro-cw.js~MorseCW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-cw.js~MorseCW#wordSpace",
    "access": "public",
    "description": "Get the absolute duration of the space between words in ms.",
    "lineNumber": 281,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 168,
    "kind": "file",
    "name": "src/morse-pro-decoder-adaptive.js",
    "content": "/*!\r\nThis code is © Copyright Stephen C. Phillips, 2019.\r\nEmail: steve@scphillips.com\r\n*/\r\n/*\r\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\r\nYou may not use this work except in compliance with the Licence.\r\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\r\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the Licence for the specific language governing permissions and limitations under the Licence.\r\n*/\r\n\r\nimport MorseDecoder from './morse-pro-decoder';\r\n\r\n/**\r\n * Class to convert from timings to Morse code. Uses \"international\" dictionary. Adapts to changing speed.\r\n *\r\n * @example\r\n * var messageCallback = function(data) {\r\n *     console.log(data);\r\n * };\r\n * var speedCallback = function(s) {\r\n *     console.log('Speed is now: ' + s.wpm + ' WPM');\r\n * };\r\n * var decoder = new MorseAdaptiveDecoder({messageCallback, speedCallback});\r\n * var t;\r\n * while (decoder_is_operating) {\r\n *     // get some ms timing \"t\" from a sensor, make it +ve for noise and -ve for silence\r\n *     decoder.addTiming(t);\r\n * }\r\n * decoder.flush();  // make sure all the data is pushed through the decoder\r\n */\r\nexport default class MorseAdaptiveDecoder extends MorseDecoder {\r\n    /**\r\n     * \r\n     * @param {Object} params - dictionary of optional parameters.\r\n     * @param {string} [params.dictionary='international'] - optional dictionary to use. Must have same timing as 'international'.\r\n     * @param {string[]} params.dictionaryOptions - optional additional dictionaries such as 'prosigns'.\r\n     * @param {number} params.wpm - speed in words per minute using \"PARIS \" as the standard word.\r\n     * @param {number} params.fwpm - farnsworth speed.\r\n     * @param {function()} params.messageCallback - Callback executed with {message: string, timings: number[], morse: string} when decoder buffer is flushed (every character).\r\n     * @param {function()} params.speedCallback - Callback executed with {wpm: number, fwpm: number} if the wpm or fwpm speed changes. The speed in this class doesn't change by itself, but e.g. the fwpm can change if wpm is changed. Returned dictionary has keys 'fwpm' and 'wpm'.\r\n     * @param {number} [bufferSize=30] - Size of the buffer to average over\r\n     */\r\n    constructor({dictionary='international', dictionaryOptions, wpm, fwpm, messageCallback, speedCallback, bufferSize=30} = {}) {\r\n        super({dictionary, dictionaryOptions, wpm, fwpm, messageCallback, speedCallback});\r\n        this.bufferSize = bufferSize;\r\n        this.ditLengths = [];\r\n        this.fditLengths = [];\r\n        // fill the buffers with undefined so as to weight the first reading the same as later ones\r\n        this.ditLengths[bufferSize] = undefined;\r\n        this.fditLengths[bufferSize] = undefined;\r\n        this.lockSpeed = false;\r\n    }\r\n\r\n    /**\r\n     * @access private\r\n     */\r\n    _addDecode(duration, character) {\r\n        super._addDecode(duration, character);\r\n\r\n        // adapt!\r\n        var dit;\r\n        var fdit;\r\n\r\n        switch (character) {\r\n            case '.':\r\n                dit = duration;\r\n                break;\r\n            case '-':\r\n                dit = duration / 3;\r\n                break;\r\n            case '':\r\n                dit = duration;\r\n                break;\r\n            case ' ':\r\n                fdit = duration / 3;\r\n                break;\r\n            // enable this if the decoder can be made to ignore extra long pauses\r\n            // case '/':\r\n            //     fdit = duration / 7;\r\n            //     break;\r\n        }\r\n        this.ditLengths.push(dit);  // put new ones on the end\r\n        this.fditLengths.push(fdit);\r\n        this.ditLengths = this.ditLengths.slice(-this.bufferSize);\r\n        this.fditLengths = this.fditLengths.slice(-this.bufferSize);\r\n\r\n        if (this.lockSpeed) { return; }\r\n\r\n        var sum = 0;\r\n        var denom = 0;\r\n        var fSum = 0;\r\n        var fDenom = 0;\r\n        var weight;\r\n\r\n        for (var i = 0; i < this.bufferSize; i++) {\r\n            weight = i + 1;  // linear weighting\r\n            if (this.ditLengths[i] !== undefined) {\r\n                sum += this.ditLengths[i] * weight;\r\n                denom += weight;\r\n            }\r\n            if (this.fditLengths[i] !== undefined) {\r\n                fSum += this.fditLengths[i] * weight;\r\n                fDenom += weight;\r\n            }\r\n        }\r\n\r\n        if (fDenom) {\r\n            this.fditLen = fSum / fDenom;\r\n        }\r\n        if (denom) {\r\n            this.ditLen = sum / denom;\r\n        }\r\n\r\n        this.speedCallback({wpm: this.wpm, fwpm: this.fwpm});\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-decoder-adaptive.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 169,
    "kind": "class",
    "name": "MorseAdaptiveDecoder",
    "memberof": "src/morse-pro-decoder-adaptive.js",
    "static": true,
    "longname": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-decoder-adaptive.js",
    "importStyle": "MorseAdaptiveDecoder",
    "description": "Class to convert from timings to Morse code. Uses \"international\" dictionary. Adapts to changing speed.",
    "examples": [
      "var messageCallback = function(data) {\n    console.log(data);\n};\nvar speedCallback = function(s) {\n    console.log('Speed is now: ' + s.wpm + ' WPM');\n};\nvar decoder = new MorseAdaptiveDecoder({messageCallback, speedCallback});\nvar t;\nwhile (decoder_is_operating) {\n    // get some ms timing \"t\" from a sensor, make it +ve for noise and -ve for silence\n    decoder.addTiming(t);\n}\ndecoder.flush();  // make sure all the data is pushed through the decoder"
    ],
    "lineNumber": 33,
    "interface": false,
    "extends": [
      "src/morse-pro-decoder.js~MorseDecoder"
    ]
  },
  {
    "__docId__": 170,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "dictionary of optional parameters."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'international'",
        "defaultRaw": "'international'",
        "name": "params.dictionary",
        "description": "optional dictionary to use. Must have same timing as 'international'."
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "params.dictionaryOptions",
        "description": "optional additional dictionaries such as 'prosigns'."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.wpm",
        "description": "speed in words per minute using \"PARIS \" as the standard word."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.fwpm",
        "description": "farnsworth speed."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "params.messageCallback",
        "description": "Callback executed with {message: string, timings: number[], morse: string} when decoder buffer is flushed (every character)."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "params.speedCallback",
        "description": "Callback executed with {wpm: number, fwpm: number} if the wpm or fwpm speed changes. The speed in this class doesn't change by itself, but e.g. the fwpm can change if wpm is changed. Returned dictionary has keys 'fwpm' and 'wpm'."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "30",
        "defaultRaw": 30,
        "name": "bufferSize",
        "description": "Size of the buffer to average over"
      }
    ]
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "bufferSize",
    "memberof": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder",
    "static": false,
    "longname": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder#bufferSize",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "ditLengths",
    "memberof": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder",
    "static": false,
    "longname": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder#ditLengths",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "fditLengths",
    "memberof": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder",
    "static": false,
    "longname": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder#fditLengths",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "lockSpeed",
    "memberof": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder",
    "static": false,
    "longname": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder#lockSpeed",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "_addDecode",
    "memberof": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder#_addDecode",
    "access": "private",
    "description": "",
    "lineNumber": 59,
    "params": [
      {
        "name": "duration",
        "types": [
          "*"
        ]
      },
      {
        "name": "character",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "fditLen",
    "memberof": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder",
    "static": false,
    "longname": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder#fditLen",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "ditLen",
    "memberof": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder",
    "static": false,
    "longname": "src/morse-pro-decoder-adaptive.js~MorseAdaptiveDecoder#ditLen",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/morse-pro-decoder.js",
    "content": "/*\r\nThis code is © Copyright Stephen C. Phillips, 2018.\r\nEmail: steve@scphillips.com\r\n\r\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\r\nYou may not use this work except in compliance with the Licence.\r\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\r\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the Licence for the specific language governing permissions and limitations under the Licence.\r\n*/\r\n\r\nimport MorseCW from './morse-pro-cw';\r\n\r\n/**\r\n * Class to convert from timings to Morse code. Uses \"international\" dictionary.\r\n *\r\n * @example\r\n * // The messageCallback is called when a character or more is decoded\r\n * // It receives a dictionary of the timings, morse, and the message\r\n * var messageCallback = function(data) {\r\n *     console.log(\"Decoded: {\\n  timings: \" + data.timings + \"\\n  morse: \" + data.morse + \"\\n  message: \" + data.message + \"\\n}\");\r\n * }\r\n * var wpm = 10;\r\n * var decoder = new MorseDecoder({wpm, messageCallback});\r\n * var t;\r\n * while (decoder_is_operating) {\r\n *     // get some ms timing \"t\" from a sensor, make it +ve for noise and -ve for silence\r\n *     decoder.addTiming(t);\r\n * }\r\n * decoder.flush();  // make sure all the data is pushed through the decoder\r\n */\r\nexport default class MorseDecoder extends MorseCW {\r\n    /**\r\n     * Constructor\r\n     * @param {Object} params - dictionary of optional parameters.\r\n     * @param {string} [params.dictionary='international'] - optional dictionary to use. Must have same timing as 'international'.\r\n     * @param {string[]} params.dictionaryOptions - optional additional dictionaries such as 'prosigns'.\r\n     * @param {number} params.wpm - speed in words per minute using \"PARIS \" as the standard word.\r\n     * @param {number} params.fwpm - farnsworth speed.\r\n     * @param {function()} params.messageCallback - Callback executed with {message: string, timings: number[], morse: string} when decoder buffer is flushed (every character).\r\n     * @param {function()} params.speedCallback - Callback executed with {wpm: number, fwpm: number} if the wpm or fwpm speed changes. The speed in this class doesn't change by itself, but e.g. the fwpm can change if wpm is changed. Returned dictionary has keys 'fwpm' and 'wpm'.\r\n    */\r\n    constructor({dictionary='international', dictionaryOptions, wpm, fwpm, messageCallback, speedCallback} = {}) {\r\n        super({dictionary, dictionaryOptions, wpm, fwpm});\r\n        if (messageCallback !== undefined) this.messageCallback = messageCallback;\r\n        if (speedCallback !== undefined) this.speedCallback = speedCallback;  // function receives dictionary with wpm and fwpm set when the speed changes\r\n        this.timings = [];  // all the ms timings received, all +ve\r\n        this.characters = [];  // all the decoded characters ('.', '-', etc)\r\n        this.unusedTimes = [];\r\n        this.noiseThreshold = 5.4;  // a duration <= noiseThreshold is assumed to be an error. Timestep with 256 FFT 5.3ms.\r\n        this.morse = \"\";  // string of morse\r\n        this.message = \"\";  // string of decoded message\r\n    }\r\n\r\n    /**\r\n     * @access private\r\n     */\r\n    _clearThresholds() {\r\n        this._ditDahThreshold = undefined;\r\n        this._spaceThreshold = undefined;\r\n    }\r\n\r\n    get ditDahThreshold() {\r\n        this._ditDahThreshold = this._ditDahThreshold || (this.lengths['.'] + this.lengths['-']) / 2;\r\n        return this._ditDahThreshold;\r\n    }\r\n\r\n    get spaceThreshold() {\r\n        this._spaceThreshold = this._spaceThreshold || -(this.lengths.charSpace + this.lengths.wordSpace) / 2;\r\n        return this._spaceThreshold;\r\n    }\r\n\r\n    /**\r\n     * Should be set to the WPM speed of the input sound.\r\n     * The speedCallback is executed.\r\n     * @param {number} wpm - Speed in words per minute.\r\n     */\r\n    setWPM(wpm) {\r\n        super.setWPM(wpm);\r\n        this._clearThresholds();\r\n        this.speedCallback({wpm: this.wpm, fwpm: this.fwpm});\r\n    }\r\n\r\n    /**\r\n     * Should be set to the Farnsworth WPM speed of the input sound.\r\n     * The speedCallback is executed.\r\n     * @param {number} fwpm - Speed in words per minute.\r\n     */\r\n    setFWPM(fwpm) {\r\n        super.setFWPM(fwpm);\r\n        this._clearThresholds();\r\n        this.speedCallback({wpm: this.wpm, fwpm: this.fwpm});\r\n    }\r\n\r\n    /**\r\n     * Set the length of a dit the decoder will look for.\r\n     * Updates wpm and fwpm.\r\n     * @param {number} dit - Length of a dit in ms.\r\n     */\r\n    set ditLen(dit) {\r\n        this._fditLen = Math.max(dit, this._fditLen || 1);\r\n        this.setWPMfromDitLen(dit);\r\n        this._setFWPMfromRatio(dit / this._fditLen);\r\n        this._clearThresholds();\r\n    }\r\n\r\n    get ditLen() {\r\n        return this.lengths['.'];\r\n    }\r\n\r\n    /**\r\n     * Set the length of a Farnsworth dit the decoder will look for.\r\n     * Updates ditLen (ensuring ditLen is not longer).\r\n     * @param {number} dit - Length of a Farnsworth dit in ms.\r\n     */\r\n    set fditLen(fdit) {\r\n        this._fditLen = fdit;\r\n        this.ditLen = Math.min(this.lengths['.'], fdit);\r\n    }\r\n\r\n    get fditLen() {\r\n        return this._fditLen;\r\n    }\r\n\r\n    /**\r\n     * Add a timing in ms to the list of recorded timings.\r\n     * The duration should be positive for a dit or dah and negative for a space.\r\n     * If the duration is <= noiseThreshold it is assumed to be noise and is added to the previous duration.\r\n     * If a duration is the same sign as the previous one then they are combined.\r\n     * @param {number} duration - millisecond duration to add, positive for a dit or dah, negative for a space\r\n     */\r\n    addTiming(duration) {\r\n        // console.log(\"Received: \" + duration);\r\n        if (duration === 0) {\r\n            return;\r\n        }\r\n        if (this.unusedTimes.length > 0) {\r\n            var last = this.unusedTimes[this.unusedTimes.length - 1];\r\n            if (duration * last > 0) {\r\n                // if the sign of the duration is the same as the previous one then add it on\r\n                this.unusedTimes.pop();\r\n                duration = last + duration;\r\n            } else if (Math.abs(duration) <= this.noiseThreshold) {\r\n                // if the duration is very short, assume it is a mistake and add it to the previous one\r\n                this.unusedTimes.pop();\r\n                duration = last - duration;  // take care of the sign change (if we're here then we know the sign has changed)\r\n            }\r\n        }\r\n\r\n        this.unusedTimes.push(duration);\r\n\r\n        // If we have just received a character space or longer then flush the timings\r\n        if (-duration >= this.ditDahThreshold) {\r\n            // TODO: if fwpm != wpm then the ditDahThreshold only applies to sound, not spaces so this is slightly wrong (need another threshold)\r\n            this.flush();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Process the buffer of unused timings, converting them into Morse and converting the generated Morse into a message.\r\n     * Should be called only when a character space has been reached (or the message is at an end).\r\n     * Will call the messageCallback with the latest timings, morse (dots and dashes) and message.\r\n     */\r\n    flush() {\r\n        // Then we've reached the end of a character or word or a flush has been forced\r\n\r\n        // If the last character decoded was a space then just ignore additional quiet\r\n        if (this.message[this.message.length - 1] === ' ') {\r\n            if (this.unusedTimes[0] < 0) {\r\n                this.unusedTimes.shift();\r\n            }\r\n        }\r\n\r\n        // Make sure there is (still) something to decode\r\n        if (this.unusedTimes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // If last element is quiet but it is not enough for a space character then pop it off and replace afterwards\r\n        var last = this.unusedTimes[this.unusedTimes.length - 1];\r\n        if ((last < 0) && (-last < this.spaceThreshold)) {\r\n            this.unusedTimes.pop();\r\n        }\r\n\r\n        var u = this.unusedTimes;\r\n        var m = this._timings2morse(this.unusedTimes);\r\n        var t = this.displayText(this.morse2text(m).text, {});  // will be '#' if there's an error\r\n        this.morse += m;\r\n        this.message += t;\r\n        if (last < 0) {\r\n            this.unusedTimes = [last];  // put the space back on the end in case there is more quiet to come\r\n        } else {\r\n            this.unusedTimes = [];\r\n        }\r\n        // console.log(`timings ${u} / morse ${m}`);\r\n        this.messageCallback({\r\n            timings: u,\r\n            morse: m,\r\n            message: t\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Convert from millisecond timings to dots and dashes.\r\n     * @param {number[]} times - array of millisecond timings, +ve numbers representing a signal, -ve representing a space.\r\n     * @return {string} - the dots and dashes as a string.\r\n     * @access private\r\n     */\r\n    _timings2morse(times) {\r\n        var ditdah = \"\";\r\n        var c;\r\n        var d;\r\n\r\n        for (var i = 0; i < times.length; i++) {\r\n            d = times[i];\r\n            if (d > 0) {\r\n                if (d < this.ditDahThreshold) {\r\n                    c = \".\";\r\n                } else {\r\n                    c = \"-\";\r\n                }\r\n            } else {\r\n                d = -d;\r\n                if (d < this.ditDahThreshold) {\r\n                    c = \"\";\r\n                } else if (d < this.spaceThreshold) {\r\n                    c = \" \";\r\n                } else {\r\n                    c = \"/\";\r\n                }\r\n            }\r\n            this._addDecode(d, c);\r\n            ditdah = ditdah + c;\r\n        }\r\n        return ditdah;\r\n    }\r\n\r\n    /**\r\n     * Store the timing and the corresponding decoded character element.\r\n     * @param {number} duration - the millisecond duration (always +ve).\r\n     * @param {string} character - the corresponding character element [.-/ ].\r\n     * @access private\r\n     */\r\n    _addDecode(duration, character) {\r\n        this.timings.push(duration);\r\n        this.characters.push(character);\r\n    }\r\n\r\n    /**\r\n     * Get a list of all the timings that were interpreted to be a particular character\r\n     * @return {number[]}\r\n     * @access private\r\n     */\r\n    _getTimings(character) {\r\n        var ret = [];\r\n        for (var i = 0; i < this.timings.length; i++) {\r\n            if (this.characters[i] === character) {\r\n                ret.push(this.timings[i]);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Get the millisecond timings of all durations determined to be dits\r\n     * @return {number[]}\r\n     */\r\n    get dits() {\r\n        return this._getTimings('.');\r\n    }\r\n\r\n    /**\r\n     * Get the millisecond timings of all durations determined to be dahs\r\n     * @return {number[]}\r\n     */\r\n    get dahs() {\r\n        return this._getTimings('-');\r\n    }\r\n\r\n    /**\r\n     * Get the millisecond timings of all durations determined to be dit-spaces\r\n     * @return {number[]}\r\n     */\r\n    get ditSpaces() {\r\n        return this._getTimings('');\r\n    }\r\n\r\n    /**\r\n     * Get the millisecond timings of all durations determined to be dah-spaces\r\n     * @return {number[]}\r\n     */\r\n    get dahSpaces() {\r\n        return this._getTimings(' ');\r\n    }\r\n\r\n    /**\r\n     * Get the millisecond timings of all durations determined to be spaces\r\n     * @return {number[]}\r\n     */\r\n    get spaces() {\r\n        return this._getTimings('/');\r\n    }\r\n\r\n    // default callbacks that do nothing\r\n    messageCallback(jsonData) { }\r\n    speedCallback(jsonData) { }\r\n}\r\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-decoder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "class",
    "name": "MorseDecoder",
    "memberof": "src/morse-pro-decoder.js",
    "static": true,
    "longname": "src/morse-pro-decoder.js~MorseDecoder",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-decoder.js",
    "importStyle": "MorseDecoder",
    "description": "Class to convert from timings to Morse code. Uses \"international\" dictionary.",
    "examples": [
      "// The messageCallback is called when a character or more is decoded\n// It receives a dictionary of the timings, morse, and the message\nvar messageCallback = function(data) {\n    console.log(\"Decoded: {\\n  timings: \" + data.timings + \"\\n  morse: \" + data.morse + \"\\n  message: \" + data.message + \"\\n}\");\n}\nvar wpm = 10;\nvar decoder = new MorseDecoder({wpm, messageCallback});\nvar t;\nwhile (decoder_is_operating) {\n    // get some ms timing \"t\" from a sensor, make it +ve for noise and -ve for silence\n    decoder.addTiming(t);\n}\ndecoder.flush();  // make sure all the data is pushed through the decoder"
    ],
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "src/morse-pro-cw.js~MorseCW"
    ]
  },
  {
    "__docId__": 182,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "dictionary of optional parameters."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'international'",
        "defaultRaw": "'international'",
        "name": "params.dictionary",
        "description": "optional dictionary to use. Must have same timing as 'international'."
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "params.dictionaryOptions",
        "description": "optional additional dictionaries such as 'prosigns'."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.wpm",
        "description": "speed in words per minute using \"PARIS \" as the standard word."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.fwpm",
        "description": "farnsworth speed."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "params.messageCallback",
        "description": "Callback executed with {message: string, timings: number[], morse: string} when decoder buffer is flushed (every character)."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "params.speedCallback",
        "description": "Callback executed with {wpm: number, fwpm: number} if the wpm or fwpm speed changes. The speed in this class doesn't change by itself, but e.g. the fwpm can change if wpm is changed. Returned dictionary has keys 'fwpm' and 'wpm'."
      }
    ]
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "timings",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#timings",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "characters",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#characters",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "unusedTimes",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#unusedTimes",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "noiseThreshold",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#noiseThreshold",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "morse",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#morse",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "message",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#message",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "_clearThresholds",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#_clearThresholds",
    "access": "private",
    "description": "",
    "lineNumber": 58,
    "params": [],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "_ditDahThreshold",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#_ditDahThreshold",
    "access": "private",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "_spaceThreshold",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#_spaceThreshold",
    "access": "private",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "get",
    "name": "ditDahThreshold",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#ditDahThreshold",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "get",
    "name": "spaceThreshold",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#spaceThreshold",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "setWPM",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#setWPM",
    "access": "public",
    "description": "Should be set to the WPM speed of the input sound.\nThe speedCallback is executed.",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "wpm",
        "description": "Speed in words per minute."
      }
    ],
    "return": null
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "setFWPM",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#setFWPM",
    "access": "public",
    "description": "Should be set to the Farnsworth WPM speed of the input sound.\nThe speedCallback is executed.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fwpm",
        "description": "Speed in words per minute."
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "set",
    "name": "ditLen",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#ditLen",
    "access": "public",
    "description": "Set the length of a dit the decoder will look for.\nUpdates wpm and fwpm.",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dit",
        "description": "Length of a dit in ms."
      }
    ]
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "_fditLen",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#_fditLen",
    "access": "private",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "get",
    "name": "ditLen",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#ditLen",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "set",
    "name": "fditLen",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#fditLen",
    "access": "public",
    "description": "Set the length of a Farnsworth dit the decoder will look for.\nUpdates ditLen (ensuring ditLen is not longer).",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dit",
        "description": "Length of a Farnsworth dit in ms."
      }
    ]
  },
  {
    "__docId__": 206,
    "kind": "get",
    "name": "fditLen",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#fditLen",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "addTiming",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#addTiming",
    "access": "public",
    "description": "Add a timing in ms to the list of recorded timings.\nThe duration should be positive for a dit or dah and negative for a space.\nIf the duration is <= noiseThreshold it is assumed to be noise and is added to the previous duration.\nIf a duration is the same sign as the previous one then they are combined.",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "millisecond duration to add, positive for a dit or dah, negative for a space"
      }
    ],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "flush",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#flush",
    "access": "public",
    "description": "Process the buffer of unused timings, converting them into Morse and converting the generated Morse into a message.\nShould be called only when a character space has been reached (or the message is at an end).\nWill call the messageCallback with the latest timings, morse (dots and dashes) and message.",
    "lineNumber": 164,
    "params": [],
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "_timings2morse",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#_timings2morse",
    "access": "private",
    "description": "Convert from millisecond timings to dots and dashes.",
    "lineNumber": 209,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "times",
        "description": "array of millisecond timings, +ve numbers representing a signal, -ve representing a space."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the dots and dashes as a string."
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "_addDecode",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#_addDecode",
    "access": "private",
    "description": "Store the timing and the corresponding decoded character element.",
    "lineNumber": 244,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "the millisecond duration (always +ve)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "character",
        "description": "the corresponding character element [.-/ ]."
      }
    ],
    "return": null
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "_getTimings",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#_getTimings",
    "access": "private",
    "description": "Get a list of all the timings that were interpreted to be a particular character",
    "lineNumber": 254,
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 216,
    "kind": "get",
    "name": "dits",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#dits",
    "access": "public",
    "description": "Get the millisecond timings of all durations determined to be dits",
    "lineNumber": 268,
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "get",
    "name": "dahs",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#dahs",
    "access": "public",
    "description": "Get the millisecond timings of all durations determined to be dahs",
    "lineNumber": 276,
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "get",
    "name": "ditSpaces",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#ditSpaces",
    "access": "public",
    "description": "Get the millisecond timings of all durations determined to be dit-spaces",
    "lineNumber": 284,
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "get",
    "name": "dahSpaces",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#dahSpaces",
    "access": "public",
    "description": "Get the millisecond timings of all durations determined to be dah-spaces",
    "lineNumber": 292,
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "get",
    "name": "spaces",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#spaces",
    "access": "public",
    "description": "Get the millisecond timings of all durations determined to be spaces",
    "lineNumber": 300,
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "messageCallback",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#messageCallback",
    "access": "public",
    "description": null,
    "lineNumber": 305,
    "undocument": true,
    "params": [
      {
        "name": "jsonData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "speedCallback",
    "memberof": "src/morse-pro-decoder.js~MorseDecoder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-decoder.js~MorseDecoder#speedCallback",
    "access": "public",
    "description": null,
    "lineNumber": 306,
    "undocument": true,
    "params": [
      {
        "name": "jsonData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 223,
    "kind": "file",
    "name": "src/morse-pro-keyer-iambic.js",
    "content": "/*!\r\nThis code is © Copyright Stephen C. Phillips, 2019.\r\nEmail: steve@scphillips.com\r\n*/\r\n/*\r\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\r\nYou may not use this work except in compliance with the Licence.\r\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\r\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the Licence for the specific language governing permissions and limitations under the Licence.\r\n*/\r\n\r\nimport MorseKeyer from './morse-pro-keyer';\r\n\r\n/*\r\n    The Morse iambic keyer tests for input on a timer, plays the appropriate tone and passes the data to a decoder.\r\n    If both keys are detected at once then this class alternates between dit and dah.\r\n    If iambic B mode is selected then if both keys were pressed and are then release, an additional dit or dah is sent.\r\n    Set 'ditGoesFirst' to define whether to play dit or dah first.\r\n    Arguments: see MorseKeyer\r\n*/\r\n\r\nexport default class MorseIambicKeyer extends MorseKeyer {\r\n    /**\r\n     * @param {Object} params - optional parameters.\r\n     * @param {function(): number} params.keyCallback - A function which should return 0, 1, 2, or 3 from the vitual \"paddle\" depending if nothing, a dit, a dah or both is detected. This implementation will play dits if both keys are detected.\r\n     * @param {MorseDecoder} params.decoder - Configured MorseDecoder.\r\n     * @param {MorsePlayerWAA} params.player - Configured MorsePlayerWAA.\r\n     * @param {boolean} [params.iambicA=true] - if true then use iambic A mode, otherwise use iambic B mode (which sends an additional dit or dah when squeeze is released).\r\n     */\r\n    constructor({keyCallback, decoder, player, iambicA=true}) {\r\n        super({keyCallback, decoder, player});\r\n        this.ditGoesFirst = true;  // if the initial signal is 3 then alternate but play a dit first\r\n        this.iambicA = iambicA;\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @access private\r\n     */\r\n    _ditOrDah(input) {\r\n        var ditOrDah = undefined;\r\n        switch(input) {\r\n            case 0:\r\n                if (!this.iambicA) {\r\n                    // iambic B mode\r\n                    if (this._lastInput === 3) {\r\n                        // gone from both to nothing\r\n                        // once paddles are released, send one more dit or dah\r\n                        ditOrDah = !this._lastDitOrDah;\r\n                    }\r\n                }\r\n                break;\r\n            case 1:\r\n                ditOrDah = true;\r\n                break;\r\n            case 2:\r\n                ditOrDah = false;\r\n                break;\r\n            case 3:\r\n                if (this._lastDitOrDah === undefined) {\r\n                    ditOrDah = this.ditGoesFirst;\r\n                } else {\r\n                    ditOrDah = !this._lastDitOrDah;\r\n                }\r\n        }\r\n        this._lastDitOrDah = ditOrDah;\r\n        this._lastInput = input;\r\n        return ditOrDah;\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-keyer-iambic.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 224,
    "kind": "class",
    "name": "MorseIambicKeyer",
    "memberof": "src/morse-pro-keyer-iambic.js",
    "static": true,
    "longname": "src/morse-pro-keyer-iambic.js~MorseIambicKeyer",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-keyer-iambic.js",
    "importStyle": "MorseIambicKeyer",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/morse-pro-keyer.js~MorseKeyer"
    ]
  },
  {
    "__docId__": 225,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/morse-pro-keyer-iambic.js~MorseIambicKeyer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-keyer-iambic.js~MorseIambicKeyer#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "optional parameters."
      },
      {
        "nullable": null,
        "types": [
          "function(): number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.keyCallback",
        "description": "A function which should return 0, 1, 2, or 3 from the vitual \"paddle\" depending if nothing, a dit, a dah or both is detected. This implementation will play dits if both keys are detected."
      },
      {
        "nullable": null,
        "types": [
          "MorseDecoder"
        ],
        "spread": false,
        "optional": false,
        "name": "params.decoder",
        "description": "Configured MorseDecoder."
      },
      {
        "nullable": null,
        "types": [
          "MorsePlayerWAA"
        ],
        "spread": false,
        "optional": false,
        "name": "params.player",
        "description": "Configured MorsePlayerWAA."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.iambicA",
        "description": "if true then use iambic A mode, otherwise use iambic B mode (which sends an additional dit or dah when squeeze is released)."
      }
    ]
  },
  {
    "__docId__": 226,
    "kind": "member",
    "name": "ditGoesFirst",
    "memberof": "src/morse-pro-keyer-iambic.js~MorseIambicKeyer",
    "static": false,
    "longname": "src/morse-pro-keyer-iambic.js~MorseIambicKeyer#ditGoesFirst",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "member",
    "name": "iambicA",
    "memberof": "src/morse-pro-keyer-iambic.js~MorseIambicKeyer",
    "static": false,
    "longname": "src/morse-pro-keyer-iambic.js~MorseIambicKeyer#iambicA",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "_ditOrDah",
    "memberof": "src/morse-pro-keyer-iambic.js~MorseIambicKeyer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-keyer-iambic.js~MorseIambicKeyer#_ditOrDah",
    "access": "private",
    "description": "",
    "lineNumber": 41,
    "override": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "_lastDitOrDah",
    "memberof": "src/morse-pro-keyer-iambic.js~MorseIambicKeyer",
    "static": false,
    "longname": "src/morse-pro-keyer-iambic.js~MorseIambicKeyer#_lastDitOrDah",
    "access": "private",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "_lastInput",
    "memberof": "src/morse-pro-keyer-iambic.js~MorseIambicKeyer",
    "static": false,
    "longname": "src/morse-pro-keyer-iambic.js~MorseIambicKeyer#_lastInput",
    "access": "private",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "src/morse-pro-keyer.js",
    "content": "/*!\r\nThis code is © Copyright Stephen C. Phillips, 2019.\r\nEmail: steve@scphillips.com\r\n*/\r\n/*\r\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\r\nYou may not use this work except in compliance with the Licence.\r\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\r\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the Licence for the specific language governing permissions and limitations under the Licence.\r\n*/\r\n\r\n/**\r\n * The Morse keyer tests for input on a timer, plays the appropriate tone and passes the data to a decoder.\r\n *\r\n * @example\r\n * var ditKey = 90;  // Z\r\n * var dahKey = 88;  // X\r\n * window.onkeyup = function(e) {\r\n *     if (e.keyCode === ditKey) { dit = false; }\r\n *     if (e.keyCode === dahKey) { dah = false; }\r\n * };\r\n * window.onkeydown = function(e) {\r\n *     var wasMiddle = !dit & !dah;\r\n *     if (e.keyCode === ditKey) { dit = true; }\r\n *     if (e.keyCode === dahKey) { dah = true; }\r\n *     if (wasMiddle & (dit | dah)) { keyer.start(); }\r\n * };\r\n * var keyCallback = function() {\r\n *     return ((dit === true) * 1) + ((dah === true) * 2);\r\n * };\r\n * var messageCallback = function(d) {\r\n *     console.log(d.message);\r\n * };\r\n * decoder = new MorseDecoder({wpm:20, messageCallback});\r\n * player = new MorsePlayerWAA({frequency:550});\r\n * keyer = new MorseKeyer({keyCallback, decoder, player});\r\n */\r\nexport default class MorseKeyer {\r\n    /**\r\n     * @param {Object} params - optional parameters.\r\n     * @param {function(): number} params.keyCallback - A function which should return 0, 1, 2, or 3 from the vitual \"paddle\" depending if nothing, a dit, a dah or both is detected. This implementation will play dits if both keys are detected.\r\n     * @param {MorseDecoder} params.decoder - Configured MorseDecoder.\r\n     * @param {MorsePlayerWAA} params.player - Configured MorsePlayerWAA.\r\n     */\r\n    constructor({keyCallback, decoder, player}) {\r\n        this.keyCallback = keyCallback;\r\n        this.player = player;\r\n        this.decoder = decoder;\r\n        this.decoder.noiseThreshold = 0;\r\n\r\n        this.ditLen = this.decoder.lengths['.'];  // duration of dit in ms\r\n        this.fditLen = this.ditLen;  // TODO: finish fwpm bit\r\n        this._state = { playing: false };\r\n    }\r\n\r\n    /**\r\n     * @access private\r\n     */\r\n    _check() {\r\n        var key = this.keyCallback();\r\n        var ditOrDah = this._ditOrDah(key);\r\n        var beepLen;  // length of beep\r\n        var silenceLen;  // length of silence\r\n        var now = (new Date()).getTime();\r\n\r\n        if (this._state.lastTime !== undefined) {\r\n            this.decoder.addTiming(this._state.lastTime - now);  // add how long since we've last been here as silence\r\n        }\r\n        if (ditOrDah === undefined) {\r\n            // If no keypress is detected then continue pushing chunks of silence to the decoder to complete the character and add a space\r\n            beepLen = 0;\r\n            this._state.playing = false;  // make it interupterable: means that a new char can start whenever\r\n            switch (this._state.spaceCounter) {\r\n                case 0:\r\n                    // we've already waited 1 ditLen, need to make it 1 fditLen plus 2 more\r\n                    silenceLen = (this.fditLen - this.ditLen) + (2 * this.fditLen);\r\n                    break;\r\n                case 1:\r\n                    silenceLen = (4 * this.fditLen);\r\n                    break;\r\n                case 2:\r\n                    silenceLen = 0;\r\n                    this.stop();\r\n                    break;\r\n            }\r\n            this._state.spaceCounter++;\r\n        } else {\r\n            this._state.spaceCounter = 0;\r\n            beepLen = (ditOrDah ? 1 : 3) * this.ditLen;\r\n            this._playTone(beepLen);\r\n            this.decoder.addTiming(beepLen);\r\n            silenceLen = this.ditLen;  // while playing, assume we are inside a char and so wait 1 ditLen\r\n        }\r\n        this._state.lastTime = now + beepLen;\r\n        if (beepLen + silenceLen) this.timer = setTimeout(this._check.bind(this), beepLen + silenceLen);  // check key state again after the dit or dah and after a dit-space\r\n    }\r\n\r\n    /**\r\n     * Translate key input into whether to play nothing, dit, or dah\r\n     * @returns undefined, true or false for nothing, dit or dah\r\n     * @access private\r\n     */\r\n    _ditOrDah(input) {\r\n        if (input & 1) {\r\n            return true;\r\n        } else if (input === 2) {\r\n            return false;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Call this method when an initial key-press (or equivalent) is detected.\r\n     */\r\n    start() {\r\n        if (this._state.playing) {\r\n            // If the keyer is already playing then ignore a new start.\r\n            return;\r\n        } else {\r\n            this._state.playing = true;\r\n            this._state.spaceCounter = 0;\r\n            this._state.lastTime = undefined;  // removes extended pauses\r\n            clearTimeout(this.timer);\r\n            this._check();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method can be called externally to stop the keyer but is also used internally when no key-press is detected.\r\n     */\r\n    stop() {\r\n        this._state.playing = false;\r\n        clearTimeout(this.timer);\r\n    }\r\n\r\n    /**\r\n     * Play a dit or dah sidetone.\r\n     * @param {number} duration - number of milliseconds to play\r\n     * @access private\r\n     */\r\n    _playTone(duration) {\r\n        this.player.load({timings: [duration]});\r\n        this.player.playFromStart();\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-keyer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "class",
    "name": "MorseKeyer",
    "memberof": "src/morse-pro-keyer.js",
    "static": true,
    "longname": "src/morse-pro-keyer.js~MorseKeyer",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-keyer.js",
    "importStyle": "MorseKeyer",
    "description": "The Morse keyer tests for input on a timer, plays the appropriate tone and passes the data to a decoder.",
    "examples": [
      "var ditKey = 90;  // Z\nvar dahKey = 88;  // X\nwindow.onkeyup = function(e) {\n    if (e.keyCode === ditKey) { dit = false; }\n    if (e.keyCode === dahKey) { dah = false; }\n};\nwindow.onkeydown = function(e) {\n    var wasMiddle = !dit & !dah;\n    if (e.keyCode === ditKey) { dit = true; }\n    if (e.keyCode === dahKey) { dah = true; }\n    if (wasMiddle & (dit | dah)) { keyer.start(); }\n};\nvar keyCallback = function() {\n    return ((dit === true) * 1) + ((dah === true) * 2);\n};\nvar messageCallback = function(d) {\n    console.log(d.message);\n};\ndecoder = new MorseDecoder({wpm:20, messageCallback});\nplayer = new MorsePlayerWAA({frequency:550});\nkeyer = new MorseKeyer({keyCallback, decoder, player});"
    ],
    "lineNumber": 39,
    "interface": false
  },
  {
    "__docId__": 233,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/morse-pro-keyer.js~MorseKeyer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-keyer.js~MorseKeyer#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "optional parameters."
      },
      {
        "nullable": null,
        "types": [
          "function(): number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.keyCallback",
        "description": "A function which should return 0, 1, 2, or 3 from the vitual \"paddle\" depending if nothing, a dit, a dah or both is detected. This implementation will play dits if both keys are detected."
      },
      {
        "nullable": null,
        "types": [
          "MorseDecoder"
        ],
        "spread": false,
        "optional": false,
        "name": "params.decoder",
        "description": "Configured MorseDecoder."
      },
      {
        "nullable": null,
        "types": [
          "MorsePlayerWAA"
        ],
        "spread": false,
        "optional": false,
        "name": "params.player",
        "description": "Configured MorsePlayerWAA."
      }
    ]
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "keyCallback",
    "memberof": "src/morse-pro-keyer.js~MorseKeyer",
    "static": false,
    "longname": "src/morse-pro-keyer.js~MorseKeyer#keyCallback",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "player",
    "memberof": "src/morse-pro-keyer.js~MorseKeyer",
    "static": false,
    "longname": "src/morse-pro-keyer.js~MorseKeyer#player",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "decoder",
    "memberof": "src/morse-pro-keyer.js~MorseKeyer",
    "static": false,
    "longname": "src/morse-pro-keyer.js~MorseKeyer#decoder",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "ditLen",
    "memberof": "src/morse-pro-keyer.js~MorseKeyer",
    "static": false,
    "longname": "src/morse-pro-keyer.js~MorseKeyer#ditLen",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "fditLen",
    "memberof": "src/morse-pro-keyer.js~MorseKeyer",
    "static": false,
    "longname": "src/morse-pro-keyer.js~MorseKeyer#fditLen",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "_state",
    "memberof": "src/morse-pro-keyer.js~MorseKeyer",
    "static": false,
    "longname": "src/morse-pro-keyer.js~MorseKeyer#_state",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "{\"playing\": *}"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "_check",
    "memberof": "src/morse-pro-keyer.js~MorseKeyer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-keyer.js~MorseKeyer#_check",
    "access": "private",
    "description": "",
    "lineNumber": 60,
    "params": [],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "timer",
    "memberof": "src/morse-pro-keyer.js~MorseKeyer",
    "static": false,
    "longname": "src/morse-pro-keyer.js~MorseKeyer#timer",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "_ditOrDah",
    "memberof": "src/morse-pro-keyer.js~MorseKeyer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-keyer.js~MorseKeyer#_ditOrDah",
    "access": "private",
    "description": "Translate key input into whether to play nothing, dit, or dah",
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "undefined, true or false for nothing, dit or dah"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "undefined, true or false for nothing, dit or dah"
    },
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "start",
    "memberof": "src/morse-pro-keyer.js~MorseKeyer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-keyer.js~MorseKeyer#start",
    "access": "public",
    "description": "Call this method when an initial key-press (or equivalent) is detected.",
    "lineNumber": 117,
    "params": [],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "stop",
    "memberof": "src/morse-pro-keyer.js~MorseKeyer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-keyer.js~MorseKeyer#stop",
    "access": "public",
    "description": "This method can be called externally to stop the keyer but is also used internally when no key-press is detected.",
    "lineNumber": 133,
    "params": [],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "_playTone",
    "memberof": "src/morse-pro-keyer.js~MorseKeyer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-keyer.js~MorseKeyer#_playTone",
    "access": "private",
    "description": "Play a dit or dah sidetone.",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "number of milliseconds to play"
      }
    ],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "file",
    "name": "src/morse-pro-listener-adaptive.js",
    "content": "/*!\nThis code is © Copyright Stephen C. Phillips, 2018.\nEmail: steve@scphillips.com\n*/\n/*\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\nYou may not use this work except in compliance with the Licence.\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the Licence for the specific language governing permissions and limitations under the Licence.\n*/\n\nimport MorseListener from './morse-pro-listener';\n\n/**\n * Extension of the MorseListener class which automatically adapts to the dominant frequency.\n */\nexport default class MorseAdaptiveListener extends MorseListener {\n    /**\n     * Parameters are all the same as the MorseListener class with the addition of the bufferDuration.\n     * @param {number} [bufferDuration=500] - How long in ms to look back to find the frequency with the maximum volume.\n     */\n    constructor(\n            fftSize,\n            volumeMin, volumeMax,\n            frequencyMin, frequencyMax,\n            volumeThreshold,\n            decoder,\n            bufferDuration = 500,\n            spectrogramCallback,\n            frequencyFilterCallback, volumeFilterCallback, volumeThresholdCallback,\n            micSuccessCallback, micErrorCallback,\n            fileLoadCallback, fileErrorCallback, EOFCallback\n        )\n    {\n        super(fftSize, volumeMin, volumeMax, frequencyMin, frequencyMax, volumeThreshold, decoder,\n            spectrogramCallback,\n            frequencyFilterCallback, volumeFilterCallback, volumeThresholdCallback,\n            micSuccessCallback, micErrorCallback,\n            fileLoadCallback, fileErrorCallback, EOFCallback\n        );\n        this.bufferSize = Math.floor(bufferDuration / this.timeStep);\n        this.bufferIndex = 0;\n        this.buffer = [];\n        for (var i = 0; i < this.bufferSize; i++) {\n            this.buffer[i] = new Uint8Array(this.freqBins);\n        }\n        this.averageVolume = new Uint32Array(this.freqBins);\n        this.lockFrequency = false;\n    }\n\n    /**\n     * @access private\n     */\n    processSound() {\n        super.processSound();\n\n        var sum = this.frequencyData.reduce(function(a, b) {\n            return a + b;\n        });\n        sum -= this.frequencyData[0];  // remove DC component\n\n        if (sum) {\n            var max = 0;\n            var maxIndex = 0;\n            // loop over all frequencies, ignoring DC\n            for (var i = 1; i < this.freqBins; i++) {\n                this.averageVolume[i] = this.averageVolume[i] + this.frequencyData[i] - this.buffer[this.bufferIndex][i];\n                this.buffer[this.bufferIndex][i] = this.frequencyData[i];\n                if (this.averageVolume[i] > max) {\n                    maxIndex = i;\n                    max = this.averageVolume[i];\n                }\n            }\n            this.bufferIndex = (this.bufferIndex + 1) % this.bufferSize;\n\n            if (!this.lockFrequency) {\n                this.frequencyFilter = maxIndex * this.freqStep;\n            }\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-listener-adaptive.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 247,
    "kind": "class",
    "name": "MorseAdaptiveListener",
    "memberof": "src/morse-pro-listener-adaptive.js",
    "static": true,
    "longname": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-listener-adaptive.js",
    "importStyle": "MorseAdaptiveListener",
    "description": "Extension of the MorseListener class which automatically adapts to the dominant frequency.",
    "lineNumber": 18,
    "interface": false,
    "extends": [
      "src/morse-pro-listener.js~MorseListener"
    ]
  },
  {
    "__docId__": 248,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener#constructor",
    "access": "public",
    "description": "Parameters are all the same as the MorseListener class with the addition of the bufferDuration.",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "500",
        "defaultRaw": 500,
        "name": "bufferDuration",
        "description": "How long in ms to look back to find the frequency with the maximum volume."
      }
    ]
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "bufferSize",
    "memberof": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener",
    "static": false,
    "longname": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener#bufferSize",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "bufferIndex",
    "memberof": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener",
    "static": false,
    "longname": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener#bufferIndex",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "member",
    "name": "buffer",
    "memberof": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener",
    "static": false,
    "longname": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener#buffer",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "member",
    "name": "averageVolume",
    "memberof": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener",
    "static": false,
    "longname": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener#averageVolume",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "lockFrequency",
    "memberof": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener",
    "static": false,
    "longname": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener#lockFrequency",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "processSound",
    "memberof": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener#processSound",
    "access": "private",
    "description": "",
    "lineNumber": 55,
    "params": [],
    "return": null
  },
  {
    "__docId__": 256,
    "kind": "member",
    "name": "frequencyFilter",
    "memberof": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener",
    "static": false,
    "longname": "src/morse-pro-listener-adaptive.js~MorseAdaptiveListener#frequencyFilter",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "file",
    "name": "src/morse-pro-listener.js",
    "content": "/*!\r\nThis code is © Copyright Stephen C. Phillips, 2021.\r\nEmail: steve@scphillips.com\r\n*/\r\n/*\r\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\r\nYou may not use this work except in compliance with the Licence.\r\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\r\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the Licence for the specific language governing permissions and limitations under the Licence.\r\n*/\r\n\r\n/**\r\n * A class to 'listen' for Morse code from the microphone or an audio file, filter the sound and pass timings to a decoder to convert to text.\r\n */\r\n\r\n import morseAudioContext from './morse-pro-audiocontext';\r\n\r\n //TOOD: change constructor so that it uses a dictionary of parameters\r\n\r\nexport default class MorseListener {\r\n    /**\r\n     * @param {number} fftSize - Size of the discrete Fourier transform to use. Must be a power of 2 >= 256 (defaults to 256). A smaller fftSize gives better time resolution but worse frequency resolution.\r\n     * @param {number} [volumeFilterMin=-60] - Sound less than this volume (in dB) is ignored.\r\n     * @param {number} [volumeFilterMax=-30] - Sound greater than this volume (in dB) is ignored.\r\n     * @param {number} [frequencyFilterMin=550] - Sound less than this frequency (in Hz) is ignored.\r\n     * @param {number} [frequencyFilterMax=550] - Sound greater than this frequency (in Hz) is ignored.\r\n     * @param {number} [volumeThreshold=220] - If the volume is greater than this then the signal is taken as \"on\" (part of a dit or dah) (range 0-255).\r\n     * @param {Object} decoder - An instance of a configured decoder class.\r\n     * @param {function()} spectrogramCallback - Called every time fftSize samples are read.\r\n        Called with a dictionary parameter:\r\n            {\r\n                frequencyData: output of the DFT (the real values including DC component)\r\n                frequencyStep: frequency resolution in Hz\r\n                timeStep: time resolution in Hz\r\n                filterBinLow: index of the lowest frequency bin being analysed\r\n                filterBinHigh: index of the highest frequency bin being analysed\r\n                filterRegionVolume: volume in the analysed region\r\n                isOn: whether the analysis detected a signal or not\r\n            }\r\n     * @param {function()} frequencyFilterCallback - Called when the frequency filter parameters change.\r\n        Called with a dictionary parameter:\r\n            {\r\n                min: lowest frequency in Hz\r\n                max: highest frequency in Hz\r\n            }\r\n            The frequencies may well be different to that which is set as they are quantised.\r\n     * @param {function()} volumeFilterCallback - Called when the volume filter parameters change.\r\n        Called with a dictionary parameter:\r\n            {\r\n                min: low volume (in dB)\r\n                max: high volume (in dB)\r\n            }\r\n            If the set volumes are not numeric or out of range then the callback will return in range numbers.\r\n     * @param {function()} volumeThresholdCallback - Called with a single number as the argument when the volume filter threshold changes.\r\n     * @param {function()} micSuccessCallback - Called when the microphone has successfully been connected.\r\n     * @param {function()} micErrorCallback - Called with the error as the argument if there is an error connecting to the microphone.\r\n     * @param {function()} fileLoadCallback - Called with the AudioBuffer object as the argument when a file has successfully been loaded (and decoded).\r\n     * @param {function()} fileErrorCallback - Called with the error as the argument if there is an error in decoding a file.\r\n     * @param {function()} EOFCallback - Called when the playback of a file ends.\r\n     */\r\n    constructor(\r\n            fftSize,\r\n            volumeFilterMin, volumeFilterMax,\r\n            frequencyFilterMin, frequencyFilterMax,\r\n            volumeThreshold,\r\n            decoder,\r\n            spectrogramCallback,\r\n            frequencyFilterCallback, volumeFilterCallback, volumeThresholdCallback,\r\n            micSuccessCallback, micErrorCallback,\r\n            fileLoadCallback, fileErrorCallback, EOFCallback\r\n        )\r\n    {\r\n        // audio input and output\r\n        this.audioContext = morseAudioContext.getAudioContext();  // must have already been init()\r\n\r\n        if (spectrogramCallback !== undefined) this.spectrogramCallback = spectrogramCallback;\r\n        if (frequencyFilterCallback !== undefined) this.frequencyFilterCallback = frequencyFilterCallback;\r\n        if (volumeFilterCallback !== undefined) this.volumeFilterCallback = volumeFilterCallback;\r\n        if (volumeThresholdCallback !== undefined) this.volumeThresholdCallback = volumeThresholdCallback;\r\n        if (micSuccessCallback !== undefined) this.micSuccessCallback = micSuccessCallback;\r\n        if (micErrorCallback !== undefined) this.micErrorCallback = micErrorCallback;\r\n        if (fileLoadCallback !== undefined) this.fileLoadCallback = fileLoadCallback;\r\n        if (fileErrorCallback !== undefined) this.fileErrorCallback = fileErrorCallback;\r\n        if (EOFCallback !== undefined) this.EOFCallback = EOFCallback;\r\n\r\n        this.fftSize = fftSize;\r\n        // basic parameters from the sample rate\r\n        this.sampleRate = this.audioContext.sampleRate;  // in Hz, 48000 on Chrome\r\n        this.maxFreq = this.sampleRate / 2;  // in Hz; Nyquist theorem\r\n        this.freqBins = this.fftSize / 2;\r\n        this.timeStep = 1000 / (this.sampleRate / this.fftSize);  // in ms\r\n        this.freqStep = this.maxFreq / this.freqBins;\r\n\r\n        this.initialiseAudioNodes();\r\n\r\n        this.defaults = {\r\n            fftSize: 256,\r\n            volumeFilterMin: -60,\r\n            volumeFilterMax: -30,\r\n            frequencyFilterMin: 550,\r\n            frequencyFilterMax: 550,\r\n            volumeThreshold: 200\r\n        };\r\n        this.volumeFilterMin = volumeFilterMin;  // in dB\r\n        this.volumeFilterMax = volumeFilterMax;\r\n        this.frequencyFilterMin = frequencyFilterMin;  // in Hz\r\n        this.frequencyFilterMax = frequencyFilterMax;\r\n        this.volumeThreshold = volumeThreshold;  // in range [0-255]\r\n        this.decoder = decoder;\r\n\r\n        this.notStarted = true;\r\n        this.flushTime = 500;  // how long to wait before pushing data to the decoder if e.g. you have a very long pause\r\n\r\n        this.input = undefined;  // current state: undefined, \"mic\", \"file\"\r\n    }\r\n\r\n    /**\r\n     * Set the minimum threshold on the volume filter. i.e. the minimum volume considered to be a signal.\r\n     * Input validation is done to set a sensible default on non-numeric input and clamp the maximum to be zero.\r\n     * The volumFilterMax property is also set by this to be no less than the minimum.\r\n     * Calls the volumeFilterCallback with the new min and max.\r\n     * @param {number} v - the minimum volume in dB (-ve).\r\n     */\r\n    set volumeFilterMin(v) {\r\n        if (isNaN(v)) v = this.defaults.volumeFilterMin;\r\n        // v is in dB and therefore -ve\r\n        v = Math.min(0, v);\r\n        this.analyserNode.minDecibels = v;\r\n        this.analyserNode.maxDecibels = Math.max(this.analyserNode.maxDecibels, v);\r\n        this.volumeFilterCallback({min: this.analyserNode.minDecibels, max: this.analyserNode.maxDecibels});\r\n    }\r\n\r\n    get volumeFilterMin() {\r\n        return this.analyserNode.minDecibels;\r\n    }\r\n\r\n    /**\r\n     * Set the maximum threshold on the volume filter. i.e. the maximum volume considered to be a signal.\r\n     * Input validation is done to set a sensible default on non-numeric input and clamp the maximum to be zero.\r\n     * The volumFilterMin property is also set by this to be no more than the maximum.\r\n     * Calls the volumeFilterCallback with the new min and max.\r\n     * @param {number} v - the maximum volume in dB (-ve).\r\n     */\r\n    set volumeFilterMax(v) {\r\n        if (isNaN(v)) v = this.defaults.volumeFilterMax;\r\n        // v is in dB and therefore -ve\r\n        v = Math.min(0, v);\r\n        this.analyserNode.maxDecibels = v;\r\n        this.analyserNode.minDecibels = Math.min(this.analyserNode.minDecibels, v);\r\n        this.volumeFilterCallback({min: this.analyserNode.minDecibels, max: this.analyserNode.maxDecibels});\r\n    }\r\n\r\n    get volumeFilterMax() {\r\n        return this.analyserNode.maxDecibels;\r\n    }\r\n\r\n    /**\r\n     * Set the minimum threshold on the frequency filter. i.e. the minimum frequency to be considered.\r\n     * Input validation is done to set a sensible default on non-numeric input and the value is clamped to be between zero and the current maximum frequency.\r\n     * The actual minimum will be the minimum frequency of the frequency bin the chosen frequency lies in.\r\n     * Calls the frequencyFilterCallback with the new min and max.\r\n     * @param {number} v - the minimum frequency in Hz.\r\n     */\r\n    set frequencyFilterMin(f) {\r\n        if (isNaN(f)) f = this.defaults.frequencyFilterMin;\r\n        f = Math.min(Math.max(f, 0), this.maxFreq);\r\n        this._filterBinLow = Math.min(Math.max(Math.round(f / this.freqStep), 1), this.freqBins);  // at least 1 to avoid DC component\r\n        this._filterBinHigh = Math.max(this._filterBinLow, this._filterBinHigh);  // high must be at least low\r\n        this.frequencyFilterCallback({min: this.frequencyFilterMin, max: this.frequencyFilterMax});\r\n    }\r\n\r\n    get frequencyFilterMin() {\r\n        return Math.max(this._filterBinLow * this.freqStep, 0);\r\n    }\r\n\r\n    /**\r\n     * Set the maximum threshold on the frequency filter. i.e. the maximum frequency to be considered.\r\n     * Input validation is done to set a sensible default on non-numeric input and the value is clamped to be between zero and the current maximum frequency.\r\n     * The actual minimum will be the maximum frequency of the frequency bin the chosen frequency lies in.\r\n     * Calls the frequencyFilterCallback with the new min and max.\r\n     * @param {number} v - the maximum frequency in Hz.\r\n     */\r\n    set frequencyFilterMax(f) {\r\n        if (isNaN(f)) f = this.defaults.frequencyFilterMin;\r\n        f = Math.min(Math.max(f, 0), this.maxFreq);\r\n        this._filterBinHigh = Math.min(Math.max(Math.round(f / this.freqStep), 1), this.freqBins);  // at least 1 to avoid DC component\r\n        this._filterBinLow = Math.min(this._filterBinHigh, this._filterBinLow);  // low must be at most high\r\n        this.frequencyFilterCallback({min: this.frequencyFilterMin, max: this.frequencyFilterMax});\r\n    }\r\n\r\n    get frequencyFilterMax() {\r\n        return Math.min(this._filterBinHigh * this.freqStep, this.maxFreq);\r\n    }\r\n\r\n    /**\r\n     * Set the minimum and maximum frequency filter values to be closely surrounding a specific frequency.\r\n     * @param {number} f - the frequency to target.\r\n     */\r\n    set frequencyFilter(f) {\r\n        this.frequencyFilterMin = f;\r\n        this.frequencyFilterMax = f;\r\n    }\r\n\r\n    /**\r\n     * Set the threshold used to determine if an anlaysed region has sufficient sound to be \"on\".\r\n     * Input validation is done to set a sensible default on non-numeric input and the value is clamped to be between zero and 255.\r\n     * @param {number} v - threshold volume [0, 255]\r\n     */\r\n    set volumeThreshold(v) {\r\n        if (isNaN(v)) v = this.defaults.volumeThreshold;\r\n        this._volumeThreshold = Math.min(Math.max(Math.round(v), 0), 255);\r\n        this.volumeThresholdCallback(this._volumeThreshold);\r\n    }\r\n\r\n    get volumeThreshold() {\r\n        return this._volumeThreshold;\r\n    }\r\n\r\n    /**\r\n     * @access private\r\n     */\r\n    initialiseAudioNodes() {\r\n        // set up a javascript node (BUFFER_SIZE, NUM_INPUTS, NUM_OUTPUTS)\r\n        this.jsNode = this.audioContext.createScriptProcessor(this.fftSize, 1, 1); // buffer size can be 256, 512, 1024, 2048, 4096, 8192 or 16384\r\n        // set the event handler for when the buffer is full\r\n        this.jsNode.onaudioprocess = this.processSound.bind(this);\r\n        // set up an analyserNode\r\n        this.analyserNode = this.audioContext.createAnalyser();\r\n        this.analyserNode.smoothingTimeConstant = 0; // no mixing with the previous frame\r\n        this.analyserNode.fftSize = this.fftSize; // can be 32 to 2048 in webkit\r\n        this.frequencyData = new Uint8Array(this.freqBins); // create an arrray of the right size for the frequency data\r\n    }\r\n\r\n    /**\r\n     * Start the decoder listening to the microphone.\r\n     * Calls micSuccessCallback or micErrorCallback on success or error.\r\n     */\r\n    startListening() {\r\n        this.stop();\r\n        navigator.mediaDevices.getUserMedia({audio: true, video: false})\r\n        .then(function(stream) {\r\n            // create an audio node from the stream\r\n            this.sourceNode = this.audioContext.createMediaStreamSource(stream);\r\n            this.input = \"mic\";\r\n            // connect nodes but don't connect mic to audio output to avoid feedback\r\n            this.sourceNode.connect(this.analyserNode);\r\n            this.jsNode.connect(this.audioContext.destination);\r\n            this.micSuccessCallback();\r\n        }.bind(this))\r\n        .catch(function(error) {\r\n            this.input = undefined;\r\n            this.micErrorCallback(error);\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Load audio data from an ArrayBuffer. Use a FileReader to load from a file.\r\n     * Calls fileLoadCallback or fileErrorCallback on success or error.\r\n     * @param {ArrayBuffer} arrayBuffer \r\n     */\r\n    loadArrayBuffer(arrayBuffer) {\r\n        // by separating loading (decoding) and playing, the playing can be done multiple times\r\n        this.audioContext.decodeAudioData(\r\n            arrayBuffer,\r\n            function(audioBuffer) {\r\n                this.fileAudioBuffer = audioBuffer;\r\n                this.fileLoadCallback(audioBuffer);\r\n            }.bind(this),\r\n            function(error) {\r\n                this.fileAudioBuffer = undefined;\r\n                this.fileErrorCallback(error);\r\n            }.bind(this)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Play a loaded audio file (through speakers) and decode it.\r\n     * Calls EOFCallback when buffer ends.\r\n     */\r\n    playArrayBuffer() {\r\n        this.stop();\r\n        // make BufferSource node\r\n        this.sourceNode = this.audioContext.createBufferSource();\r\n        this.sourceNode.buffer = this.fileAudioBuffer;\r\n        this.sourceNode.onended = function() {\r\n            this.stop();\r\n            this.EOFCallback();\r\n        }.bind(this);\r\n        // connect nodes\r\n        this.jsNode.connect(this.audioContext.destination);\r\n        this.sourceNode.connect(this.analyserNode);\r\n        this.sourceNode.connect(this.audioContext.destination);\r\n        this.input = \"file\";\r\n        // play\r\n        this.sourceNode.start();\r\n    }\r\n\r\n    /**\r\n     * Stop listening.\r\n     */\r\n    stop() {\r\n        if (this.input === undefined) {\r\n            return;\r\n        }\r\n        if (this.input === \"file\") {\r\n            this.sourceNode.stop();\r\n            this.sourceNode.disconnect(this.audioContext.destination);\r\n        }\r\n        this.sourceNode.disconnect(this.analyserNode);\r\n        this.jsNode.disconnect(this.audioContext.destination);\r\n        this.flush();\r\n        this.decoder.flush();\r\n        this.input = undefined;\r\n    }\r\n\r\n    /**\r\n     * This ScriptProcessorNode is called when it is full, we then actually look at the data in the analyserNode node to measure the volume in the frequency band of interest. We don't actually use the input or output of the ScriptProcesorNode.\r\n     * @access private\r\n     */\r\n    processSound() {\r\n        // get the data from the analyserNode node and put into frequencyData\r\n        this.analyserNode.getByteFrequencyData(this.frequencyData);\r\n\r\n        // find the average volume in the filter region\r\n        var filterRegionVolume = 0;\r\n        for (var i = this._filterBinLow; i <= this._filterBinHigh; i++) {\r\n            filterRegionVolume += this.frequencyData[i];\r\n        }\r\n        filterRegionVolume /= 1.0 * (this._filterBinHigh - this._filterBinLow + 1);\r\n\r\n        // record the data\r\n        var isOn = filterRegionVolume >= this._volumeThreshold;\r\n        this.recordOnOrOff(isOn);\r\n\r\n        this.spectrogramCallback({\r\n            frequencyData: this.frequencyData,\r\n            frequencyStep: this.freqStep,\r\n            timeStep: this.timeStep,\r\n            filterBinLow: this._filterBinLow,\r\n            filterBinHigh: this._filterBinHigh,\r\n            filterRegionVolume: filterRegionVolume,\r\n            isOn: isOn\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called each tick with whether the sound is judged to be on or off. If a change from on to off or off to on is detected then the number of ticks of the segment is passed to the decoder.\r\n     * @access private\r\n     */\r\n    recordOnOrOff(soundIsOn) {\r\n        if (this.notStarted) {\r\n            if (!soundIsOn) {\r\n                // wait until we hear something\r\n                return;\r\n            } else {\r\n                this.notStarted = false;\r\n                this.lastSoundWasOn = true;\r\n                this.ticks = 0;\r\n            }\r\n        }\r\n        if (this.lastSoundWasOn === soundIsOn) {\r\n            // accumulating an on or an off\r\n            this.ticks++;\r\n            if (this.ticks * this.timeStep > this.flushTime) {\r\n                // then it's e.g. a very long pause, so flush it through to decoder and keep counting\r\n                this.flush(soundIsOn);\r\n                this.ticks = 0;\r\n            }\r\n        } else {\r\n            // we've just changed from on to off or vice versa\r\n            this.flush(!soundIsOn);  // flush the previous segment\r\n            this.lastSoundWasOn = soundIsOn;\r\n            this.ticks = 1;  // at this moment we just saw the first tick of the new segment\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Flush the current ticks to the decoder. Parameter is whether the ticks represent sound (on) or not.\r\n     */\r\n    flush(on = this.lastSoundWasOn) {\r\n        this.decoder.addTiming((on ? 1 : -1) * this.ticks * this.timeStep);\r\n    }\r\n\r\n    // empty callbacks to avoid errors\r\n    spectrogramCallback(jsonData) { }\r\n    frequencyFilterCallback(jsonData) { }\r\n    volumeFilterCallback(jsonData) { }\r\n    volumeThresholdCallback(volume) { }\r\n    micSuccessCallback() { }\r\n    micErrorCallback(error) { }\r\n    fileLoadCallback(audioBuffer) { }\r\n    fileErrorCallback(error) { }\r\n    EOFCallback() { }\r\n}\r\n\r\n// TODO: add to constructor so we can call the micErrorCallback\r\nif (navigator.mediaDevices) {\r\n    // Shim from https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\r\n    if (navigator.mediaDevices.getUserMedia === undefined) {\r\n        navigator.mediaDevices.getUserMedia = function(constraints) {\r\n            // First get ahold of the legacy getUserMedia, if present\r\n            var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n            // Some browsers just don't implement it - return a rejected promise with an error      // to keep a consistent interface\r\n            if (!getUserMedia) {\r\n                return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\r\n            }\r\n            // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\r\n            return new Promise(function(resolve, reject) {\r\n                getUserMedia.call(navigator, constraints, resolve, reject);\r\n            });\r\n        }\r\n    }\r\n} else {\r\n    console.log('No mediaDevices: loaded from insecure site?');\r\n}\r\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-listener.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 258,
    "kind": "class",
    "name": "MorseListener",
    "memberof": "src/morse-pro-listener.js",
    "static": true,
    "longname": "src/morse-pro-listener.js~MorseListener",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-listener.js",
    "importStyle": "MorseListener",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 259,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fftSize",
        "description": "Size of the discrete Fourier transform to use. Must be a power of 2 >= 256 (defaults to 256). A smaller fftSize gives better time resolution but worse frequency resolution."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "-60",
        "defaultRaw": -60,
        "name": "volumeFilterMin",
        "description": "Sound less than this volume (in dB) is ignored."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "-30",
        "defaultRaw": -30,
        "name": "volumeFilterMax",
        "description": "Sound greater than this volume (in dB) is ignored."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "550",
        "defaultRaw": 550,
        "name": "frequencyFilterMin",
        "description": "Sound less than this frequency (in Hz) is ignored."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "550",
        "defaultRaw": 550,
        "name": "frequencyFilterMax",
        "description": "Sound greater than this frequency (in Hz) is ignored."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "220",
        "defaultRaw": 220,
        "name": "volumeThreshold",
        "description": "If the volume is greater than this then the signal is taken as \"on\" (part of a dit or dah) (range 0-255)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "decoder",
        "description": "An instance of a configured decoder class."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "spectrogramCallback",
        "description": "Called every time fftSize samples are read.\nCalled with a dictionary parameter:\n{\nfrequencyData: output of the DFT (the real values including DC component)\nfrequencyStep: frequency resolution in Hz\ntimeStep: time resolution in Hz\nfilterBinLow: index of the lowest frequency bin being analysed\nfilterBinHigh: index of the highest frequency bin being analysed\nfilterRegionVolume: volume in the analysed region\nisOn: whether the analysis detected a signal or not\n}"
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "frequencyFilterCallback",
        "description": "Called when the frequency filter parameters change.\nCalled with a dictionary parameter:\n{\nmin: lowest frequency in Hz\nmax: highest frequency in Hz\n}\nThe frequencies may well be different to that which is set as they are quantised."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "volumeFilterCallback",
        "description": "Called when the volume filter parameters change.\nCalled with a dictionary parameter:\n{\nmin: low volume (in dB)\nmax: high volume (in dB)\n}\nIf the set volumes are not numeric or out of range then the callback will return in range numbers."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "volumeThresholdCallback",
        "description": "Called with a single number as the argument when the volume filter threshold changes."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "micSuccessCallback",
        "description": "Called when the microphone has successfully been connected."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "micErrorCallback",
        "description": "Called with the error as the argument if there is an error connecting to the microphone."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "fileLoadCallback",
        "description": "Called with the AudioBuffer object as the argument when a file has successfully been loaded (and decoded)."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "fileErrorCallback",
        "description": "Called with the error as the argument if there is an error in decoding a file."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "EOFCallback",
        "description": "Called when the playback of a file ends."
      }
    ]
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "audioContext",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#audioContext",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "fftSize",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#fftSize",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "sampleRate",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#sampleRate",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "member",
    "name": "maxFreq",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#maxFreq",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "freqBins",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#freqBins",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "timeStep",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#timeStep",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "freqStep",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#freqStep",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "defaults",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#defaults",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "{\"fftSize\": number, \"volumeFilterMin\": *, \"volumeFilterMax\": *, \"frequencyFilterMin\": number, \"frequencyFilterMax\": number, \"volumeThreshold\": number}"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "decoder",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#decoder",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "notStarted",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#notStarted",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "flushTime",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#flushTime",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "input",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#input",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "set",
    "name": "volumeFilterMin",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#volumeFilterMin",
    "access": "public",
    "description": "Set the minimum threshold on the volume filter. i.e. the minimum volume considered to be a signal.\nInput validation is done to set a sensible default on non-numeric input and clamp the maximum to be zero.\nThe volumFilterMax property is also set by this to be no less than the minimum.\nCalls the volumeFilterCallback with the new min and max.",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "the minimum volume in dB (-ve)."
      }
    ]
  },
  {
    "__docId__": 287,
    "kind": "get",
    "name": "volumeFilterMin",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#volumeFilterMin",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "set",
    "name": "volumeFilterMax",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#volumeFilterMax",
    "access": "public",
    "description": "Set the maximum threshold on the volume filter. i.e. the maximum volume considered to be a signal.\nInput validation is done to set a sensible default on non-numeric input and clamp the maximum to be zero.\nThe volumFilterMin property is also set by this to be no more than the maximum.\nCalls the volumeFilterCallback with the new min and max.",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "the maximum volume in dB (-ve)."
      }
    ]
  },
  {
    "__docId__": 289,
    "kind": "get",
    "name": "volumeFilterMax",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#volumeFilterMax",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "set",
    "name": "frequencyFilterMin",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#frequencyFilterMin",
    "access": "public",
    "description": "Set the minimum threshold on the frequency filter. i.e. the minimum frequency to be considered.\nInput validation is done to set a sensible default on non-numeric input and the value is clamped to be between zero and the current maximum frequency.\nThe actual minimum will be the minimum frequency of the frequency bin the chosen frequency lies in.\nCalls the frequencyFilterCallback with the new min and max.",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "the minimum frequency in Hz."
      }
    ]
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "_filterBinLow",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#_filterBinLow",
    "access": "private",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "_filterBinHigh",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#_filterBinHigh",
    "access": "private",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "get",
    "name": "frequencyFilterMin",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#frequencyFilterMin",
    "access": "public",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "set",
    "name": "frequencyFilterMax",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#frequencyFilterMax",
    "access": "public",
    "description": "Set the maximum threshold on the frequency filter. i.e. the maximum frequency to be considered.\nInput validation is done to set a sensible default on non-numeric input and the value is clamped to be between zero and the current maximum frequency.\nThe actual minimum will be the maximum frequency of the frequency bin the chosen frequency lies in.\nCalls the frequencyFilterCallback with the new min and max.",
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "the maximum frequency in Hz."
      }
    ]
  },
  {
    "__docId__": 297,
    "kind": "get",
    "name": "frequencyFilterMax",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#frequencyFilterMax",
    "access": "public",
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "set",
    "name": "frequencyFilter",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#frequencyFilter",
    "access": "public",
    "description": "Set the minimum and maximum frequency filter values to be closely surrounding a specific frequency.",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "the frequency to target."
      }
    ]
  },
  {
    "__docId__": 301,
    "kind": "set",
    "name": "volumeThreshold",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#volumeThreshold",
    "access": "public",
    "description": "Set the threshold used to determine if an anlaysed region has sufficient sound to be \"on\".\nInput validation is done to set a sensible default on non-numeric input and the value is clamped to be between zero and 255.",
    "lineNumber": 210,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "threshold volume [0, 255]"
      }
    ]
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "_volumeThreshold",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#_volumeThreshold",
    "access": "private",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "get",
    "name": "volumeThreshold",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#volumeThreshold",
    "access": "public",
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "initialiseAudioNodes",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#initialiseAudioNodes",
    "access": "private",
    "description": "",
    "lineNumber": 223,
    "params": [],
    "return": null
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "jsNode",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#jsNode",
    "access": "public",
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "analyserNode",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#analyserNode",
    "access": "public",
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "frequencyData",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#frequencyData",
    "access": "public",
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "startListening",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#startListening",
    "access": "public",
    "description": "Start the decoder listening to the microphone.\nCalls micSuccessCallback or micErrorCallback on success or error.",
    "lineNumber": 239,
    "params": [],
    "return": null
  },
  {
    "__docId__": 309,
    "kind": "member",
    "name": "sourceNode",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#sourceNode",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "loadArrayBuffer",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#loadArrayBuffer",
    "access": "public",
    "description": "Load audio data from an ArrayBuffer. Use a FileReader to load from a file.\nCalls fileLoadCallback or fileErrorCallback on success or error.",
    "lineNumber": 262,
    "params": [
      {
        "nullable": null,
        "types": [
          "ArrayBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "arrayBuffer",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "fileAudioBuffer",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#fileAudioBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "playArrayBuffer",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#playArrayBuffer",
    "access": "public",
    "description": "Play a loaded audio file (through speakers) and decode it.\nCalls EOFCallback when buffer ends.",
    "lineNumber": 281,
    "params": [],
    "return": null
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "stop",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#stop",
    "access": "public",
    "description": "Stop listening.",
    "lineNumber": 302,
    "params": [],
    "return": null
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "processSound",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#processSound",
    "access": "private",
    "description": "This ScriptProcessorNode is called when it is full, we then actually look at the data in the analyserNode node to measure the volume in the frequency band of interest. We don't actually use the input or output of the ScriptProcesorNode.",
    "lineNumber": 321,
    "params": [],
    "return": null
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "recordOnOrOff",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#recordOnOrOff",
    "access": "private",
    "description": "Called each tick with whether the sound is judged to be on or off. If a change from on to off or off to on is detected then the number of ticks of the segment is passed to the decoder.",
    "lineNumber": 351,
    "params": [
      {
        "name": "soundIsOn",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 323,
    "kind": "member",
    "name": "lastSoundWasOn",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#lastSoundWasOn",
    "access": "public",
    "description": null,
    "lineNumber": 358,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 324,
    "kind": "member",
    "name": "ticks",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#ticks",
    "access": "public",
    "description": null,
    "lineNumber": 359,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "flush",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#flush",
    "access": "public",
    "description": "Flush the current ticks to the decoder. Parameter is whether the ticks represent sound (on) or not.",
    "lineNumber": 381,
    "params": [
      {
        "name": "on",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "spectrogramCallback",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#spectrogramCallback",
    "access": "public",
    "description": null,
    "lineNumber": 386,
    "undocument": true,
    "params": [
      {
        "name": "jsonData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "frequencyFilterCallback",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#frequencyFilterCallback",
    "access": "public",
    "description": null,
    "lineNumber": 387,
    "undocument": true,
    "params": [
      {
        "name": "jsonData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "volumeFilterCallback",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#volumeFilterCallback",
    "access": "public",
    "description": null,
    "lineNumber": 388,
    "undocument": true,
    "params": [
      {
        "name": "jsonData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "volumeThresholdCallback",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#volumeThresholdCallback",
    "access": "public",
    "description": null,
    "lineNumber": 389,
    "undocument": true,
    "params": [
      {
        "name": "volume",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "micSuccessCallback",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#micSuccessCallback",
    "access": "public",
    "description": null,
    "lineNumber": 390,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "micErrorCallback",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#micErrorCallback",
    "access": "public",
    "description": null,
    "lineNumber": 391,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "fileLoadCallback",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#fileLoadCallback",
    "access": "public",
    "description": null,
    "lineNumber": 392,
    "undocument": true,
    "params": [
      {
        "name": "audioBuffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "fileErrorCallback",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#fileErrorCallback",
    "access": "public",
    "description": null,
    "lineNumber": 393,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "EOFCallback",
    "memberof": "src/morse-pro-listener.js~MorseListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-listener.js~MorseListener#EOFCallback",
    "access": "public",
    "description": null,
    "lineNumber": 394,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 338,
    "kind": "file",
    "name": "src/morse-pro-message.js",
    "content": "/*!\nThis code is © Copyright Stephen C. Phillips, 2018.\nEmail: steve@scphillips.com\n*/\n/*\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\nYou may not use this work except in compliance with the Licence.\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the Licence for the specific language governing permissions and limitations under the Licence.\n*/\n\n/**\n * Class for conveniently translating to and from Morse code.\n * Deals with error handling.\n * Works out if the input is Morse code or not.\n *\n * @example\n * import MorseMessage from 'morse-pro-message';\n * import MorseCWWave from 'morse-pro-cw-wave';\n * let morseCWWave = new MorseCWWave();\n * let morseMessage = new MorseMessage(morseCWWave);\n * let output;\n * try {\n *     output = morseMessage.translate(\"abc\");\n * catch (ex) {\n *     // output will be best attempt at translation\n *     // to understand the detail of where the error is, look at morseMessage.errors or display getErrorString()\n * }\n * if (morseMessage.inputWasMorse) {\n *     // do something\n * }\n * // get the Morse code waveform\n * let wave = morseMessage.wave;\n */\nexport default class MorseMessage {\n    constructor(morseCWWave) {\n        this.morseCWWave = morseCWWave;\n        // this.player = morsePlayer;\n        this.rawInput = undefined;\n        this.inputWasMorse = undefined;\n        this.text = undefined;\n        this.textTokens = undefined;\n        this.morse = undefined;\n        this.morseTokens = undefined;\n        this.errors = undefined;\n        this.hasError = undefined;\n        // this.volumes = undefined;\n        // this.frequencies = undefined;\n    }\n\n    /**\n     * Translate to or from Morse.\n     * @param {string} input - alphanumeric text or morse code to translate\n     * @param {boolean} isMorse - whether the input is Morse code or not (if not set then the looksLikeMorse method will be used)\n     * @throws Error if there was something untranslatable\n     */\n    translate(input, isMorse) {\n        if (typeof isMorse === \"undefined\") {\n            // make a guess: could be wrong if someone wants to translate \".\" into Morse for instance\n            isMorse = this.morseCWWave.looksLikeMorse(input);\n        }\n\n        let ret;\n        if (isMorse) {\n            ret = this.loadMorse(input);\n        } else {\n            ret = this.loadText(input);\n        }\n\n        if (this.hasError) {\n            throw new Error(\"Error in input: \" + '[' + input + ']');\n        }\n\n        return ret;\n    }\n\n    _completeFields(d) {\n        this.morseTokens = d.morse;\n        this.textTokens = d.text;\n        this.errors = d.error;\n        this.hasError = d.hasError; \n        this.text = this.morseCWWave.displayText(this.textTokens);\n        this.morse = this.morseCWWave.displayMorse(this.morseTokens);\n    }\n\n    loadMorse(input) {\n        this.rawInput = input;\n        this.inputWasMorse = true;\n        this._completeFields(this.morseCWWave.morse2text(input));\n        return this.text;\n    }\n\n    loadText(input) {\n        this.rawInput = input;\n        this.inputWasMorse = false;\n        this._completeFields(this.morseCWWave.text2morse(input));\n        return this.morse;\n    }\n\n    cleanText() {\n        this._completeFields(this.morseCWWave.text2morseClean(this.text));\n        return this.text;\n    }\n\n    get timings() {\n        return this.morseCWWave.morseTokens2timing(this.morseTokens);\n    }\n\n    get wave() {\n        return this.morseCWWave.getSample(this.timings, 50);\n    }\n\n    /**\n     * \n     * @param {String} prefix - this is placed before each input token that had an error\n     * @param {String} suffix - this is placed after each input token that had an error\n     * @param {Map} escapeMap - any token matching a key in this map is replaced by the value (e.g. {'>': '&gt;', '<': '&lt;'})\n     */\n    getInputErrorString(prefix, suffix, escapeMap={}) {\n        if (this.inputWasMorse) {\n            return this.getMorseErrorString(prefix, suffix);\n        } else {\n            return this.getTextErrorString(prefix, suffix, escapeMap);\n        }\n    }\n\n    getOutputErrorString(prefix, suffix, escapeMap={}) {\n        if (!this.inputWasMorse) {\n            return this.getMorseErrorString(prefix, suffix);\n        } else {\n            return this.getTextErrorString(prefix, suffix, escapeMap);\n        }\n    }\n\n    getTextErrorString(prefix, suffix, escapeMap={}) {\n        return this.morseCWWave.displayTextErrors(this.textTokens, escapeMap, this.errors, prefix, suffix);\n    }\n\n    getMorseErrorString(prefix, suffix) {\n        return this.morseCWWave.displayMorseErrors(this.morseTokens, this.errors, prefix, suffix);\n    }\n}\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-message.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 339,
    "kind": "class",
    "name": "MorseMessage",
    "memberof": "src/morse-pro-message.js",
    "static": true,
    "longname": "src/morse-pro-message.js~MorseMessage",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-message.js",
    "importStyle": "MorseMessage",
    "description": "Class for conveniently translating to and from Morse code.\nDeals with error handling.\nWorks out if the input is Morse code or not.",
    "examples": [
      "import MorseMessage from 'morse-pro-message';\nimport MorseCWWave from 'morse-pro-cw-wave';\nlet morseCWWave = new MorseCWWave();\nlet morseMessage = new MorseMessage(morseCWWave);\nlet output;\ntry {\n    output = morseMessage.translate(\"abc\");\ncatch (ex) {\n    // output will be best attempt at translation\n    // to understand the detail of where the error is, look at morseMessage.errors or display getErrorString()\n}\nif (morseMessage.inputWasMorse) {\n    // do something\n}\n// get the Morse code waveform\nlet wave = morseMessage.wave;"
    ],
    "lineNumber": 36,
    "interface": false
  },
  {
    "__docId__": 340,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 341,
    "kind": "member",
    "name": "morseCWWave",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#morseCWWave",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "member",
    "name": "rawInput",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#rawInput",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "member",
    "name": "inputWasMorse",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#inputWasMorse",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "member",
    "name": "text",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#text",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "member",
    "name": "textTokens",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#textTokens",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "member",
    "name": "morse",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#morse",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 347,
    "kind": "member",
    "name": "morseTokens",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#morseTokens",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 348,
    "kind": "member",
    "name": "errors",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#errors",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 349,
    "kind": "member",
    "name": "hasError",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#hasError",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "translate",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#translate",
    "access": "public",
    "description": "Translate to or from Morse.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "alphanumeric text or morse code to translate"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isMorse",
        "description": "whether the input is Morse code or not (if not set then the looksLikeMorse method will be used)"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Error if there was something untranslatable"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "_completeFields",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#_completeFields",
    "access": "private",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "d",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "loadMorse",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#loadMorse",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "loadText",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#loadText",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "cleanText",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#cleanText",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "get",
    "name": "timings",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#timings",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 366,
    "kind": "get",
    "name": "wave",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#wave",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "getInputErrorString",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#getInputErrorString",
    "access": "public",
    "description": "",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": "this is placed before each input token that had an error"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "suffix",
        "description": "this is placed after each input token that had an error"
      },
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": false,
        "name": "escapeMap",
        "description": "any token matching a key in this map is replaced by the value (e.g. {'>': '&gt;', '<': '&lt;'})"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "getOutputErrorString",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#getOutputErrorString",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "suffix",
        "types": [
          "*"
        ]
      },
      {
        "name": "escapeMap",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "getTextErrorString",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#getTextErrorString",
    "access": "public",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "suffix",
        "types": [
          "*"
        ]
      },
      {
        "name": "escapeMap",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "getMorseErrorString",
    "memberof": "src/morse-pro-message.js~MorseMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-message.js~MorseMessage#getMorseErrorString",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "suffix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "file",
    "name": "src/morse-pro-player-waa-light.js",
    "content": "/*!\r\nThis code is © Copyright Stephen C. Phillips, 2018.\r\nEmail: steve@scphillips.com\r\n*/\r\n/*\r\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\r\nYou may not use this work except in compliance with the Licence.\r\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\r\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the Licence for the specific language governing permissions and limitations under the Licence.\r\n*/\r\n\r\nimport MorsePlayerWAA from './morse-pro-player-waa';\r\nimport morseAudioContext from './morse-pro-audiocontext';\r\n\r\n/**\r\n * Web browser sound player using Web Audio API.\r\n * Extends MorsePlayerWAA to provide callbacks when the sound goes on or off.\r\n * Can be used to turn a light on or off in time with the Morse sound.\r\n * The callbacks have an error of +/- 2.6ms\r\n *\r\n * @example\r\n * import MorseCW from 'morse-pro-cw';\r\n * import MorsePlayerWAALight from 'morse-pro-player-waa-light';\r\n * var morseCW = new MorseCW();\r\n * var tokens = morseCW.text2morse(\"abc\");\r\n * var timings = morseCW.morseTokens2timing(tokens);\r\n * var morsePlayerWAALight = new MorsePlayerWAALight();\r\n * morsePlayerWAALight.soundOnCallback = lightOn;\r\n * morsePlayerWAALight.soundOffCallback = lightOff;\r\n * morsePlayerWAALight.soundStoppedCallback = soundStopped;\r\n * morsePlayerWAALight.muteAudio(true);\r\n * morsePlayerWAALight.load({timings});\r\n * morsePlayerWAA.playFromStart();\r\n */\r\n\r\nconst SMALL_AMPLITUDE = 0.1;  // below this, we consider the sound to be off\r\n\r\nexport default class MorsePlayerWAALight extends MorsePlayerWAA {\r\n    /**\r\n     * @param {Object} params - lots of optional parameters.\r\n     * @param {number} params.defaultFrequency - fallback frequency (Hz) to use if the loaded sequence does not define any.\r\n     * @param {number} params.startPadding - number of ms to wait before playing first note of initial sequence.\r\n     * @param {number} params.endPadding - number of ms to wait at the end of a sequence before playing the next one (or looping).\r\n     * @param {number} params.volume - volume of Morse. Takes range [0,1].\r\n     * @param {function()} params.sequenceStartCallback - function to call each time the sequence starts.\r\n     * @param {function()} params.sequenceEndingCallback - function to call when the sequence is nearing the end.\r\n     * @param {function()} params.sequenceEndCallback - function to call when the sequence has ended.\r\n     * @param {function()} params.soundStoppedCallback - function to call when the sequence stops.\r\n     * @param {function()} params.soundOnCallback - function to call when a note starts.\r\n     * @param {function()} params.soundOffCallback - function to call when a note stops.\r\n     * @param {string} params.onSample - URL of the sound file to play at the start of a note.\r\n     * @param {string} params.offSample - URL of the sound file to play at the end of a note.\r\n     * @param {string} params.playMode - play mode, either \"sine\" or \"sample\".\r\n     */\r\n    constructor({defaultFrequency, startPadding, endPadding, volume, sequenceStartCallback, sequenceEndingCallback, sequenceEndCallback, soundStoppedCallback, soundOnCallback, soundOffCallback, onSample, offSample, playMode} = {}) {\r\n        super({defaultFrequency, startPadding, endPadding, volume, sequenceStartCallback, sequenceEndingCallback, sequenceEndCallback, soundStoppedCallback, onSample, offSample, playMode});\r\n        if (soundOnCallback !== undefined) this.soundOnCallback = soundOnCallback;\r\n        if (soundOffCallback !== undefined) this.soundOffCallback = soundOffCallback;\r\n        this._wasOn = false;\r\n        this._count = 0;\r\n        if (playMode === 'sample') {\r\n            console.log('WARNING: The light does not yet work when using \"sample\" play mode');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set up the audio graph, connecting the splitter node to a JSNode in order to analyse the waveform\r\n     * @access private\r\n     */\r\n    _initialiseAudio() {\r\n        // TODO: have this create its own oscillators so that we can get the light signal when using samples\r\n        // TODO: or just adapt the super class to call soundOn and soundOff callbacks based on the timings - not sure why I didn't do that in the first place? Could be to do with the higher precision of the sound API?!\r\n        super._initialiseAudio();\r\n        if (this.jsNode) {\r\n            // if we have already called this method then must make sure to disconnect the old node graph first\r\n            this.jsNode.disconnect();\r\n        }\r\n        let ac = morseAudioContext.getAudioContext();\r\n\r\n        this.muteLightNode = ac.createGain();  // used to temporarily mute the light (e.g. if just sound is needed)\r\n\r\n        this.jsNode = ac.createScriptProcessor(256, 1, 1);\r\n        this.jsNode.connect(ac.destination);  // otherwise Chrome ignores it\r\n        this.jsNode.onaudioprocess = this._processSound.bind(this);\r\n\r\n        this.splitterNode.connect(this.muteLightNode);\r\n        this.muteLightNode.connect(this.jsNode);\r\n\r\n        this.muteLight(false);\r\n    }\r\n\r\n    /**\r\n     * @access private\r\n     */\r\n    _processSound(event) {\r\n        var input = event.inputBuffer.getChannelData(0);\r\n        var sum = 0;\r\n        for (var i = 0; i < input.length; i++) {\r\n            sum += Math.abs(input[i]) > SMALL_AMPLITUDE;\r\n        }\r\n        var on = (sum > 128);  // is more than half the buffer non-zero?\r\n        if (on && !this._wasOn) {\r\n            this._on();\r\n        } else if (!on && this._wasOn) {\r\n            this._off();\r\n        }\r\n        this._wasOn = on;\r\n    }\r\n\r\n    /**\r\n     * @access private\r\n     */\r\n    _on() {\r\n        this.soundOnCallback();\r\n    }\r\n\r\n    /**\r\n     * @access private\r\n     */\r\n    _off() {\r\n        this.soundOffCallback();\r\n    }\r\n\r\n    muteLight(mute) {\r\n        let now = morseAudioContext.getAudioContext().currentTime;\r\n        this.muteLightNode.gain.setValueAtTime(mute ? 0 : 1, now);\r\n    }\r\n\r\n    /**\r\n     * @returns {number} representing this audio player type: 5\r\n     * @override\r\n     */\r\n    get audioType() {\r\n        return 5;\r\n        // 5: Web Audio API using oscillators and light control\r\n        // 4: Web Audio API using oscillators\r\n        // 3: Audio element using media stream worker (using PCM audio data)\r\n        // 2: Flash (using PCM audio data)\r\n        // 1: Web Audio API with webkit and native support (using PCM audio data)\r\n        // 0: Audio element using Mozilla Audio Data API (https://wiki.mozilla.org/Audio_Data_API) (using PCM audio data)\r\n        // -1: no audio support\r\n    }\r\n\r\n    // empty callbacks in case user does not define any\r\n    soundOnCallback() { }\r\n    soundOffCallback() { }\r\n}\r\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-player-waa-light.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 372,
    "kind": "variable",
    "name": "SMALL_AMPLITUDE",
    "memberof": "src/morse-pro-player-waa-light.js",
    "static": true,
    "longname": "src/morse-pro-player-waa-light.js~SMALL_AMPLITUDE",
    "access": "public",
    "export": false,
    "importPath": "morse-pro/src/morse-pro-player-waa-light.js",
    "importStyle": null,
    "description": "Web browser sound player using Web Audio API.\nExtends MorsePlayerWAA to provide callbacks when the sound goes on or off.\nCan be used to turn a light on or off in time with the Morse sound.\nThe callbacks have an error of +/- 2.6ms",
    "examples": [
      "import MorseCW from 'morse-pro-cw';\nimport MorsePlayerWAALight from 'morse-pro-player-waa-light';\nvar morseCW = new MorseCW();\nvar tokens = morseCW.text2morse(\"abc\");\nvar timings = morseCW.morseTokens2timing(tokens);\nvar morsePlayerWAALight = new MorsePlayerWAALight();\nmorsePlayerWAALight.soundOnCallback = lightOn;\nmorsePlayerWAALight.soundOffCallback = lightOff;\nmorsePlayerWAALight.soundStoppedCallback = soundStopped;\nmorsePlayerWAALight.muteAudio(true);\nmorsePlayerWAALight.load({timings});\nmorsePlayerWAA.playFromStart();"
    ],
    "lineNumber": 37,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 373,
    "kind": "class",
    "name": "MorsePlayerWAALight",
    "memberof": "src/morse-pro-player-waa-light.js",
    "static": true,
    "longname": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-player-waa-light.js",
    "importStyle": "MorsePlayerWAALight",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/morse-pro-player-waa.js~MorsePlayerWAA"
    ]
  },
  {
    "__docId__": 374,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "lots of optional parameters."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.defaultFrequency",
        "description": "fallback frequency (Hz) to use if the loaded sequence does not define any."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.startPadding",
        "description": "number of ms to wait before playing first note of initial sequence."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endPadding",
        "description": "number of ms to wait at the end of a sequence before playing the next one (or looping)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.volume",
        "description": "volume of Morse. Takes range [0,1]."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sequenceStartCallback",
        "description": "function to call each time the sequence starts."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sequenceEndingCallback",
        "description": "function to call when the sequence is nearing the end."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sequenceEndCallback",
        "description": "function to call when the sequence has ended."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "params.soundStoppedCallback",
        "description": "function to call when the sequence stops."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "params.soundOnCallback",
        "description": "function to call when a note starts."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "params.soundOffCallback",
        "description": "function to call when a note stops."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.onSample",
        "description": "URL of the sound file to play at the start of a note."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.offSample",
        "description": "URL of the sound file to play at the end of a note."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.playMode",
        "description": "play mode, either \"sine\" or \"sample\"."
      }
    ]
  },
  {
    "__docId__": 377,
    "kind": "member",
    "name": "_wasOn",
    "memberof": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight",
    "static": false,
    "longname": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight#_wasOn",
    "access": "private",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "member",
    "name": "_count",
    "memberof": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight",
    "static": false,
    "longname": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight#_count",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "_initialiseAudio",
    "memberof": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight#_initialiseAudio",
    "access": "private",
    "description": "Set up the audio graph, connecting the splitter node to a JSNode in order to analyse the waveform",
    "lineNumber": 71,
    "params": [],
    "return": null
  },
  {
    "__docId__": 380,
    "kind": "member",
    "name": "muteLightNode",
    "memberof": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight",
    "static": false,
    "longname": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight#muteLightNode",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "member",
    "name": "jsNode",
    "memberof": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight",
    "static": false,
    "longname": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight#jsNode",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "_processSound",
    "memberof": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight#_processSound",
    "access": "private",
    "description": "",
    "lineNumber": 96,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "_on",
    "memberof": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight#_on",
    "access": "private",
    "description": "",
    "lineNumber": 114,
    "params": [],
    "return": null
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "_off",
    "memberof": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight#_off",
    "access": "private",
    "description": "",
    "lineNumber": 121,
    "params": [],
    "return": null
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "muteLight",
    "memberof": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight#muteLight",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [
      {
        "name": "mute",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 387,
    "kind": "get",
    "name": "audioType",
    "memberof": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight#audioType",
    "access": "public",
    "description": "",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} representing this audio player type: 5"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "representing this audio player type: 5"
    },
    "override": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "soundOnCallback",
    "memberof": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight#soundOnCallback",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "soundOffCallback",
    "memberof": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa-light.js~MorsePlayerWAALight#soundOffCallback",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 390,
    "kind": "file",
    "name": "src/morse-pro-player-waa.js",
    "content": "/*!\r\nThis code is © Copyright Stephen C. Phillips, 2018.\r\nEmail: steve@scphillips.com\r\n*/\r\n/*\r\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\r\nYou may not use this work except in compliance with the Licence.\r\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\r\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the Licence for the specific language governing permissions and limitations under the Licence.\r\n*/\r\n\r\nimport morseAudioContext from './morse-pro-audiocontext';\r\n\r\n/**\r\n * Web browser sound player using Web Audio API.\r\n *\r\n * @example\r\n * import MorseCW from 'morse-pro-cw';\r\n * import MorsePlayerWAA from 'morse-pro-player-waa';\r\n * var morseCW = new MorseCW();\r\n * var tokens = morseCW.text2morse(\"abc\");\r\n * var timings = morseCW.morseTokens2timing(tokens);\r\n * var morsePlayerWAA = new MorsePlayerWAA();\r\n * morsePlayerWAA.load({timings});\r\n * morsePlayerWAA.playFromStart();\r\n */\r\nexport default class MorsePlayerWAA {\r\n    /**\r\n     * @param {Object} params - lots of optional parameters.\r\n     * @param {number} [params.defaultFrequency=550] - fallback frequency (Hz) to use if the loaded sequence does not define any.\r\n     * @param {number} [params.startPadding=0] - number of ms to wait before playing first note after play is pressed\r\n     * @param {number} [params.endPadding=0] - number of ms to wait at the end of a sequence before playing the next one (or looping).\r\n     * @param {number} [params.volume=1] - volume of Morse. Takes range [0,1].\r\n     * @param {function()} params.sequenceStartCallback - function to call each time the sequence starts.\r\n     * @param {function()} params.sequenceEndingCallback - function to call when the sequence is nearing the end.\r\n     * @param {function()} params.sequenceEndCallback - function to call when the sequence has ended.\r\n     * @param {function()} params.soundStoppedCallback - function to call when the sequence stops.\r\n     * @param {string} params.onSample - URL of the sound file to play at the start of a note.\r\n     * @param {string} params.offSample - URL of the sound file to play at the end of a note.\r\n     * @param {string} [params.playMode=\"sine\"] - play mode, either \"sine\" or \"sample\".\r\n     */\r\n    constructor({defaultFrequency=550, startPadding=0, endPadding=0, volume=1, sequenceStartCallback, sequenceEndingCallback, sequenceEndCallback, soundStoppedCallback, onSample, offSample, playMode='sine'} = {}) {\r\n        if (sequenceStartCallback !== undefined) this.sequenceStartCallback = sequenceStartCallback;\r\n        if (sequenceEndingCallback !== undefined) this.sequenceEndingCallback = sequenceEndingCallback;\r\n        if (sequenceEndCallback !== undefined) this.sequenceEndCallback = sequenceEndCallback;\r\n        if (soundStoppedCallback !== undefined) this.soundStoppedCallback = soundStoppedCallback;\r\n\r\n        this.playMode = playMode;\r\n        this._noAudio = false;\r\n\r\n        if (onSample !== undefined) {\r\n            morseAudioContext.loadSample(onSample, \"onSample\");\r\n            morseAudioContext.loadSample(offSample, \"offSample\");\r\n        }\r\n\r\n        this.loop = false;\r\n        this.fallbackFrequency = defaultFrequency;\r\n        this._frequency = undefined;\r\n        this.startPadding = startPadding;\r\n        this._initialStartPadding = 200;  // ms\r\n        this.endPadding = endPadding;\r\n        this.volume = volume;\r\n\r\n        this._cTimings = [];\r\n        this._isPlaying = false;\r\n        this._isPaused = false;\r\n        this._lookAheadTime = 0.1;  // how far to look ahead when scheduling notes (seconds)\r\n        this._timerInterval = 0.05;  // how often to schedule notes (seconds)\r\n        this._timer = undefined;  // timer for scheduling notes, repeats at _timerInterval\r\n        this._startTimer = undefined;  // timer to send sequenceStartCallback\r\n        this._endTimer = undefined;  // timer to send sequenceEndCallback\r\n        this._stopTimer = undefined;  // timer to send soundStoppedCallback\r\n        this._queue = [];\r\n\r\n        this._initialiseAudio();\r\n    }\r\n\r\n    /**\r\n     * Set up the audio graph. Should only be called once.\r\n     * @access private\r\n     */\r\n    _initialiseAudio() {\r\n        if (this.splitterNode) {\r\n            // if we have already called this method then we must make sure to disconnect the old graph first\r\n            this.splitterNode.disconnect();\r\n        }\r\n        let ac = morseAudioContext.getAudioContext();\r\n        let now = ac.currentTime;\r\n\r\n        this.oscillatorNode = ac.createOscillator();  // make an oscillator at the right frequency, always on\r\n        this.oscillatorNode.type = \"sine\";\r\n        this.oscillatorNode.start(now);\r\n\r\n        this.onOffNode = ac.createGain();  // modulate the oscillator with an on/off gain node\r\n        this.onOffNode.gain.setValueAtTime(0, now);\r\n\r\n        this.bandpassNode = ac.createBiquadFilter();  // cleans up the waveform\r\n        this.bandpassNode.type = \"bandpass\";\r\n        this.bandpassNode.Q.setValueAtTime(1, now);\r\n\r\n        this.splitterNode = ac.createGain();  // this node is here to attach other nodes to in subclass\r\n        this.splitterNode.gain.setValueAtTime(1, now);\r\n\r\n        this.volumeNode = ac.createGain();  // this node is actually used for volume\r\n        \r\n        this.muteAudioNode = ac.createGain();  // used to temporarily mute the sound (e.g. if just light is needed)\r\n\r\n        this.oscillatorNode.connect(this.onOffNode);\r\n        this.onOffNode.connect(this.bandpassNode);\r\n        this.bandpassNode.connect(this.splitterNode);\r\n        this.splitterNode.connect(this.volumeNode);\r\n        this.volumeNode.connect(this.muteAudioNode);\r\n        this.muteAudioNode.connect(ac.destination);\r\n\r\n        this.frequency = this._frequency;  // set up oscillator and bandpass nodes\r\n        this.volume = this._volume;  // set up gain node\r\n        this.muteAudio(false);\r\n    }\r\n\r\n    set frequency(freq) {\r\n        this._frequency = freq;\r\n        try {\r\n            let now = morseAudioContext.getAudioContext().currentTime;\r\n            this.oscillatorNode.frequency.setValueAtTime(freq, now);\r\n            this.bandpassNode.frequency.setValueAtTime(freq, now);\r\n        } catch (e) {\r\n            // getting here means _initialiseAudio() has not yet been called: that's okay\r\n        }\r\n    }\r\n\r\n    get frequency() {\r\n        return this._frequency;\r\n    }\r\n\r\n    /**\r\n     * Set the play mode (one of 'sine' and 'sample'). Also corrects the volume and low-pass filter.\r\n     * @param {String} mode - the play mode to use\r\n     */\r\n    set playMode(mode) {\r\n        // TODO: check value is in ['sine', 'sample']\r\n        this._playMode = mode;\r\n        // force re-evaluation of volume and frequency in case the mode has been changed during playback\r\n        this.volume = this._volume;\r\n        this.frequency = this._frequency;\r\n    }\r\n\r\n    get playMode() {\r\n        return this._playMode;\r\n    }\r\n\r\n    /**\r\n     * Set the volume for the player. Sets the gain as a side effect.\r\n     * @param {number} v - the volume, should be in range [0,1]\r\n     */\r\n    set volume(v) {\r\n        let oldGain = this._gain;\r\n        this._volume = Math.min(Math.max(v, 0), 1);  // clamp into range [0,1]\r\n        if (this._volume === 0) {\r\n            this._gain = 0;  // make sure 0 volume is actually silent\r\n        } else {\r\n            // see https://teropa.info/blog/2016/08/30/amplitude-and-loudness.html\r\n            let dbfs = -60 + this._volume * 60;  // changes [0,1] to [-60,0]\r\n            this._gain = Math.pow(10, dbfs / 20);  // change from decibels to amplitude\r\n        }\r\n        try {\r\n            let now = morseAudioContext.getAudioContext().currentTime;\r\n            // change volume linearly over 30ms to avoid discontinuities and resultant popping\r\n            this.volumeNode.gain.setValueAtTime(oldGain, now);\r\n            this.volumeNode.gain.linearRampToValueAtTime(this._gain, now + 0.03);\r\n        } catch (e) {\r\n            // getting here means _initialiseAudio() has not yet been called: that's okay\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {number} the current volume [0,1]\r\n     */\r\n    get volume() {\r\n        return this._volume;\r\n    }\r\n\r\n    /**\r\n     * @returns {number} the current gain [0,1]\r\n     */\r\n    get gain() {\r\n        return this._gain;\r\n    }\r\n\r\n    /**\r\n     * Mutes or unmutes the audio (leaving the volume setting alone)\r\n     * @param {Boolean} mute - true to mute, false to unmute\r\n     */\r\n    muteAudio(mute) {\r\n        let now = morseAudioContext.getAudioContext().currentTime;\r\n        this.muteAudioNode.gain.linearRampToValueAtTime(mute ? 0 : 1, now + 0.03);\r\n    }\r\n\r\n    /**\r\n     * Load timing sequence, replacing any existing sequence.\r\n     * If this.endPadding is non-zero then an appropriate pause is added to the end.\r\n     * @param {Object} sequence - the sequence to play.\r\n     * @param {number[]} sequence.timings - list of millisecond timings; +ve numbers are beeps, -ve numbers are silence.\r\n     * @param {number} sequence.frequencies - a single frequency to be used for all beeps. If not set, the fallback frequency defined in the constructor is used.\r\n     */\r\n    load(sequence) {\r\n        let timings = sequence.timings;\r\n        let frequencies = sequence.frequencies || this.fallbackFrequency;\r\n        // TODO: add volume array\r\n        // let volumes = sequence.volumes;\r\n        if (Array.isArray(frequencies)) {\r\n            // TODO: add frequency arrays; set this.frequency to the highest value to make the low-pass filter work\r\n            throw \"Arrays of frequencies not yet supported\"\r\n        } else {\r\n            this.frequency = frequencies;\r\n        }\r\n\r\n        // TODO: undefined behaviour if this is called in the middle of a sequence\r\n\r\n        // console.log('Timings: ' + timings);\r\n        /*\r\n            The ith element of the sequence starts at _cTimings[i] and ends at _cTimings[i+1] (in fractional seconds)\r\n            It is a note (i.e. not silence) if isNote[i] === True\r\n        */\r\n\r\n        if (this.endPadding > 0) {\r\n            timings.push(-this.endPadding);\r\n        }\r\n\r\n        this._cTimings = [0];\r\n        this.isNote = [];\r\n        for (var i = 0; i < timings.length; i++) {\r\n            this._cTimings[i + 1] = this._cTimings[i] + Math.abs(timings[i]) / 1000;  // AudioContext runs in seconds not ms\r\n            this.isNote[i] = timings[i] > 0;\r\n        }\r\n        this.sequenceLength = this.isNote.length;\r\n    }\r\n\r\n    /**\r\n     * Load timing sequence which will be played when the current sequence is completed (current queue is deleted).\r\n     * @param {Object} sequence - see load() method for object description\r\n     * @deprecated - use queue() instead\r\n     */\r\n    loadNext(sequence) {\r\n        this._queue = [sequence];\r\n    }\r\n\r\n    /**\r\n     * Queue up a timing sequence (add to the end of the queue)\r\n     * @param {Object} sequence - see load() method for object description\r\n     */\r\n    queue(sequence) {\r\n        this._queue.push(sequence);\r\n    }\r\n\r\n    /**\r\n     * Plays the loaded timing sequence from the start, regardless of whether playback is ongoing or paused.\r\n     */\r\n    playFromStart() {\r\n        // TODO: why do we have this method at all? Better just to have play() and if user needs playFromStart, just call stop() first?\r\n        if (this._noAudio || this._cTimings.length === 0) {\r\n            return;\r\n        }\r\n        this.stop();\r\n        this._nextNote = 0;\r\n        this._isPlaying = true;\r\n        this._isPaused = true;  // pretend we were paused so that play() \"resumes\" playback\r\n        this.play();\r\n    }\r\n\r\n    /**\r\n     * Starts or resumes playback of the loaded timing sequence.\r\n     */\r\n    play() {\r\n        if (!this._isPlaying) {\r\n            // if we're not actually playing then play from start\r\n            this.playFromStart();\r\n        }\r\n        // otherwise we are resuming playback after a pause\r\n        if (!this._isPaused) {\r\n            // if we're not actually paused then do nothing\r\n            return;\r\n        }\r\n        // otherwise we really are resuming playback (or pretending we are, and actually playing from start...)\r\n        clearInterval(this._stopTimer);  // if we were going to send a soundStoppedCallback then don't\r\n        clearInterval(this._startTimer);  // ditto\r\n        clearInterval(this._endTimer);\r\n        clearInterval(this._timer);\r\n        this._isPaused = false;\r\n        // basically set the time base to now but\r\n        //    - to work after a pause: subtract the start time of the next note so that it will play immediately\r\n        //    - to avoid clipping the first note: add on startPadding\r\n        this._tZero = morseAudioContext.getAudioContext().currentTime - \r\n            this._cTimings[this._nextNote] + \r\n            Math.max(this.startPadding, this._initialStartPadding) / 1000;\r\n        this._initialStartPadding = 0;  // only use it once\r\n        // schedule the first note ASAP (directly) and then if there is more to schedule, set up an interval timer\r\n        if (this._scheduleNotes()) {\r\n            this._timer = setInterval(function() {\r\n                this._scheduleNotes();\r\n            }.bind(this), 1000 * this._timerInterval);  // regularly check to see if there are more notes to schedule\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Pause playback (resume with play())\r\n     */\r\n    pause() {\r\n        if (!this._isPlaying) {\r\n            // if we're not actually playing then ignore this\r\n            return;\r\n        }\r\n        this._isPaused = true;\r\n        clearInterval(this._timer);\r\n\r\n        // ensure that the next note that is scheduled is a beep, not a pause (to help sync with vibration patterns)\r\n        if (!this.isNote[this._nextNote]) {\r\n\r\n            this._nextNote++;\r\n\r\n            // if we've got to the end of the sequence, then loop or load next sequence as appropriate\r\n            if (this._nextNote === this.sequenceLength) {\r\n                if (this.loop || this._queue.length > 0) {\r\n                    this._nextNote = 0;\r\n                    if (this._queue.length > 0) {\r\n                        this.load(this._queue.shift());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop playback (calling play() afterwards will start from the beginning)\r\n     */\r\n    stop() {\r\n        if (this._isPlaying) {\r\n            let now = morseAudioContext.getAudioContext().currentTime;\r\n            this.onOffNode.gain.cancelScheduledValues(now);\r\n            this.onOffNode.gain.linearRampToValueAtTime(0, now + 0.03);\r\n            this._stop();\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Internal clean stop that doesn't destroy audiocontext\r\n     * @access private\r\n     */\r\n    _stop() {\r\n        this._isPlaying = false;\r\n        this._isPaused = false;\r\n        clearInterval(this._timer);\r\n        clearInterval(this._stopTimer);\r\n        clearInterval(this._startTimer);\r\n        this.soundStoppedCallback();\r\n    }\r\n\r\n    /**\r\n     * Schedule notes that start before now + lookAheadTime.\r\n     * @return {boolean} true if there is more to schedule, false if sequence is complete\r\n     * @access private\r\n     */\r\n    _scheduleNotes() {\r\n        // console.log('Scheduling:');\r\n        let start, start2, stop, stop2, bsn;\r\n        let ac = morseAudioContext.getAudioContext();\r\n        let nowAbsolute = ac.currentTime;\r\n\r\n        while (this._nextNote < this.sequenceLength &&\r\n                (this._cTimings[this._nextNote] < (nowAbsolute - this._tZero) + this._lookAheadTime)) {\r\n\r\n            // this._notPlayedANote = false;\r\n            var nowRelative = nowAbsolute - this._tZero;\r\n\r\n            // console.log('T: ' + Math.round(1000 * nowAbsolute)/1000 + ' (+' + Math.round(1000 * nowRelative)/1000 + ')');\r\n            // console.log(this._nextNote + ': ' +\r\n            //     (this.isNote[this._nextNote] ? 'Note  ' : 'Pause ') +\r\n            //     Math.round(1000 * this._cTimings[this._nextNote])/1000 + ' - ' +\r\n            //     Math.round(1000 * this._cTimings[this._nextNote + 1])/1000 + ' (' +\r\n            //     Math.round(1000 * (this._cTimings[this._nextNote + 1] - this._cTimings[this._nextNote]))/1000 + ')');\r\n\r\n            if (this._nextNote === 0) {\r\n                // when scheduling the first note, schedule a callback as well\r\n                this._startTimer = setTimeout(function() {\r\n                    this.sequenceStartCallback();\r\n                }.bind(this), 1000 * (this._cTimings[0] - nowRelative));\r\n            }\r\n\r\n            if (this.isNote[this._nextNote]) {\r\n                // TODO: enable choice of waveform\r\n                if (this._playMode === 'sine') {\r\n                    start = this._tZero + this._cTimings[this._nextNote];\r\n                    stop  = this._tZero + this._cTimings[this._nextNote + 1];\r\n                    this._soundEndTime = stop;  // we need to store this for the stop() callback\r\n                    this.onOffNode.gain.setTargetAtTime(1, start - 0.0015, 0.001);\r\n                    this.onOffNode.gain.setTargetAtTime(0, stop - 0.0015, 0.001);\r\n                } else {\r\n                    // only other option for 'mode' is 'sample'\r\n                    start  = this._tZero + this._cTimings[this._nextNote];\r\n                    start2 = this._tZero + this._cTimings[this._nextNote + 1];\r\n                    stop   = this._tZero + this._cTimings[this._nextNote + 2];  // will sometimes be undefined but that's okay\r\n                    stop2  = this._tZero + this._cTimings[this._nextNote + 3];  // TODO: improve this so it handles looping better?\r\n                    this._soundEndTime = start2;  // the start of the end click. We need to store this for the stop() callback\r\n\r\n                    let sounds = morseAudioContext.getSounds();\r\n                    // start and stop the \"on\" sound\r\n                    bsn = ac.createBufferSource();\r\n                    try {\r\n                        bsn.buffer = sounds[\"onSample\"];\r\n                        bsn.start(start);\r\n                        if (stop) { bsn.stop(stop); }  // if we don't schedule a stop then the sound file plays until it completes\r\n                        bsn.connect(this.splitterNode);\r\n                    } catch (ex) {\r\n                        console.log(\"onSample not decoded yet\");\r\n                    }\r\n\r\n                    // start and stop the \"off\" sound (which is assumed to follow)\r\n                    bsn = ac.createBufferSource();\r\n                    try {\r\n                        bsn.buffer = sounds[\"offSample\"];\r\n                        bsn.start(start2);\r\n                        if (stop2) { bsn.stop(stop2); }  // we won't have the stop time for the final off sound, so just let it run\r\n                        bsn.connect(this.splitterNode);\r\n                    } catch (ex) {\r\n                        console.log(\"offSample not decoded yet\");\r\n                    }\r\n                }\r\n            }\r\n            this._nextNote++;\r\n\r\n            if (this._nextNote === this.sequenceLength) {\r\n                // we've just scheduled the last note of a sequence\r\n                this.sequenceEndingCallback();\r\n                this._endTimer = setTimeout(this.sequenceEndCallback, 1000 * (this._soundEndTime - nowAbsolute));\r\n                if (this.loop || this._queue.length > 0) {\r\n                    // there's more to play\r\n                    // increment time base to be the absolute end time of the final element in the sequence\r\n                    this._tZero += this._cTimings[this.sequenceLength];\r\n                    this._nextNote = 0;\r\n                    if (this._queue.length > 0) {\r\n                        this.load(this._queue.shift());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this._nextNote === this.sequenceLength) {\r\n            // then all notes have been scheduled and we are not looping/going to next in queue\r\n            clearInterval(this._timer);\r\n            // schedule stop() for after when the scheduled sequence ends\r\n            // adding on 3 * lookAheadTime for safety but shouldn't be needed\r\n            this._stopTimer = setTimeout(function() {\r\n                this._stop();\r\n            }.bind(this), 1000 * (this._soundEndTime - nowAbsolute + 3 * this._lookAheadTime));\r\n            return false;  // indicate that sequence is complete\r\n        }\r\n\r\n        return true;  // indicate there are more notes to schedule\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean} whether there was an error in initialisation\r\n     */\r\n    hasError() {\r\n        return this._noAudio;\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean} whether a sequence is being played or not (still true even when paused); becomes false when stop is used\r\n     */\r\n    get isPlaying() {\r\n        return this._isPlaying;\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean} whether the playback is paused or not\r\n     */\r\n    get isPaused() {\r\n        return this._isPaused;\r\n    }\r\n\r\n    /**\r\n     * Return the index of the next note in the sequence to be scheduled.\r\n     * Useful if the sequence has been paused.\r\n     * @returns {number} note index\r\n     */\r\n    get nextNote() {\r\n        return this._nextNote;\r\n    }\r\n\r\n    /**\r\n     * @returns {number} representing this audio player type: 4\r\n     */\r\n    get audioType() {\r\n        return 4;\r\n        // 4: Web Audio API using oscillators\r\n        // 3: Audio element using media stream worker (using PCM audio data)\r\n        // 2: Flash (using PCM audio data)\r\n        // 1: Web Audio API with webkit and native support (using PCM audio data)\r\n        // 0: Audio element using Mozilla Audio Data API (https://wiki.mozilla.org/Audio_Data_API) (using PCM audio data)\r\n        // -1: no audio support\r\n    }\r\n\r\n    // empty callbacks in case user does not define any\r\n\r\n    /**\r\n     * Called to coincide with the start of the first note in a sequence.\r\n     */\r\n    sequenceStartCallback() { }\r\n\r\n    /**\r\n     * Called at the point of the last notes of a sequence being scheduled. Designed to provide the opportunity to schedule some more notes.\r\n     */\r\n    sequenceEndingCallback() { }\r\n\r\n    /**\r\n     * Called at the end of the last beep of a sequence. Does not wait for endPadding.\r\n     */\r\n    sequenceEndCallback() { }\r\n\r\n    /**\r\n     * Called when all sounds have definitely stopped.\r\n     */\r\n    soundStoppedCallback() { }\r\n}\r\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-player-waa.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 391,
    "kind": "class",
    "name": "MorsePlayerWAA",
    "memberof": "src/morse-pro-player-waa.js",
    "static": true,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-player-waa.js",
    "importStyle": "MorsePlayerWAA",
    "description": "Web browser sound player using Web Audio API.",
    "examples": [
      "import MorseCW from 'morse-pro-cw';\nimport MorsePlayerWAA from 'morse-pro-player-waa';\nvar morseCW = new MorseCW();\nvar tokens = morseCW.text2morse(\"abc\");\nvar timings = morseCW.morseTokens2timing(tokens);\nvar morsePlayerWAA = new MorsePlayerWAA();\nmorsePlayerWAA.load({timings});\nmorsePlayerWAA.playFromStart();"
    ],
    "lineNumber": 28,
    "interface": false
  },
  {
    "__docId__": 392,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "lots of optional parameters."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "550",
        "defaultRaw": 550,
        "name": "params.defaultFrequency",
        "description": "fallback frequency (Hz) to use if the loaded sequence does not define any."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "params.startPadding",
        "description": "number of ms to wait before playing first note after play is pressed"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "params.endPadding",
        "description": "number of ms to wait at the end of a sequence before playing the next one (or looping)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "params.volume",
        "description": "volume of Morse. Takes range [0,1]."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sequenceStartCallback",
        "description": "function to call each time the sequence starts."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sequenceEndingCallback",
        "description": "function to call when the sequence is nearing the end."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sequenceEndCallback",
        "description": "function to call when the sequence has ended."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "params.soundStoppedCallback",
        "description": "function to call when the sequence stops."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.onSample",
        "description": "URL of the sound file to play at the start of a note."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.offSample",
        "description": "URL of the sound file to play at the end of a note."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"sine\"",
        "defaultRaw": "sine",
        "name": "params.playMode",
        "description": "play mode, either \"sine\" or \"sample\"."
      }
    ]
  },
  {
    "__docId__": 398,
    "kind": "member",
    "name": "_noAudio",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_noAudio",
    "access": "private",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "member",
    "name": "loop",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#loop",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 400,
    "kind": "member",
    "name": "fallbackFrequency",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#fallbackFrequency",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "member",
    "name": "_frequency",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_frequency",
    "access": "private",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "member",
    "name": "startPadding",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#startPadding",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "member",
    "name": "_initialStartPadding",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_initialStartPadding",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "member",
    "name": "endPadding",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#endPadding",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "member",
    "name": "_cTimings",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_cTimings",
    "access": "private",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 407,
    "kind": "member",
    "name": "_isPlaying",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_isPlaying",
    "access": "private",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "member",
    "name": "_isPaused",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_isPaused",
    "access": "private",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "_lookAheadTime",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_lookAheadTime",
    "access": "private",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "_timerInterval",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_timerInterval",
    "access": "private",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "member",
    "name": "_timer",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_timer",
    "access": "private",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 412,
    "kind": "member",
    "name": "_startTimer",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_startTimer",
    "access": "private",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "_endTimer",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_endTimer",
    "access": "private",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "member",
    "name": "_stopTimer",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_stopTimer",
    "access": "private",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "_queue",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_queue",
    "access": "private",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "_initialiseAudio",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_initialiseAudio",
    "access": "private",
    "description": "Set up the audio graph. Should only be called once.",
    "lineNumber": 83,
    "params": [],
    "return": null
  },
  {
    "__docId__": 417,
    "kind": "member",
    "name": "oscillatorNode",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#oscillatorNode",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "member",
    "name": "onOffNode",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#onOffNode",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 419,
    "kind": "member",
    "name": "bandpassNode",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#bandpassNode",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "member",
    "name": "splitterNode",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#splitterNode",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "volumeNode",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#volumeNode",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "member",
    "name": "muteAudioNode",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#muteAudioNode",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "set",
    "name": "frequency",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#frequency",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true
  },
  {
    "__docId__": 427,
    "kind": "get",
    "name": "frequency",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#frequency",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 428,
    "kind": "set",
    "name": "playMode",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#playMode",
    "access": "public",
    "description": "Set the play mode (one of 'sine' and 'sample'). Also corrects the volume and low-pass filter.",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": "the play mode to use"
      }
    ]
  },
  {
    "__docId__": 429,
    "kind": "member",
    "name": "_playMode",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_playMode",
    "access": "private",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "get",
    "name": "playMode",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#playMode",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "set",
    "name": "volume",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#volume",
    "access": "public",
    "description": "Set the volume for the player. Sets the gain as a side effect.",
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "the volume, should be in range [0,1]"
      }
    ]
  },
  {
    "__docId__": 434,
    "kind": "member",
    "name": "_volume",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_volume",
    "access": "private",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "member",
    "name": "_gain",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_gain",
    "access": "private",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 437,
    "kind": "get",
    "name": "volume",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#volume",
    "access": "public",
    "description": "",
    "lineNumber": 179,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} the current volume [0,1]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the current volume [0,1]"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 438,
    "kind": "get",
    "name": "gain",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#gain",
    "access": "public",
    "description": "",
    "lineNumber": 186,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} the current gain [0,1]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the current gain [0,1]"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "muteAudio",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#muteAudio",
    "access": "public",
    "description": "Mutes or unmutes the audio (leaving the volume setting alone)",
    "lineNumber": 194,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "mute",
        "description": "true to mute, false to unmute"
      }
    ],
    "return": null
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "load",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#load",
    "access": "public",
    "description": "Load timing sequence, replacing any existing sequence.\nIf this.endPadding is non-zero then an appropriate pause is added to the end.",
    "lineNumber": 206,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sequence",
        "description": "the sequence to play."
      },
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "sequence.timings",
        "description": "list of millisecond timings; +ve numbers are beeps, -ve numbers are silence."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sequence.frequencies",
        "description": "a single frequency to be used for all beeps. If not set, the fallback frequency defined in the constructor is used."
      }
    ],
    "return": null
  },
  {
    "__docId__": 443,
    "kind": "member",
    "name": "isNote",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#isNote",
    "access": "public",
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 444,
    "kind": "member",
    "name": "sequenceLength",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#sequenceLength",
    "access": "public",
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "loadNext",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#loadNext",
    "access": "public",
    "description": "Load timing sequence which will be played when the current sequence is completed (current queue is deleted).",
    "lineNumber": 244,
    "deprecated": "- use queue() instead",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sequence",
        "description": "see load() method for object description"
      }
    ],
    "return": null
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "queue",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#queue",
    "access": "public",
    "description": "Queue up a timing sequence (add to the end of the queue)",
    "lineNumber": 252,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sequence",
        "description": "see load() method for object description"
      }
    ],
    "return": null
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "playFromStart",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#playFromStart",
    "access": "public",
    "description": "Plays the loaded timing sequence from the start, regardless of whether playback is ongoing or paused.",
    "lineNumber": 259,
    "params": [],
    "return": null
  },
  {
    "__docId__": 449,
    "kind": "member",
    "name": "_nextNote",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_nextNote",
    "access": "private",
    "description": null,
    "lineNumber": 265,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "play",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#play",
    "access": "public",
    "description": "Starts or resumes playback of the loaded timing sequence.",
    "lineNumber": 274,
    "params": [],
    "return": null
  },
  {
    "__docId__": 454,
    "kind": "member",
    "name": "_tZero",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_tZero",
    "access": "private",
    "description": null,
    "lineNumber": 293,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "pause",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#pause",
    "access": "public",
    "description": "Pause playback (resume with play())",
    "lineNumber": 308,
    "params": [],
    "return": null
  },
  {
    "__docId__": 460,
    "kind": "method",
    "name": "stop",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#stop",
    "access": "public",
    "description": "Stop playback (calling play() afterwards will start from the beginning)",
    "lineNumber": 336,
    "params": [],
    "return": null
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "_stop",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_stop",
    "access": "private",
    "description": "Internal clean stop that doesn't destroy audiocontext",
    "lineNumber": 349,
    "params": [],
    "return": null
  },
  {
    "__docId__": 464,
    "kind": "method",
    "name": "_scheduleNotes",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_scheduleNotes",
    "access": "private",
    "description": "Schedule notes that start before now + lookAheadTime.",
    "lineNumber": 363,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if there is more to schedule, false if sequence is complete"
    },
    "params": []
  },
  {
    "__docId__": 466,
    "kind": "member",
    "name": "_soundEndTime",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#_soundEndTime",
    "access": "private",
    "description": null,
    "lineNumber": 394,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "hasError",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#hasError",
    "access": "public",
    "description": "",
    "lineNumber": 464,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether there was an error in initialisation"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether there was an error in initialisation"
    },
    "params": []
  },
  {
    "__docId__": 473,
    "kind": "get",
    "name": "isPlaying",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#isPlaying",
    "access": "public",
    "description": "",
    "lineNumber": 471,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether a sequence is being played or not (still true even when paused); becomes false when stop is used"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether a sequence is being played or not (still true even when paused); becomes false when stop is used"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "get",
    "name": "isPaused",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#isPaused",
    "access": "public",
    "description": "",
    "lineNumber": 478,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether the playback is paused or not"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether the playback is paused or not"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 475,
    "kind": "get",
    "name": "nextNote",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#nextNote",
    "access": "public",
    "description": "Return the index of the next note in the sequence to be scheduled.\nUseful if the sequence has been paused.",
    "lineNumber": 487,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} note index"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "note index"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 476,
    "kind": "get",
    "name": "audioType",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#audioType",
    "access": "public",
    "description": "",
    "lineNumber": 494,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} representing this audio player type: 4"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "representing this audio player type: 4"
    },
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "sequenceStartCallback",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#sequenceStartCallback",
    "access": "public",
    "description": "Called to coincide with the start of the first note in a sequence.",
    "lineNumber": 509,
    "params": [],
    "return": null
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "sequenceEndingCallback",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#sequenceEndingCallback",
    "access": "public",
    "description": "Called at the point of the last notes of a sequence being scheduled. Designed to provide the opportunity to schedule some more notes.",
    "lineNumber": 514,
    "params": [],
    "return": null
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "sequenceEndCallback",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#sequenceEndCallback",
    "access": "public",
    "description": "Called at the end of the last beep of a sequence. Does not wait for endPadding.",
    "lineNumber": 519,
    "params": [],
    "return": null
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "soundStoppedCallback",
    "memberof": "src/morse-pro-player-waa.js~MorsePlayerWAA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-waa.js~MorsePlayerWAA#soundStoppedCallback",
    "access": "public",
    "description": "Called when all sounds have definitely stopped.",
    "lineNumber": 524,
    "params": [],
    "return": null
  },
  {
    "__docId__": 481,
    "kind": "file",
    "name": "src/morse-pro-player-xas.js",
    "content": "/*!\nThis code is © Copyright Stephen C. Phillips, 2018.\nEmail: steve@scphillips.com\n*/\n/*\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\nYou may not use this work except in compliance with the Licence.\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the Licence for the specific language governing permissions and limitations under the Licence.\n*/\n\n/**\n * Web browser sound player for older browsers, using XAudioJS by Grant Galitz (https://github.com/taisel/XAudioJS).\n *\n * @example\n * import MorseCWWave from 'morse-pro-cw-wave';\n * import MorsePlayerXAS from 'morse-pro-player-xas';\n * // make sure XAudioJS is loaded\n * var morseCWWave = new MorseCWWave();\n * morseCWWave.translate(\"abc\");\n * var morsePlayerXAS = new MorsePlayerXAS(XAudioServer);\n * morsePlayerXAS.load(morseCWWave);\n * morsePlayerXAS.playFromStart();\n */\nexport default class MorsePlayerXAS {\n    /**\n     * @param {Object} xaudioServerClass - the XAudioServer class\n     */\n    constructor({XAudioServerClass, morseCWWave, startPadding=0, endPadding=1000, volume=1} = {}) {\n        this.XAudioServerClass = XAudioServerClass;\n        this.morseCWWave = morseCWWave;\n        this.startPadding = startPadding;\n        this.endPadding = endPadding;\n        this.volume = volume;\n\n        this._isPlaying = false;\n        this.samplePos = undefined;\n        this.noAudio = false;\n        this.audioServer = undefined;\n        this.sampleRate = 8000;\n        this.sample = undefined;\n\n        var that = this;  // needed so that the 3 closures defined here keep a reference to this object\n\n        // XAudioJS callback to get more samples for buffer\n        this.audioGenerator = function(samplesToGenerate) {\n            if (samplesToGenerate === 0) {\n                return [];\n            }\n            var ret;\n            samplesToGenerate = Math.min(samplesToGenerate, that.sample.length - that.samplePos);\n            if (samplesToGenerate > 0) {\n                ret = that.sample.slice(that.samplePos, that.samplePos + samplesToGenerate);\n                that.samplePos += samplesToGenerate;\n                return ret;\n            } else {\n                that._isPlaying = false;\n                return [];\n            }\n        };\n\n        // XAudioJS failure callback\n        this.failureCallback = function() {\n            that.noAudio = true;\n        };\n\n        setInterval(\n            function () {\n                // Runs the check to see if we need to give more audio data to the lib\n                if (that._isPlaying) {\n                    that.audioServer.executeCallback();\n                }\n            }, 20\n        );\n\n        this.load();  // create an xAudioServer so that we know if it works at all and what type it is\n    }\n\n    /**\n     * Set the volume for the player\n     * @param {number} v - the volume, clamped to [0,1]\n     */\n    set volume(v) {\n        this._volume = Math.min(Math.max(v, 0), 1);\n        if (this._volume === 0) {\n            this._gain = 0;  // make sure 0 volume is actually silent\n        } else {\n            // see https://teropa.info/blog/2016/08/30/amplitude-and-loudness.html\n            let dbfs = -60 + this._volume * 60;  // changes [0,1] to [-60,0]\n            this._gain = Math.pow(10, dbfs / 20);  // change from decibels to amplitude\n        }\n    }\n\n    /**\n     * @returns {number} the current volume [0,1]\n     */\n    get volume() {\n        return this._volume;\n    }\n\n    /**\n     * @returns {number} the current gain [0,1]\n     */\n    get gain() {\n        return this._gain;\n    }\n\n    stop() {\n        this._isPlaying = false;\n        this.audioServer.changeVolume(0);\n    }\n\n    /**\n     * Load timing sequence, replacing any existing sequence.\n     * If this.endPadding is non-zero then an appropriate pause is added to the end.\n     * Uses the frequency defined in this.cwWave\n     * @param {Object} sequence - the sequence to play.\n     * @param {number[]} sequence.timings - list of millisecond timings; +ve numbers are beeps, -ve numbers are silence.\n     */\n    load(sequence={timings:[]}) {\n        let timings = sequence.timings;\n        // add on silence at start and end\n        timings.unshift(-this.startPadding);\n        timings.push(-this.endPadding);\n        // TODO: pass in frequencies and volumes once CWWave supports them\n        this.sample = this.morseCWWave.getSample(timings);\n        this.sampleRate = this.morseCWWave.sampleRate;\n\n        console.log(\"Trying XAudioServer\");\n\n        this.audioServer = new this.XAudioServerClass(\n            1,                      // number of channels\n            this.sampleRate,        // sample rate\n            this.sampleRate >> 2,   // buffer low point for underrun callback triggering\n            this.sampleRate << 1,   // internal ring buffer size\n            this.audioGenerator,    // audio refill callback triggered when samples remaining < buffer low point\n            0,                      // volume\n            this.failureCallback    // callback triggered when the browser is found to not support any audio API\n        );\n    }\n\n    playFromStart() {\n        this.stop();\n        this._isPlaying = true;\n        this.samplePos = 0;\n        this.audioServer.changeVolume(this._gain);\n    }\n\n    hasError() {\n        return this.noAudio;\n    }\n\n    get isPlaying() {\n        return this._isPlaying;\n    }\n\n    get audioType() {\n        return this.audioServer.audioType;\n        // 3: Audio element using media stream worker\n        // 2: Flash\n        // 1: Web Audio API with webkit and native support\n        // 0: Audio element using Mozilla Audio Data API (https://wiki.mozilla.org/Audio_Data_API)\n        // -1: no audio support\n    }\n}\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-player-xas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 482,
    "kind": "class",
    "name": "MorsePlayerXAS",
    "memberof": "src/morse-pro-player-xas.js",
    "static": true,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-player-xas.js",
    "importStyle": "MorsePlayerXAS",
    "description": "Web browser sound player for older browsers, using XAudioJS by Grant Galitz (https://github.com/taisel/XAudioJS).",
    "examples": [
      "import MorseCWWave from 'morse-pro-cw-wave';\nimport MorsePlayerXAS from 'morse-pro-player-xas';\n// make sure XAudioJS is loaded\nvar morseCWWave = new MorseCWWave();\nmorseCWWave.translate(\"abc\");\nvar morsePlayerXAS = new MorsePlayerXAS(XAudioServer);\nmorsePlayerXAS.load(morseCWWave);\nmorsePlayerXAS.playFromStart();"
    ],
    "lineNumber": 26,
    "interface": false
  },
  {
    "__docId__": 483,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xaudioServerClass",
        "description": "the XAudioServer class"
      }
    ]
  },
  {
    "__docId__": 484,
    "kind": "member",
    "name": "XAudioServerClass",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#XAudioServerClass",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "member",
    "name": "morseCWWave",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#morseCWWave",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 486,
    "kind": "member",
    "name": "startPadding",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#startPadding",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 487,
    "kind": "member",
    "name": "endPadding",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#endPadding",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 489,
    "kind": "member",
    "name": "_isPlaying",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#_isPlaying",
    "access": "private",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 490,
    "kind": "member",
    "name": "samplePos",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#samplePos",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 491,
    "kind": "member",
    "name": "noAudio",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#noAudio",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 492,
    "kind": "member",
    "name": "audioServer",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#audioServer",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 493,
    "kind": "member",
    "name": "sampleRate",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#sampleRate",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 494,
    "kind": "member",
    "name": "sample",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#sample",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 495,
    "kind": "set",
    "name": "volume",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#volume",
    "access": "public",
    "description": "Set the volume for the player",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "the volume, clamped to [0,1]"
      }
    ]
  },
  {
    "__docId__": 496,
    "kind": "member",
    "name": "_volume",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#_volume",
    "access": "private",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 497,
    "kind": "member",
    "name": "_gain",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#_gain",
    "access": "private",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 499,
    "kind": "get",
    "name": "volume",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#volume",
    "access": "public",
    "description": "",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} the current volume [0,1]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the current volume [0,1]"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 500,
    "kind": "get",
    "name": "gain",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#gain",
    "access": "public",
    "description": "",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} the current gain [0,1]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the current gain [0,1]"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "stop",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#stop",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 503,
    "kind": "method",
    "name": "load",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#load",
    "access": "public",
    "description": "Load timing sequence, replacing any existing sequence.\nIf this.endPadding is non-zero then an appropriate pause is added to the end.\nUses the frequency defined in this.cwWave",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sequence",
        "description": "the sequence to play."
      },
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "sequence.timings",
        "description": "list of millisecond timings; +ve numbers are beeps, -ve numbers are silence."
      }
    ],
    "return": null
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "playFromStart",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#playFromStart",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 510,
    "kind": "method",
    "name": "hasError",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#hasError",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 511,
    "kind": "get",
    "name": "isPlaying",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#isPlaying",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 512,
    "kind": "get",
    "name": "audioType",
    "memberof": "src/morse-pro-player-xas.js~MorsePlayerXAS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro-player-xas.js~MorsePlayerXAS#audioType",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 513,
    "kind": "file",
    "name": "src/morse-pro-util-datauri.js",
    "content": "/*\n* FastBase64 adapted from RIFFWAVE.js v0.03 - Audio encoder for HTML5 <audio> elements.\n* Copyleft 2011 by Pedro Ladaria <pedro.ladaria at Gmail dot com>\n* Public Domain\n*/\n\n/*\n* Adaptation by Stephen C. Phillips, 2013-2017.\n* Email: steve@scphillips.com\n* Public Domain\n*/\n\n/**\n * Function to create a data URI.\n *\n * @example\n * import MorseCWWave from 'morse-pro-cw-wave';\n * import getDataURI from 'morse-pro-util-datauri';\n * import * as RiffWave from 'morse-pro-util-riffwave';\n * var morseCWWave = new MorseCWWave();\n * morseCWWave.translate(\"abc\");\n * var audio = new Audio(getDataURI(RiffWave.getData(morseCWWave), RiffWave.getMIMEType())); // create an HTML5 audio element\n */\nvar Base64 = {\n\n    chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    encLookup: [],\n\n    init: function() {\n        for (var i = 0; i < 4096; i++) {\n            this.encLookup[i] = this.chars[i >> 6] + this.chars[i & 0x3F];\n        }\n    },\n\n    encode: function(src) {\n        var len = src.length;\n        var dst = '';\n        var i = 0;\n        var n;\n        while (len > 2) {\n            n = (src[i] << 16) | (src[i + 1] << 8) | src[i + 2];\n            dst += this.encLookup[n >> 12] + this.encLookup[n & 0xFFF];\n            len -= 3;\n            i += 3;\n        }\n        if (len > 0) {\n            var n1 = (src[i] & 0xFC) >> 2;\n            var n2 = (src[i] & 0x03) << 4;\n            if (len > 1) n2 |= (src[++i] & 0xF0) >> 4;\n            dst += this.chars[n1];\n            dst += this.chars[n2];\n            if (len == 2) {\n                var n3 = (src[i++] & 0x0F) << 2;\n                n3 |= (src[i] & 0xC0) >> 6;\n                dst += this.chars[n3];\n            }\n            if (len == 1) dst += '=';\n            dst += '=';\n        }\n        return dst;\n    }\n};\nBase64.init();\n\n/**\n * @param {number[]} data - list of bytes to encode\n * @param {string} type - MIME-type of the data\n * @return {string}\n */\nexport default function getDataURI(data, type) {\n    return 'data:' + type + ';base64,' + Base64.encode(data);\n}\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-util-datauri.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 514,
    "kind": "variable",
    "name": "Base64",
    "memberof": "src/morse-pro-util-datauri.js",
    "static": true,
    "longname": "src/morse-pro-util-datauri.js~Base64",
    "access": "public",
    "export": false,
    "importPath": "morse-pro/src/morse-pro-util-datauri.js",
    "importStyle": null,
    "description": "Function to create a data URI.",
    "examples": [
      "import MorseCWWave from 'morse-pro-cw-wave';\nimport getDataURI from 'morse-pro-util-datauri';\nimport * as RiffWave from 'morse-pro-util-riffwave';\nvar morseCWWave = new MorseCWWave();\nmorseCWWave.translate(\"abc\");\nvar audio = new Audio(getDataURI(RiffWave.getData(morseCWWave), RiffWave.getMIMEType())); // create an HTML5 audio element"
    ],
    "lineNumber": 24,
    "type": {
      "types": [
        "{\"chars\": string, \"encLookup\": *, \"init\": *, \"encode\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 515,
    "kind": "function",
    "name": "getDataURI",
    "memberof": "src/morse-pro-util-datauri.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-util-datauri.js~getDataURI",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-util-datauri.js",
    "importStyle": "getDataURI",
    "description": "",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "list of bytes to encode"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "MIME-type of the data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 516,
    "kind": "file",
    "name": "src/morse-pro-util-riffwave.js",
    "content": "/*\n* RIFFWAVE adapted from RIFFWAVE.js v0.03 - Audio encoder for HTML5 <audio> elements.\n* Copyleft 2011 by Pedro Ladaria <pedro.ladaria at Gmail dot com>\n* Public Domain\n*/\n\n/*\n* Adaptation by Stephen C. Phillips, 2013-2017.\n* Email: steve@scphillips.com\n* Public Domain\n*/\n\n/**\n * Utility to create RIFF WAVE file data.\n *\n * @example\n * import MorseCWWave from 'morse-pro-cw-wave';\n * import * as RiffWave from 'morse-pro-util-riffwave';\n * var morseCWWave = new MorseCWWave();\n * morseCWWave.translate(\"abc\");\n * var wav = RiffWave.getData(morseCWWave.getSample());  // returns byte array of WAV file\n  */\nvar u32ToArray = function(i) {\n    return [i&0xFF, (i>>8)&0xFF, (i>>16)&0xFF, (i>>24)&0xFF];\n};\n\nvar u16ToArray = function(i) {\n    return [i&0xFF, (i>>8)&0xFF];\n};\n\nvar split16bitArray = function(data) {\n    var r = [];\n    var j = 0;\n    var len = data.length;\n    for (var i=0; i<len; i++) {\n        r[j++] = data[i] & 0xFF;\n        r[j++] = (data[i]>>8) & 0xFF;\n    }\n    return r;\n};\n\nvar fToU8 = function(data) {\n    var r = [];\n    for (var i = 0; i < data.length; i++) {\n        r[i] = Math.max(Math.min(128 + Math.round(127 * data[i]), 255), 0);\n    }\n    return r;\n}\n\n/**\n * Convert PCM data to WAV file data.\n * @param {number[]} data - waveform data, expected to be in (and clamped to) range [-1,1]\n * @param {number} [sampleRate=8000] - the sample rate of the waveform in Hz\n * @param {number} [bitsPerSample=8] - number of bits to store each data point (8 or 16)\n * @return {number[]} - array of bytes representing the WAV file\n */\nexport function getData(data, sampleRate = 8000, bitsPerSample = 8) {\n    data = fToU8(data);\n\n    var header = {                            // OFFS SIZE NOTES\n        chunkId      : [0x52,0x49,0x46,0x46], // 0    4    \"RIFF\" = 0x52494646\n        chunkSize    : 0,                     // 4    4    36+SubChunk2Size = 4+(8+SubChunk1Size)+(8+SubChunk2Size)\n        format       : [0x57,0x41,0x56,0x45], // 8    4    \"WAVE\" = 0x57415645\n        subChunk1Id  : [0x66,0x6d,0x74,0x20], // 12   4    \"fmt \" = 0x666d7420\n        subChunk1Size: 16,                    // 16   4    16 for PCM\n        audioFormat  : 1,                     // 20   2    PCM = 1\n        numChannels  : 1,                     // 22   2    Mono = 1, Stereo = 2...\n        sampleRate   : sampleRate,            // 24   4    8000, 44100...\n        byteRate     : 0,                     // 28   4    SampleRate*NumChannels*BitsPerSample/8\n        blockAlign   : 0,                     // 32   2    NumChannels*BitsPerSample/8\n        bitsPerSample: bitsPerSample,         // 34   2    8 bits = 8, 16 bits = 16\n        subChunk2Id  : [0x64,0x61,0x74,0x61], // 36   4    \"data\" = 0x64617461\n        subChunk2Size: 0                      // 40   4    data size = NumSamples*NumChannels*BitsPerSample/8\n    };\n\n    header.blockAlign = (header.numChannels * header.bitsPerSample) >> 3;\n    header.byteRate = header.blockAlign * header.sampleRate;\n    header.subChunk2Size = data.length * (header.bitsPerSample >> 3);\n    header.chunkSize = 36 + header.subChunk2Size;\n\n    return header.chunkId.concat(\n        u32ToArray(header.chunkSize),\n        header.format,\n        header.subChunk1Id,\n        u32ToArray(header.subChunk1Size),\n        u16ToArray(header.audioFormat),\n        u16ToArray(header.numChannels),\n        u32ToArray(header.sampleRate),\n        u32ToArray(header.byteRate),\n        u16ToArray(header.blockAlign),\n        u16ToArray(header.bitsPerSample),\n        header.subChunk2Id,\n        u32ToArray(header.subChunk2Size),\n        (header.bitsPerSample == 16) ? split16bitArray(data) : data\n    );\n}\n\nexport function getMIMEType() {\n    return \"audio/wav\";\n}\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-util-riffwave.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 517,
    "kind": "function",
    "name": "u32ToArray",
    "memberof": "src/morse-pro-util-riffwave.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-util-riffwave.js~u32ToArray",
    "access": "public",
    "export": false,
    "importPath": "morse-pro/src/morse-pro-util-riffwave.js",
    "importStyle": null,
    "description": "Utility to create RIFF WAVE file data.",
    "examples": [
      "import MorseCWWave from 'morse-pro-cw-wave';\nimport * as RiffWave from 'morse-pro-util-riffwave';\nvar morseCWWave = new MorseCWWave();\nmorseCWWave.translate(\"abc\");\nvar wav = RiffWave.getData(morseCWWave.getSample());  // returns byte array of WAV file"
    ],
    "lineNumber": 23,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 518,
    "kind": "function",
    "name": "u16ToArray",
    "memberof": "src/morse-pro-util-riffwave.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-util-riffwave.js~u16ToArray",
    "access": "public",
    "export": false,
    "importPath": "morse-pro/src/morse-pro-util-riffwave.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 519,
    "kind": "function",
    "name": "split16bitArray",
    "memberof": "src/morse-pro-util-riffwave.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-util-riffwave.js~split16bitArray",
    "access": "public",
    "export": false,
    "importPath": "morse-pro/src/morse-pro-util-riffwave.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 520,
    "kind": "function",
    "name": "fToU8",
    "memberof": "src/morse-pro-util-riffwave.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-util-riffwave.js~fToU8",
    "access": "public",
    "export": false,
    "importPath": "morse-pro/src/morse-pro-util-riffwave.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 521,
    "kind": "function",
    "name": "getData",
    "memberof": "src/morse-pro-util-riffwave.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-util-riffwave.js~getData",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-util-riffwave.js",
    "importStyle": "{getData}",
    "description": "Convert PCM data to WAV file data.",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "waveform data, expected to be in (and clamped to) range [-1,1]"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "8000",
        "defaultRaw": 8000,
        "name": "sampleRate",
        "description": "the sample rate of the waveform in Hz"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "8",
        "defaultRaw": 8,
        "name": "bitsPerSample",
        "description": "number of bits to store each data point (8 or 16)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": "array of bytes representing the WAV file"
    }
  },
  {
    "__docId__": 522,
    "kind": "function",
    "name": "getMIMEType",
    "memberof": "src/morse-pro-util-riffwave.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-util-riffwave.js~getMIMEType",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-util-riffwave.js",
    "importStyle": "{getMIMEType}",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 523,
    "kind": "file",
    "name": "src/morse-pro-wpm.js",
    "content": "/*!\r\nThis code is © Copyright Stephen C. Phillips, 2018.\r\nEmail: steve@scphillips.com\r\n*/\r\n/*\r\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\r\nYou may not use this work except in compliance with the Licence.\r\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\r\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the Licence for the specific language governing permissions and limitations under the Licence.\r\n*/\r\n\r\n/**\r\n * DEPRECATED\r\n * Useful constants and functions for computing the speed of Morse code.\r\n */\r\n\r\nconst DITS_PER_WORD = 50;  /** dits in \"PARIS \" */\r\nconst SPACES_IN_PARIS = 19;  /** 5x 3-dit inter-character spaces + 1x 7-dit space */\r\nconst MS_IN_MINUTE = 60000;  /** number of milliseconds in 1 minute */\r\n\r\n/** Get the dit length in ms\r\n * @param {number} wpm - speed in words per minute\r\n * @return {integer}\r\n */\r\nexport function ditLength(wpm) {\r\n    return Math.round(_ditLength(wpm));\r\n}\r\n\r\nfunction _ditLength(wpm) {\r\n    return (MS_IN_MINUTE / DITS_PER_WORD) / wpm;\r\n}\r\n\r\n/**\r\n * Get the dah length in ms\r\n * @param {number} wpm - speed in words per minute\r\n * @return {integer}\r\n */\r\nexport function dahLength(wpm) {\r\n    return Math.round(3 * _ditLength(wpm));\r\n}\r\n\r\n/**\r\n * Get the dit space in ms\r\n * @param {number} wpm - speed in words per minute\r\n * @return {integer}\r\n */\r\nexport function ditSpace(wpm) {\r\n    return ditLength(wpm)\r\n}\r\n\r\n/**\r\n * Get the character-space in ms\r\n * @param {number} wpm - speed in words per minute\r\n * @param {number} [fwpm = wpm] - Farnsworth speed in words per minute\r\n * @return {integer}\r\n */\r\nexport function charSpace(wpm, fwpm = wpm) {\r\n    return Math.round(3 * _fditLength(wpm, fwpm));\r\n}\r\n\r\n/**\r\n * Get the word-space in ms\r\n * @param {number} wpm - speed in words per minute\r\n * @param {number} [fwpm = wpm] - Farnsworth speed in words per minute\r\n * @return {integer}\r\n */\r\nexport function wordSpace(wpm, fwpm = wpm) {\r\n    return Math.round(7 * _fditLength(wpm, fwpm));\r\n}\r\n\r\n/**\r\n * Get the WPM for a given dit length in ms\r\n * @return {number}\r\n */\r\nexport function wpm(ditLen) {\r\n    return (MS_IN_MINUTE / DITS_PER_WORD) / ditLen;\r\n}\r\n\r\n/**\r\n * Get the Farnsworth dit length in ms for a given WPM and Farnsworth WPM. Note, actual dit-spaces should not be slowed down\r\n * @return {integer}\r\n */\r\nexport function fditLength(wpm, fwpm) {\r\n    return Math.round(_fditLength(wpm, fwpm));\r\n}\r\n\r\nfunction _fditLength(wpm, fwpm) {\r\n    return _ditLength(wpm) * ratio(wpm, fwpm);\r\n}\r\n\r\n/**\r\n * Get the dit length ratio for a given WPM and Farnsworth WPM\r\n * @param {number} wpm - speed in words per minute\r\n * @param {number} fwpm - Farnsworth speed in words per minute\r\n * @return {number}\r\n */\r\nexport function ratio(wpm, fwpm) {\r\n    // \"PARIS \" is 31 units for the characters and 19 units for the inter-character spaces and inter-word space\r\n    // One unit takes 1 * 60 / (50 * wpm)\r\n    // The 31 units should take 31 * 60 / (50 * wpm) seconds at wpm\r\n    // \"PARIS \" should take 50 * 60 / (50 * fwpm) to transmit at fwpm, or 60 / fwpm  seconds at fwpm\r\n    // Keeping the time for the characters constant,\r\n    // The spaces need to take: (60 / fwpm) - [31 * 60 / (50 * wpm)] seconds in total\r\n    // The spaces are 4 inter-character spaces of 3 units and 1 inter-word space of 7 units. Their ratio must be maintained.\r\n    // A space unit is: [(60 / fwpm) - [31 * 60 / (50 * wpm)]] / 19 seconds\r\n    // Comparing that to 60 / (50 * wpm) gives a ratio of (50.wpm - 31.fwpm) / 19.fwpm\r\n    return (DITS_PER_WORD * wpm - (DITS_PER_WORD - SPACES_IN_PARIS) * fwpm) / (SPACES_IN_PARIS * fwpm);\r\n}\r\n\r\n/** Get the Farnsworth WPM for a given WPM and ratio */\r\nexport function fwpm(wpm, r) {\r\n    return DITS_PER_WORD * wpm / (SPACES_IN_PARIS * r + (DITS_PER_WORD - SPACES_IN_PARIS));\r\n}",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro-wpm.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 524,
    "kind": "variable",
    "name": "DITS_PER_WORD",
    "memberof": "src/morse-pro-wpm.js",
    "static": true,
    "longname": "src/morse-pro-wpm.js~DITS_PER_WORD",
    "access": "public",
    "export": false,
    "importPath": "morse-pro/src/morse-pro-wpm.js",
    "importStyle": null,
    "description": "DEPRECATED\nUseful constants and functions for computing the speed of Morse code.",
    "lineNumber": 18,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 525,
    "kind": "variable",
    "name": "SPACES_IN_PARIS",
    "memberof": "src/morse-pro-wpm.js",
    "static": true,
    "longname": "src/morse-pro-wpm.js~SPACES_IN_PARIS",
    "access": "public",
    "export": false,
    "importPath": "morse-pro/src/morse-pro-wpm.js",
    "importStyle": null,
    "description": "dits in \"PARIS \"",
    "lineNumber": 19,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 526,
    "kind": "variable",
    "name": "MS_IN_MINUTE",
    "memberof": "src/morse-pro-wpm.js",
    "static": true,
    "longname": "src/morse-pro-wpm.js~MS_IN_MINUTE",
    "access": "public",
    "export": false,
    "importPath": "morse-pro/src/morse-pro-wpm.js",
    "importStyle": null,
    "description": "5x 3-dit inter-character spaces + 1x 7-dit space",
    "lineNumber": 20,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 527,
    "kind": "function",
    "name": "ditLength",
    "memberof": "src/morse-pro-wpm.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-wpm.js~ditLength",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-wpm.js",
    "importStyle": "{ditLength}",
    "description": "Get the dit length in ms",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "wpm",
        "description": "speed in words per minute"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 528,
    "kind": "function",
    "name": "_ditLength",
    "memberof": "src/morse-pro-wpm.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-wpm.js~_ditLength",
    "access": "private",
    "export": false,
    "importPath": "morse-pro/src/morse-pro-wpm.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "wpm",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 529,
    "kind": "function",
    "name": "dahLength",
    "memberof": "src/morse-pro-wpm.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-wpm.js~dahLength",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-wpm.js",
    "importStyle": "{dahLength}",
    "description": "Get the dah length in ms",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "wpm",
        "description": "speed in words per minute"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 530,
    "kind": "function",
    "name": "ditSpace",
    "memberof": "src/morse-pro-wpm.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-wpm.js~ditSpace",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-wpm.js",
    "importStyle": "{ditSpace}",
    "description": "Get the dit space in ms",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "wpm",
        "description": "speed in words per minute"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 531,
    "kind": "function",
    "name": "charSpace",
    "memberof": "src/morse-pro-wpm.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-wpm.js~charSpace",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-wpm.js",
    "importStyle": "{charSpace}",
    "description": "Get the character-space in ms",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "wpm",
        "description": "speed in words per minute"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " wpm",
        "defaultRaw": " wpm",
        "name": "fwpm",
        "description": "Farnsworth speed in words per minute"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 532,
    "kind": "function",
    "name": "wordSpace",
    "memberof": "src/morse-pro-wpm.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-wpm.js~wordSpace",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-wpm.js",
    "importStyle": "{wordSpace}",
    "description": "Get the word-space in ms",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "wpm",
        "description": "speed in words per minute"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " wpm",
        "defaultRaw": " wpm",
        "name": "fwpm",
        "description": "Farnsworth speed in words per minute"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 533,
    "kind": "function",
    "name": "wpm",
    "memberof": "src/morse-pro-wpm.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-wpm.js~wpm",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-wpm.js",
    "importStyle": "{wpm}",
    "description": "Get the WPM for a given dit length in ms",
    "lineNumber": 76,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "ditLen",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 534,
    "kind": "function",
    "name": "fditLength",
    "memberof": "src/morse-pro-wpm.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-wpm.js~fditLength",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-wpm.js",
    "importStyle": "{fditLength}",
    "description": "Get the Farnsworth dit length in ms for a given WPM and Farnsworth WPM. Note, actual dit-spaces should not be slowed down",
    "lineNumber": 84,
    "return": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "wpm",
        "types": [
          "*"
        ]
      },
      {
        "name": "fwpm",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 535,
    "kind": "function",
    "name": "_fditLength",
    "memberof": "src/morse-pro-wpm.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-wpm.js~_fditLength",
    "access": "private",
    "export": false,
    "importPath": "morse-pro/src/morse-pro-wpm.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "wpm",
        "types": [
          "*"
        ]
      },
      {
        "name": "fwpm",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 536,
    "kind": "function",
    "name": "ratio",
    "memberof": "src/morse-pro-wpm.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-wpm.js~ratio",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-wpm.js",
    "importStyle": "{ratio}",
    "description": "Get the dit length ratio for a given WPM and Farnsworth WPM",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "wpm",
        "description": "speed in words per minute"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fwpm",
        "description": "Farnsworth speed in words per minute"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 537,
    "kind": "function",
    "name": "fwpm",
    "memberof": "src/morse-pro-wpm.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/morse-pro-wpm.js~fwpm",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro-wpm.js",
    "importStyle": "{fwpm}",
    "description": "Get the Farnsworth WPM for a given WPM and ratio",
    "lineNumber": 112,
    "params": [
      {
        "name": "wpm",
        "types": [
          "*"
        ]
      },
      {
        "name": "r",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 538,
    "kind": "file",
    "name": "src/morse-pro.js",
    "content": "/*!\r\nThis code is © Copyright Stephen C. Phillips, 2018.\r\nEmail: steve@scphillips.com\r\n*/\r\n/*\r\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\r\nYou may not use this work except in compliance with the Licence.\r\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\r\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the Licence for the specific language governing permissions and limitations under the Licence.\r\n*/\r\n\r\n/**\r\n * Basic methods to translate Morse code.\r\n */\r\n\r\nimport { dictionaries } from \"./dictionary/index.js\";\r\n\r\nexport default class Morse {\r\n    /**\r\n     *\r\n     * @param {Object} params - dictionary of optional parameters.\r\n     * @param {String} [params.dictionary='international'] - which dictionary to use, e.g. 'international' or 'american'. Can optionally take a list of dictionary strings.\r\n     * @param {String[]} [params.dictionaryOptions=[]] - optional additional dictionaries such as 'prosigns'. Will look these up in the merged dictionary formed of the list of dictionaries.\r\n     */\r\n    constructor({dictionary='international', dictionaryOptions=[]} = {}) {\r\n        if (typeof dictionary === 'string') {\r\n            dictionary = [dictionary];\r\n        }\r\n        this.setDictionariesAndOptions(dictionary, dictionaryOptions);\r\n    }\r\n\r\n    setDictionariesAndOptions(dictList, optionList) {\r\n        this.dictionaries = dictList;\r\n        this.options = optionList;\r\n        this._loadDictionaries();\r\n    }\r\n\r\n    /**\r\n     * Set the list of dictionaries to use.\r\n     * @param {List} dictList - list of dictionary names\r\n     */\r\n    setDictionaries(dictList) {\r\n        this.dictionaries = dictList;\r\n        this._loadDictionaries();\r\n    }\r\n\r\n    /**\r\n     * Set the list of dictionary options to use.\r\n     * @param {List} optionList - list of dictionary option names. Looked up in merged dictionary\r\n     */\r\n    setOptions(optionList) {\r\n        this.options = optionList;\r\n        this._loadDictionaries()\r\n    }\r\n\r\n    _loadDictionaries() {\r\n        // Clear any existing mappings:\r\n        this.text2morseD = {};\r\n        this.morse2textD = {};\r\n        // Set up sensible default:\r\n        this._addDictionary({\r\n            letter:{'':''},\r\n            letterMatch:/^./\r\n        });\r\n        // Load in all dictionaries:\r\n        for (let d of this.dictionaries) {\r\n            if (d in dictionaries) {\r\n                let dict = dictionaries[d]  // switch to the imported dict\r\n                this._addDictionary(dict);\r\n            } else {\r\n                throw `No dictionary called '${d}'`;\r\n            }\r\n        }\r\n        // Overlay any options:\r\n        for (let optName of this.options) {\r\n            if (this.dictionary.options[optName] !== undefined) {\r\n                this._addDictionary(this.dictionary.options[optName])\r\n            } else {\r\n                throw `No option '${optName}' in '${this.dictionary.id}'`;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load in a dictionary.\r\n     * Dictionary needs 'letter' and (optional) 'letterMatch' keys.\r\n     * @param {Object} dict\r\n     */\r\n    _addDictionary(dict) {\r\n        this.dictionary = {...this.dictionary, ...dict};  // overwrite any existing keys with the new dict\r\n\r\n        let letters = dict.letter;\r\n        for (let letter in letters) {\r\n            // overwrite any existing letter keys\r\n            this.text2morseD[letter] = letters[letter];\r\n            this.morse2textD[letters[letter]] = letter;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * General method for converting a set of tokens to a displayable string\r\n     * @param {Array} tokens - list of lists of tokens to form into String\r\n     * @param {String} charSpace - String to use to separate characters\r\n     * @param {String} wordSpace - String to use to separate words\r\n     * @param {Map} map - Map to replace tokens with alternatives, e.g. for display escaping {'>', '&gt;'}\r\n     * @param {Array} errors - list if lists of Booleans indicating if there is an error in the tokens parameter\r\n     * @param {String} errorPrefix - used to prefix any token that is an error\r\n     * @param {String} errorSuffix - used to suffix any token that is an error\r\n     * @returns a String of the tokens\r\n     */\r\n    display(tokens, charSpace, wordSpace, map={}, errors=undefined, errorPrefix='', errorSuffix='') {\r\n        for (let k in map) {\r\n            tokens = tokens.map(word => word.map(char => char.replace(new RegExp(k, 'g'), map[k])));\r\n        }\r\n        if (errors !== undefined) {\r\n            for (let i = 0; i < tokens.length; i++) {\r\n                for (let j = 0; j < tokens[i].length; j++) {\r\n                    if (errors[i][j]) {\r\n                        tokens[i][j] = errorPrefix + tokens[i][j] + errorSuffix;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let words = tokens.map(word => word.join(charSpace));\r\n        return words.join(wordSpace);\r\n    }\r\n\r\n    /**\r\n     * Tidies text (upper case, trim, squash multiple spaces)\r\n     * @param {String} text - the text to tidy\r\n     * @returns the tidied text\r\n     */\r\n    tidyText(text) {\r\n        text = text.trim();\r\n        text = text.replace(/\\s+/g, ' ');\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * Splits text into words and letters\r\n     * @param {String} text - the text to tokenise\r\n     * @returns a list of lists, e.g. [['o', 'n', 'e'], ['t', 'w', 'o']]\r\n     */\r\n    tokeniseRawText(text) {\r\n        let tokens = []\r\n        let words = text.split(' ');\r\n        for (let word of words) {\r\n            let letters = [];\r\n            while (word.length) {\r\n                let letter = word.match(this.dictionary.letterMatch)[0];\r\n                word = word.substr(letter.length);\r\n                letters.push(letter);\r\n            }\r\n            tokens.push(letters);\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n    /**\r\n     * Tidies and then tokenises text\r\n     * @param {String} text - the text to tokenise\r\n     * @returns - the tidied, tokenised text\r\n     */\r\n    tokeniseText(text) {\r\n        return this.tokeniseRawText(this.tidyText(text));\r\n    }\r\n\r\n    /**\r\n     * Convert from text tokens to displayable String\r\n     * @param {Array} textTokens - list of lists representing the words and characters\r\n     * @param {Map} escapeMap - Map to replace tokens with alternatives, e.g. for display escaping {'>', '&gt;'}\r\n     * @returns a String, joining the characters together, separating the words with a space\r\n     */\r\n    displayText(textTokens, escapeMap) {\r\n        return this.display(textTokens, '', ' ', escapeMap)\r\n    }\r\n\r\n    displayTextErrors(textTokens, escapeMap, errorTokens, prefix, suffix) {\r\n        return this.display(textTokens, '', ' ', escapeMap, errorTokens, prefix, suffix);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Array} textTokens - list of lists of text tokens\r\n     * @returns Map - text: text tokens, morse: morse tokens, error: error tokens, hasError Boolean\r\n     */\r\n    textTokens2morse(textTokens) {\r\n        let translation = this._input2output(textTokens, this.text2morseD);\r\n        return {\r\n            text: textTokens,\r\n            morse: translation.output,\r\n            error: translation.error,\r\n            hasError: translation.hasError\r\n        }\r\n    }\r\n\r\n    text2morse(text) {\r\n        let textTokens = this.tokeniseText(text);\r\n        return this.textTokens2morse(textTokens);\r\n    }\r\n\r\n    tokeniseMorse(morse) {\r\n        return this.dictionary.tokeniseMorse(morse);\r\n    }\r\n\r\n    displayMorse(morseTokens) {\r\n        return this.display(morseTokens,\r\n            this.dictionary.display.join.charSpace, this.dictionary.display.join.wordSpace, this.dictionary.display.morse);\r\n    }\r\n\r\n    displayMorseErrors(morseTokens, errorTokens, prefix, suffix) {\r\n        return this.display(morseTokens,\r\n            this.dictionary.display.join.charSpace, this.dictionary.display.join.wordSpace, this.dictionary.display.morse,\r\n            errorTokens, prefix, suffix);\r\n    }\r\n\r\n    morseTokens2text(morseTokens) {\r\n        let translation = this._input2output(morseTokens, this.morse2textD);\r\n        return {\r\n            morse: morseTokens,\r\n            text: translation.output,\r\n            error: translation.error,\r\n            hasError: translation.hasError\r\n        }\r\n    }\r\n\r\n    morse2text(morse) {\r\n        let morseTokens = this.tokeniseMorse(morse);\r\n        return this.morseTokens2text(morseTokens);\r\n    }\r\n\r\n    looksLikeMorse(input) {\r\n        return input.match(this.dictionary.morseMatch) !== null;\r\n    }\r\n\r\n    _input2output(tokens, dict) {\r\n        let ret = {\r\n            output: [],\r\n            error: [],\r\n            hasError: false\r\n        }\r\n        for (let letters of tokens) {\r\n            let chars = [];\r\n            let errors = [];\r\n            for (let letter of letters) {\r\n                let char = '';\r\n                let error = false;\r\n                // These tests are a little complex because e.g. the american dictionary uses \"s\" and \"S\" in the Morse.\r\n                // You therefore have to test without uppercasing.\r\n                // The uppercase test is useful though (so added here) so that the case of the input itself doesn't have to be changed.\r\n                // That's helpful e.g. when someone enters text in the translator that needs cleaning up: the case can be maintained.\r\n                if (letter in dict) {\r\n                    char = dict[letter];\r\n                } else if (letter.toUpperCase() in dict) {\r\n                    char = dict[letter.toUpperCase()];\r\n                } else {\r\n                    error = true;\r\n                }\r\n                chars.push(char);\r\n                errors.push(error);\r\n                ret.hasError = ret.hasError || error;\r\n            }\r\n            ret.output.push(chars);\r\n            ret.error.push(errors);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    text2morseClean(text) {\r\n        let d = this.text2morse(text);\r\n        d.text = d.text.map((word, i) => word.filter((char, j) => !d.error[i][j]));\r\n        d.morse = d.morse.map((word, i) => word.filter((char, j) => !d.error[i][j]));\r\n        d.error = d.error.map(word => word.filter(error => !error));\r\n        d.hasError = false;\r\n        return d;\r\n    }\r\n}\r\n\r\n",
    "static": true,
    "longname": "/home/scp/morse-pro/src/morse-pro.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 539,
    "kind": "class",
    "name": "Morse",
    "memberof": "src/morse-pro.js",
    "static": true,
    "longname": "src/morse-pro.js~Morse",
    "access": "public",
    "export": true,
    "importPath": "morse-pro/src/morse-pro.js",
    "importStyle": "Morse",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 540,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "dictionary of optional parameters."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'international'",
        "defaultRaw": "'international'",
        "name": "params.dictionary",
        "description": "which dictionary to use, e.g. 'international' or 'american'. Can optionally take a list of dictionary strings."
      },
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "params.dictionaryOptions",
        "description": "optional additional dictionaries such as 'prosigns'. Will look these up in the merged dictionary formed of the list of dictionaries."
      }
    ]
  },
  {
    "__docId__": 541,
    "kind": "method",
    "name": "setDictionariesAndOptions",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#setDictionariesAndOptions",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "dictList",
        "types": [
          "*"
        ]
      },
      {
        "name": "optionList",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 542,
    "kind": "member",
    "name": "dictionaries",
    "memberof": "src/morse-pro.js~Morse",
    "static": false,
    "longname": "src/morse-pro.js~Morse#dictionaries",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 543,
    "kind": "member",
    "name": "options",
    "memberof": "src/morse-pro.js~Morse",
    "static": false,
    "longname": "src/morse-pro.js~Morse#options",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 544,
    "kind": "method",
    "name": "setDictionaries",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#setDictionaries",
    "access": "public",
    "description": "Set the list of dictionaries to use.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "dictList",
        "description": "list of dictionary names"
      }
    ],
    "return": null
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "setOptions",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#setOptions",
    "access": "public",
    "description": "Set the list of dictionary options to use.",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "optionList",
        "description": "list of dictionary option names. Looked up in merged dictionary"
      }
    ],
    "return": null
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "_loadDictionaries",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#_loadDictionaries",
    "access": "private",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 549,
    "kind": "member",
    "name": "text2morseD",
    "memberof": "src/morse-pro.js~Morse",
    "static": false,
    "longname": "src/morse-pro.js~Morse#text2morseD",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 550,
    "kind": "member",
    "name": "morse2textD",
    "memberof": "src/morse-pro.js~Morse",
    "static": false,
    "longname": "src/morse-pro.js~Morse#morse2textD",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "_addDictionary",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#_addDictionary",
    "access": "private",
    "description": "Load in a dictionary.\nDictionary needs 'letter' and (optional) 'letterMatch' keys.",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dict",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 552,
    "kind": "member",
    "name": "dictionary",
    "memberof": "src/morse-pro.js~Morse",
    "static": false,
    "longname": "src/morse-pro.js~Morse#dictionary",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "{...undefined: Object, ...dict: Object}"
      ]
    }
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "display",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#display",
    "access": "public",
    "description": "General method for converting a set of tokens to a displayable string",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "a String of the tokens"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "tokens",
        "description": "list of lists of tokens to form into String"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "charSpace",
        "description": "String to use to separate characters"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "wordSpace",
        "description": "String to use to separate words"
      },
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": "Map to replace tokens with alternatives, e.g. for display escaping {'>', '&gt;'}"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "errors",
        "description": "list if lists of Booleans indicating if there is an error in the tokens parameter"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "errorPrefix",
        "description": "used to prefix any token that is an error"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "errorSuffix",
        "description": "used to suffix any token that is an error"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "a String of the tokens"
    }
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "tidyText",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#tidyText",
    "access": "public",
    "description": "Tidies text (upper case, trim, squash multiple spaces)",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "the tidied text"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the text to tidy"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "the tidied text"
    }
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "tokeniseRawText",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#tokeniseRawText",
    "access": "public",
    "description": "Splits text into words and letters",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "a list of lists, e.g. [['o', 'n', 'e'], ['t', 'w', 'o']]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the text to tokenise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "a list of lists, e.g. [['o', 'n', 'e'], ['t', 'w', 'o']]"
    }
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "tokeniseText",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#tokeniseText",
    "access": "public",
    "description": "Tidies and then tokenises text",
    "lineNumber": 165,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "- the tidied, tokenised text"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the text to tokenise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "the tidied, tokenised text"
    }
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "displayText",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#displayText",
    "access": "public",
    "description": "Convert from text tokens to displayable String",
    "lineNumber": 175,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "a String, joining the characters together, separating the words with a space"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "textTokens",
        "description": "list of lists representing the words and characters"
      },
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": false,
        "name": "escapeMap",
        "description": "Map to replace tokens with alternatives, e.g. for display escaping {'>', '&gt;'}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "a String, joining the characters together, separating the words with a space"
    }
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "displayTextErrors",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#displayTextErrors",
    "access": "public",
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [
      {
        "name": "textTokens",
        "types": [
          "*"
        ]
      },
      {
        "name": "escapeMap",
        "types": [
          "*"
        ]
      },
      {
        "name": "errorTokens",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "suffix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 559,
    "kind": "method",
    "name": "textTokens2morse",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#textTokens2morse",
    "access": "public",
    "description": "",
    "lineNumber": 188,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Map - text: text tokens, morse: morse tokens, error: error tokens, hasError Boolean"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "textTokens",
        "description": "list of lists of text tokens"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Map - text: text tokens, morse: morse tokens, error: error tokens, hasError Boolean"
    }
  },
  {
    "__docId__": 560,
    "kind": "method",
    "name": "text2morse",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#text2morse",
    "access": "public",
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 561,
    "kind": "method",
    "name": "tokeniseMorse",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#tokeniseMorse",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "params": [
      {
        "name": "morse",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "displayMorse",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#displayMorse",
    "access": "public",
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "params": [
      {
        "name": "morseTokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "displayMorseErrors",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#displayMorseErrors",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [
      {
        "name": "morseTokens",
        "types": [
          "*"
        ]
      },
      {
        "name": "errorTokens",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "suffix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "morseTokens2text",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#morseTokens2text",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "params": [
      {
        "name": "morseTokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"morse\": *, \"text\": *, \"error\": *, \"hasError\": *}"
      ]
    }
  },
  {
    "__docId__": 565,
    "kind": "method",
    "name": "morse2text",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#morse2text",
    "access": "public",
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "params": [
      {
        "name": "morse",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 566,
    "kind": "method",
    "name": "looksLikeMorse",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#looksLikeMorse",
    "access": "public",
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "_input2output",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#_input2output",
    "access": "private",
    "description": null,
    "lineNumber": 237,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      },
      {
        "name": "dict",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "text2morseClean",
    "memberof": "src/morse-pro.js~Morse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/morse-pro.js~Morse#text2morseClean",
    "access": "public",
    "description": null,
    "lineNumber": 270,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "[![Version](https://img.shields.io/npm/v/morse-pro.svg)](https://www.npmjs.com/package/morse-pro)\n[![Downloads](https://img.shields.io/npm/dm/morse-pro.svg)](https://www.npmjs.com/package/morse-pro)\n[![License](https://img.shields.io/npm/l/morse-pro.svg)](https://joinup.ec.europa.eu/community/eupl/home)\n\n# Introduction\n\nThis Javascript (ES6) library is for manipulating Morse code text and sound. It is the library used in the tools on [Morse Code World](https://morsecode.world).\n\nThe library can:\n\n* Translate to and from text and Morse code (in the form of '-- --- .-. ... . / -.-. --- -.. .').\n* Understand Morse code prosigns.\n* Translate and play International, American (railroad), Arabic, Cyrillic, Cyrillic-Ukraine, Hebrew variants.\n* Generate downloadable RIFF WAVE ('.wav') files of Morse code at given frequency and speed.\n* Make use of the \"Farnsworth speed\" concept of extending the gaps between characters and words.\n* Generate in-browser sounds using the Web Audio API and falling back to other methods such as Flash for older browsers.\n* Take Morse code input from a web-based keyer or iambic keyer.\n* Decode to text given 'on' and 'off' timings and a fixed speed.\n* Adaptively decode to text, adjusting to the most likely speed and Farnsworth speed.\n* Decode from listening to the microphone or an audio file, adapting to the most prominent frequency.\n\nIt has been written using ES6 (ECMA Script 6).\n\n# Copyright and Licence\n\nTwo files ([morse-pro-util-riffwave.js](./src/morse-pro-util-riffwave.js) and [morse-pro-util-datauri.js](./src/morse-pro-util-datauri.js)) are Public Domain. The others are:\n\nCopyright: Stephen C Phillips, 2013-2017; Licensed under the EUPL v1.2, with extension of article 5 (compatibility clause) to any licence for distributing derivative works that have been produced by the normal use of the Work as a library.\n\n*Please note, this is different to the Expat (MIT) licence often found in Javascript projects and places restrictions and obligations on the user of the software.*\n\nThe full text of the licence can be found in the [LICENSE file](./LICENSE) in this folder. Comments below do not constitute the licence, they are just my comments on the licence.\n\nThe EUPL is an 'open source' licence: one of many options and one in the 'weak-copyleft' category. My intention in using EUPL v1.2 is primarily to ensure that any modifications to this library are made available to the community as source code. In contrast to many open source licences, the EUPL v1.2 licence makes it clear that modifications must be made available even in the case of the library being used as part of a web service and not distributed to the user, covering the 'Application Service Provider loophole' (in this case it is similar to the AGPL licence). My intention is also that this library can be used as a library by other pieces of software but that the EUPL v1.2 licence does not have to be applied to the software that links to it (this is similar to the LGPL licence). Of course, if you want to open source software that links to this library then you are free to do so.\n\nSo basically, if you use the library as-is in some piece of software then that's just fine (though an acknowledgement would be nice) and you can even keep the software closed-source should you wish to. If you *modify the library* **and** *use it in some software that you provide to others*, even if the library is not distributed to the users, then you must provide your modifications to the library back to the community so that everyone can benefit.\n\nMore information on the EUPL v1.2:\n\n* [EUPL information](https://joinup.ec.europa.eu/community/eupl/home)\n* [EUPL and Proprietary / Commercial use](https://joinup.ec.europa.eu/community/eupl/news/eupl-and-proprietary/commercial-use)\n* [Compatibility with other licences](https://joinup.ec.europa.eu/community/eupl/og_page/eupl-compatible-open-source-licences)\n* [Summary of the similar EUPL v1.1 from TL;DR Legal](https://tldrlegal.com/license/european-union-public-licence)\n\nIf you would like to access this software under a different licence then please get in touch and ask.\n\n# Documentation\n\nDocumentation on how to use the library is embedded in the source code and can be found [in the esdoc folder](./doc/esdoc/).\n\nSome diagrams:\n\n* [Class diagram](./doc/classes.svg)\n* [Audio pipeline](./doc/audio-pipeline.svg)\n\n## Library Overview\n\nBasics:\n\n* [morse-pro.js](./src/morse-pro.js): Morse class, providing basic functions to translate Morse code and manage translation dictionaries.\n* [morse-pro-message.js](./src/morse-pro-message.js): MorseMessage class, for conveniently translating to and from Morse code and dealing with errors.\n* [dictionary](./src/dictionary): mappings from characters to dots and dashes and configuration of timing and translation\n\nAudio:\n\n* [morse-pro-cw.js](./src/morse-pro-cw.js): MorseCW class, to create the on/off timings needed by e.g. sound generators. Understands speed and Farnsworth speed concepts. Extends Morse class.\n* [morse-pro-cw-wave.js](./src/morse-pro-cw-wave.js): MorseCWWave class, to create sine-wave samples of standard CW Morse. Extends MorseCW.\n* [morse-pro-audiocontext.js](./src/morse-pro-audiocontext.js): MorseAudioContext singleton class to reliably obtain the web audio API AudioContext instance and load sound samples.\n* [morse-player-waa.js](./src/morse-player-waa.js): MorsePlayerWAA class, to play sounds in a web browser using the Web Audio API.\n* [morse-player-waa-light.js](./src/morse-player-waa-light.js): MorsePlayerWAALight class. Extends MorsePlayerWAA to provide callbacks when the sound goes on or off and when the sound ends. Can be used to turn a light on or off in time with the Morse sound.\n* [morse-player-xas.js](./src/morse-player-xas.js): MorsePlayerXAS class, to play sounds in older web browsers (e.g. IE) using XAudioJS.\n\nDecoders:\n\n* [morse-pro-decoder.js](./src/morse-pro-decoder.js): MorseDecoder class which converts from timings to Morse code. Extends MorseCW.\n* [morse-pro-decoder-adaptive.js](./src/morse-pro-decoder-adaptive.js): MorseDecoderAdaptive class, converts from timings to Morse code and adapts to changing speed. Extends MorseDecoder.\n\nKeyers:\n\n* [morse-pro-keyer.js](./src/morse-pro-keyer.js): MorseKeyer class, tests for input (e.g. from the keyboard) using a timer, plays the appropriate tone via a MorsePlayer instance and passes the data to a MorseDecoder instance.\n* [morse-pro-keyer-iambic.js](./src/morse-pro-keyer-iambic.js): MorseKeyerIambic class extends MorseKeyer, will alternate between dit and dah if both keys are pressed together.\n\nListeners:\n\n* [morse-pro-listener.js](./src/morse-pro-listener.js): MorseListener class, analyses audio from the microphone or a sound file to pick out Morse code timings which are passed into a MorseDecoder instance.\n* [morse-pro-listener-adaptive.js](./src/morse-pro-listener-adaptive.js): MorseListenerAdaptive class extends MorseListener, adapts to changing frequency (pitch).\n\nUtilities:\n\n* [morse-pro-util-datauri.js](./src/morse-pro-util-datauri.js): Function to create a data URI.\n* [morse-pro-util-riffwave.js](./src/morse-pro-util-riffwave.js): Function to create a RIFF WAVE (.wav) file from a MorseCWWave instance.\n\nDeprecated and compatibility:\n\n* [morse-pro-wpm.js](./src/morse-pro-wpm.js): DEPRECATED. Constants and functions for computing the speed (and Farnsworth speed) of Morse code.\n* [morse-pro-compat.js](./src/morse-pro-compat.js): compatibility class for v2\n* [morse-pro-cw-compat.js](./src/morse-pro-cw-compat.js): compatibility class for v2\n",
    "longname": "/home/scp/morse-pro/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"morse-pro\",\n  \"version\": \"3.0.0\",\n  \"description\": \"Library for manipulating Morse code text and sound. Understands prosigns and Farnsworth speed. Can playback via web audio API, WAV files, vibration and light and can decode input from the microphone or audio files.\",\n  \"keywords\": [\n    \"morse code\",\n    \"CW\",\n    \"decoder\",\n    \"wav file\",\n    \"microphone\",\n    \"sound file\",\n    \"adaptive\",\n    \"keyer\",\n    \"iambic\",\n    \"prosigns\"\n  ],\n  \"license\": \"EUPL-1.2\",\n  \"homepage\": \"https://morsecode.world\",\n  \"author\": {\n    \"name\": \"Stephen C Phillips\",\n    \"email\": \"steve@morsecode.world\",\n    \"url\": \"https://scphillips.com\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://gitlab.com/scphillips/morse-pro.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://gitlab.com/scphillips/morse-pro/-/issues\"\n  },\n  \"directories\": {\n    \"lib\": \"lib\",\n    \"doc\": \"doc\"\n  },\n  \"files\": [\n    \"lib\"\n  ],\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.18.10\",\n    \"@babel/core\": \"^7.18.10\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"rimraf\": \"^3.0.2\"\n  },\n  \"esdoc\": {\n    \"source\": \"./src\",\n    \"destination\": \"./doc/esdoc\",\n    \"plugins\": [\n      {\n        \"name\": \"esdoc-standard-plugin\"\n      },\n      {\n        \"name\": \"esdoc-ecmascript-proposal-plugin\",\n        \"option\": {\n          \"classProperties\": true,\n          \"objectRestSpread\": true,\n          \"doExpressions\": true,\n          \"functionBind\": true,\n          \"functionSent\": true,\n          \"asyncGenerators\": true,\n          \"decorators\": true,\n          \"exportExtensions\": true,\n          \"dynamicImport\": true\n        }\n      }\n    ]\n  },\n  \"scripts\": {\n    \"clean\": \"rimraf lib\",\n    \"prebuild\": \"npm run clean -s\",\n    \"build\": \"babel src -d lib\",\n    \"prepare\": \"npm run build\",\n    \"build-docs\": \"esdoc\"\n  }\n}\n",
    "longname": "/home/scp/morse-pro/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]